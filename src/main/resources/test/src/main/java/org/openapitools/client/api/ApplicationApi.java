/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Application;
import org.openapitools.client.model.ApplicationApiSearchResponse;
import org.openapitools.client.model.ApplicationResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.CancelApplication;
import org.openapitools.client.model.Error;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ReturnRequest;
import org.openapitools.client.model.UploadApplicationDocumentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelApplication
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param cancelApplication The application cancellation payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelApplicationCall(String id, CancelApplication cancelApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelApplication;

        // create path and map variables
        String localVarPath = "/v2/applications/{id}/cancel"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelApplicationValidateBeforeCall(String id, CancelApplication cancelApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelApplication(Async)");
        }

        // verify the required parameter 'cancelApplication' is set
        if (cancelApplication == null) {
            throw new ApiException("Missing the required parameter 'cancelApplication' when calling cancelApplication(Async)");
        }

        return cancelApplicationCall(id, cancelApplication, _callback);

    }

    /**
     * Cancels an application if possible (i.e. if its state is not APPROVED nor RETURNED).
     * The application state will be updated to CANCELED and offer cancellation requests will be submitted to the lenders that support this feature
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param cancelApplication The application cancellation payload (required)
     * @return ApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResponse cancelApplication(String id, CancelApplication cancelApplication) throws ApiException {
        ApiResponse<ApplicationResponse> localVarResp = cancelApplicationWithHttpInfo(id, cancelApplication);
        return localVarResp.getData();
    }

    /**
     * Cancels an application if possible (i.e. if its state is not APPROVED nor RETURNED).
     * The application state will be updated to CANCELED and offer cancellation requests will be submitted to the lenders that support this feature
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param cancelApplication The application cancellation payload (required)
     * @return ApiResponse&lt;ApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResponse> cancelApplicationWithHttpInfo(String id, CancelApplication cancelApplication) throws ApiException {
        okhttp3.Call localVarCall = cancelApplicationValidateBeforeCall(id, cancelApplication, null);
        Type localVarReturnType = new TypeToken<ApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancels an application if possible (i.e. if its state is not APPROVED nor RETURNED). (asynchronously)
     * The application state will be updated to CANCELED and offer cancellation requests will be submitted to the lenders that support this feature
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param cancelApplication The application cancellation payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelApplicationAsync(String id, CancelApplication cancelApplication, final ApiCallback<ApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelApplicationValidateBeforeCall(id, cancelApplication, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkApiKey
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkApiKeyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/applications/health-check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkApiKeyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return checkApiKeyCall(_callback);

    }

    /**
     * Checks the validity of an API-KEY
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public void checkApiKey() throws ApiException {
        checkApiKeyWithHttpInfo();
    }

    /**
     * Checks the validity of an API-KEY
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkApiKeyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = checkApiKeyValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Checks the validity of an API-KEY (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkApiKeyAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkApiKeyValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createApplication
     * @param application The payload of the application that is about to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The application has been successfully created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApplicationCall(Application application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = application;

        // create path and map variables
        String localVarPath = "/v2/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApplicationValidateBeforeCall(Application application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling createApplication(Async)");
        }

        return createApplicationCall(application, _callback);

    }

    /**
     * Creates a new application
     * 
     * @param application The payload of the application that is about to be created (required)
     * @return ApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The application has been successfully created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResponse createApplication(Application application) throws ApiException {
        ApiResponse<ApplicationResponse> localVarResp = createApplicationWithHttpInfo(application);
        return localVarResp.getData();
    }

    /**
     * Creates a new application
     * 
     * @param application The payload of the application that is about to be created (required)
     * @return ApiResponse&lt;ApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The application has been successfully created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResponse> createApplicationWithHttpInfo(Application application) throws ApiException {
        okhttp3.Call localVarCall = createApplicationValidateBeforeCall(application, null);
        Type localVarReturnType = new TypeToken<ApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new application (asynchronously)
     * 
     * @param application The payload of the application that is about to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The application has been successfully created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApplicationAsync(Application application, final ApiCallback<ApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApplicationValidateBeforeCall(application, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApplication
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Application recovered successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/applications/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getApplication(Async)");
        }

        return getApplicationCall(id, _callback);

    }

    /**
     * Gets an existing application
     * 
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @return ApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Application recovered successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResponse getApplication(String id) throws ApiException {
        ApiResponse<ApplicationResponse> localVarResp = getApplicationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Gets an existing application
     * 
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @return ApiResponse&lt;ApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Application recovered successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResponse> getApplicationWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getApplicationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an existing application (asynchronously)
     * 
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Application recovered successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationAsync(String id, final ApiCallback<ApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offerReturnRequest
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param returnRequest The return request payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offerReturnRequestCall(String id, ReturnRequest returnRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnRequest;

        // create path and map variables
        String localVarPath = "/v2/applications/{id}/return"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offerReturnRequestValidateBeforeCall(String id, ReturnRequest returnRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling offerReturnRequest(Async)");
        }

        // verify the required parameter 'returnRequest' is set
        if (returnRequest == null) {
            throw new ApiException("Missing the required parameter 'returnRequest' when calling offerReturnRequest(Async)");
        }

        return offerReturnRequestCall(id, returnRequest, _callback);

    }

    /**
     * Initiates the return of an approved loan
     * Will commence the loan return process for an approved loan, which may, depending on the Group&#39;s settings, necessitate specific internal approvals.
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param returnRequest The return request payload (required)
     * @return ApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResponse offerReturnRequest(String id, ReturnRequest returnRequest) throws ApiException {
        ApiResponse<ApplicationResponse> localVarResp = offerReturnRequestWithHttpInfo(id, returnRequest);
        return localVarResp.getData();
    }

    /**
     * Initiates the return of an approved loan
     * Will commence the loan return process for an approved loan, which may, depending on the Group&#39;s settings, necessitate specific internal approvals.
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param returnRequest The return request payload (required)
     * @return ApiResponse&lt;ApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResponse> offerReturnRequestWithHttpInfo(String id, ReturnRequest returnRequest) throws ApiException {
        okhttp3.Call localVarCall = offerReturnRequestValidateBeforeCall(id, returnRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiates the return of an approved loan (asynchronously)
     * Will commence the loan return process for an approved loan, which may, depending on the Group&#39;s settings, necessitate specific internal approvals.
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param returnRequest The return request payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offerReturnRequestAsync(String id, ReturnRequest returnRequest, final ApiCallback<ApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = offerReturnRequestValidateBeforeCall(id, returnRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchApplications
     * @param page If this parameter is specified, standard pagination will be performed, returning the applications corresponding to the indicated page (0 based indexed) for the indicated page size. For example: page&#x3D;2&amp;pageSize&#x3D;10 will return the results (20-29). The results will be sorted by descending creation date. (optional)
     * @param pageSize Maximum number of applications to be returned. If not specified, 20 applications will be returned by default.. (optional, default to 20)
     * @param pageToken If the \&quot;page\&quot; parameter has not been specified, the search will use cursor-based pagination. Each search result will include a nextPageToken field in the \&quot;meta\&quot; section. This nextPageToken must be included as a pageToken in the following request in order to get the next page of applications. The initial search should not include pageToken. The results will always be returned ordered by descending creation date. (optional)
     * @param merchant Applications whose merchant code matches one of the values in this array will be returned. (optional)
     * @param fromDate Applications created after the date will be returned. (optional)
     * @param toDate Applications created prior to the date will be returned. (optional)
     * @param signed If \&quot;signed\&quot; is true it will recover applications with offers whose signature method equals to SIGNED_MANUAL, SIGNED_SMS or SIGNED_BIOMETRIC. If \&quot;signed\&quot; is false will recover applications with offers whose signature method is unset. (optional)
     * @param docsSubmitted Applications whose documents are submitted or not. (optional)
     * @param state The application states to filter with. (optional)
     * @param offerState Applications whose offers states equal to the values. (optional)
     * @param lender Applications whose selected offer lender code equals to the values. (optional)
     * @param registrationNumber Applications whose motor vehicle registration number equals to the value. (optional)
     * @param vin Applications whose motor vehicle vin number equals to the value. (optional)
     * @param offerDocsSubmitted If true, will return applications with offers whose state equals to PREAPPROVED or PENDING_REVIEW with uploaded documents unsent. (optional)
     * @param isNotCancelled Applications whose state is not CANCELED. (optional)
     * @param createdByUsername Applications created by the user (username) you want to search for. Results whose username begins with this value will be returned. (optional)
     * @param createdByDocIdNumber Applications created by the user with an identification document number. (optional)
     * @param groupCode Applications belonging to the group code values. (optional)
     * @param readableId Retrieves the application whose readable id number equals to the value. (optional)
     * @param province Applications whose main&#39;s applicant address province equals to the value. (optional)
     * @param surname Applications whose main&#39;s applicant surname contains the value. (optional)
     * @param docIdNumber Applications whose main&#39;s applicant doc id number equals to the value. (optional)
     * @param productType Applications whose financial product type equals to the value. (optional)
     * @param goodsType Applications whose code associated to the good/service sold equals to the value. (optional)
     * @param fromPreapprovalDate Applications whose pre-approval date is after the date will be returned. (optional)
     * @param untilPreapprovalDate Applications whose pre-approval date is prior to the date will be returned. (optional)
     * @param fromApprovalDate Applications whose approval date is after the date will be returned. (optional)
     * @param untilApprovalDate Applications whose approval date is prior to the date will be returned. (optional)
     * @param fromDocsSubmissionDate Applications whose docs submission date is after the date will be returned. (optional)
     * @param untilDocsSubmissionDate Applications whose docs submission date is prior to the date will be returned. (optional)
     * @param fromPayoutDate Applications whose payout date is after the date will be returned. (optional)
     * @param untilPayoutDate Applications whose payout date is prior to the date will be returned. (optional)
     * @param term Applications whose selected offer term equals to the value. (optional)
     * @param feeType Applications whose selected offer product type equals to the value. (optional)
     * @param fromLoanAmount Applications whose selected offer loan amount is greater or equal than the value. (optional)
     * @param untilLoanAmount Applications whose selected offer loan amount is lower or equal than the value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Applications recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchApplicationsCall(Integer page, Integer pageSize, String pageToken, List<String> merchant, OffsetDateTime fromDate, OffsetDateTime toDate, Boolean signed, Boolean docsSubmitted, List<String> state, List<String> offerState, List<String> lender, String registrationNumber, String vin, Boolean offerDocsSubmitted, Boolean isNotCancelled, String createdByUsername, String createdByDocIdNumber, List<String> groupCode, String readableId, String province, String surname, String docIdNumber, String productType, String goodsType, OffsetDateTime fromPreapprovalDate, OffsetDateTime untilPreapprovalDate, OffsetDateTime fromApprovalDate, OffsetDateTime untilApprovalDate, OffsetDateTime fromDocsSubmissionDate, OffsetDateTime untilDocsSubmissionDate, OffsetDateTime fromPayoutDate, OffsetDateTime untilPayoutDate, String term, String feeType, BigDecimal fromLoanAmount, BigDecimal untilLoanAmount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (merchant != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "merchant", merchant));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (signed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signed", signed));
        }

        if (docsSubmitted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("docsSubmitted", docsSubmitted));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "state", state));
        }

        if (offerState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "offerState", offerState));
        }

        if (lender != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "lender", lender));
        }

        if (registrationNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("registrationNumber", registrationNumber));
        }

        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vin", vin));
        }

        if (offerDocsSubmitted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offerDocsSubmitted", offerDocsSubmitted));
        }

        if (isNotCancelled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isNotCancelled", isNotCancelled));
        }

        if (createdByUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdByUsername", createdByUsername));
        }

        if (createdByDocIdNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdByDocIdNumber", createdByDocIdNumber));
        }

        if (groupCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groupCode", groupCode));
        }

        if (readableId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("readableId", readableId));
        }

        if (province != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("province", province));
        }

        if (surname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("surname", surname));
        }

        if (docIdNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("docIdNumber", docIdNumber));
        }

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        if (goodsType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("goodsType", goodsType));
        }

        if (fromPreapprovalDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPreapprovalDate", fromPreapprovalDate));
        }

        if (untilPreapprovalDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("untilPreapprovalDate", untilPreapprovalDate));
        }

        if (fromApprovalDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromApprovalDate", fromApprovalDate));
        }

        if (untilApprovalDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("untilApprovalDate", untilApprovalDate));
        }

        if (fromDocsSubmissionDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDocsSubmissionDate", fromDocsSubmissionDate));
        }

        if (untilDocsSubmissionDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("untilDocsSubmissionDate", untilDocsSubmissionDate));
        }

        if (fromPayoutDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPayoutDate", fromPayoutDate));
        }

        if (untilPayoutDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("untilPayoutDate", untilPayoutDate));
        }

        if (term != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term", term));
        }

        if (feeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feeType", feeType));
        }

        if (fromLoanAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromLoanAmount", fromLoanAmount));
        }

        if (untilLoanAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("untilLoanAmount", untilLoanAmount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchApplicationsValidateBeforeCall(Integer page, Integer pageSize, String pageToken, List<String> merchant, OffsetDateTime fromDate, OffsetDateTime toDate, Boolean signed, Boolean docsSubmitted, List<String> state, List<String> offerState, List<String> lender, String registrationNumber, String vin, Boolean offerDocsSubmitted, Boolean isNotCancelled, String createdByUsername, String createdByDocIdNumber, List<String> groupCode, String readableId, String province, String surname, String docIdNumber, String productType, String goodsType, OffsetDateTime fromPreapprovalDate, OffsetDateTime untilPreapprovalDate, OffsetDateTime fromApprovalDate, OffsetDateTime untilApprovalDate, OffsetDateTime fromDocsSubmissionDate, OffsetDateTime untilDocsSubmissionDate, OffsetDateTime fromPayoutDate, OffsetDateTime untilPayoutDate, String term, String feeType, BigDecimal fromLoanAmount, BigDecimal untilLoanAmount, final ApiCallback _callback) throws ApiException {
        return searchApplicationsCall(page, pageSize, pageToken, merchant, fromDate, toDate, signed, docsSubmitted, state, offerState, lender, registrationNumber, vin, offerDocsSubmitted, isNotCancelled, createdByUsername, createdByDocIdNumber, groupCode, readableId, province, surname, docIdNumber, productType, goodsType, fromPreapprovalDate, untilPreapprovalDate, fromApprovalDate, untilApprovalDate, fromDocsSubmissionDate, untilDocsSubmissionDate, fromPayoutDate, untilPayoutDate, term, feeType, fromLoanAmount, untilLoanAmount, _callback);

    }

    /**
     * Search applications
     * 
     * @param page If this parameter is specified, standard pagination will be performed, returning the applications corresponding to the indicated page (0 based indexed) for the indicated page size. For example: page&#x3D;2&amp;pageSize&#x3D;10 will return the results (20-29). The results will be sorted by descending creation date. (optional)
     * @param pageSize Maximum number of applications to be returned. If not specified, 20 applications will be returned by default.. (optional, default to 20)
     * @param pageToken If the \&quot;page\&quot; parameter has not been specified, the search will use cursor-based pagination. Each search result will include a nextPageToken field in the \&quot;meta\&quot; section. This nextPageToken must be included as a pageToken in the following request in order to get the next page of applications. The initial search should not include pageToken. The results will always be returned ordered by descending creation date. (optional)
     * @param merchant Applications whose merchant code matches one of the values in this array will be returned. (optional)
     * @param fromDate Applications created after the date will be returned. (optional)
     * @param toDate Applications created prior to the date will be returned. (optional)
     * @param signed If \&quot;signed\&quot; is true it will recover applications with offers whose signature method equals to SIGNED_MANUAL, SIGNED_SMS or SIGNED_BIOMETRIC. If \&quot;signed\&quot; is false will recover applications with offers whose signature method is unset. (optional)
     * @param docsSubmitted Applications whose documents are submitted or not. (optional)
     * @param state The application states to filter with. (optional)
     * @param offerState Applications whose offers states equal to the values. (optional)
     * @param lender Applications whose selected offer lender code equals to the values. (optional)
     * @param registrationNumber Applications whose motor vehicle registration number equals to the value. (optional)
     * @param vin Applications whose motor vehicle vin number equals to the value. (optional)
     * @param offerDocsSubmitted If true, will return applications with offers whose state equals to PREAPPROVED or PENDING_REVIEW with uploaded documents unsent. (optional)
     * @param isNotCancelled Applications whose state is not CANCELED. (optional)
     * @param createdByUsername Applications created by the user (username) you want to search for. Results whose username begins with this value will be returned. (optional)
     * @param createdByDocIdNumber Applications created by the user with an identification document number. (optional)
     * @param groupCode Applications belonging to the group code values. (optional)
     * @param readableId Retrieves the application whose readable id number equals to the value. (optional)
     * @param province Applications whose main&#39;s applicant address province equals to the value. (optional)
     * @param surname Applications whose main&#39;s applicant surname contains the value. (optional)
     * @param docIdNumber Applications whose main&#39;s applicant doc id number equals to the value. (optional)
     * @param productType Applications whose financial product type equals to the value. (optional)
     * @param goodsType Applications whose code associated to the good/service sold equals to the value. (optional)
     * @param fromPreapprovalDate Applications whose pre-approval date is after the date will be returned. (optional)
     * @param untilPreapprovalDate Applications whose pre-approval date is prior to the date will be returned. (optional)
     * @param fromApprovalDate Applications whose approval date is after the date will be returned. (optional)
     * @param untilApprovalDate Applications whose approval date is prior to the date will be returned. (optional)
     * @param fromDocsSubmissionDate Applications whose docs submission date is after the date will be returned. (optional)
     * @param untilDocsSubmissionDate Applications whose docs submission date is prior to the date will be returned. (optional)
     * @param fromPayoutDate Applications whose payout date is after the date will be returned. (optional)
     * @param untilPayoutDate Applications whose payout date is prior to the date will be returned. (optional)
     * @param term Applications whose selected offer term equals to the value. (optional)
     * @param feeType Applications whose selected offer product type equals to the value. (optional)
     * @param fromLoanAmount Applications whose selected offer loan amount is greater or equal than the value. (optional)
     * @param untilLoanAmount Applications whose selected offer loan amount is lower or equal than the value. (optional)
     * @return ApplicationApiSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Applications recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationApiSearchResponse searchApplications(Integer page, Integer pageSize, String pageToken, List<String> merchant, OffsetDateTime fromDate, OffsetDateTime toDate, Boolean signed, Boolean docsSubmitted, List<String> state, List<String> offerState, List<String> lender, String registrationNumber, String vin, Boolean offerDocsSubmitted, Boolean isNotCancelled, String createdByUsername, String createdByDocIdNumber, List<String> groupCode, String readableId, String province, String surname, String docIdNumber, String productType, String goodsType, OffsetDateTime fromPreapprovalDate, OffsetDateTime untilPreapprovalDate, OffsetDateTime fromApprovalDate, OffsetDateTime untilApprovalDate, OffsetDateTime fromDocsSubmissionDate, OffsetDateTime untilDocsSubmissionDate, OffsetDateTime fromPayoutDate, OffsetDateTime untilPayoutDate, String term, String feeType, BigDecimal fromLoanAmount, BigDecimal untilLoanAmount) throws ApiException {
        ApiResponse<ApplicationApiSearchResponse> localVarResp = searchApplicationsWithHttpInfo(page, pageSize, pageToken, merchant, fromDate, toDate, signed, docsSubmitted, state, offerState, lender, registrationNumber, vin, offerDocsSubmitted, isNotCancelled, createdByUsername, createdByDocIdNumber, groupCode, readableId, province, surname, docIdNumber, productType, goodsType, fromPreapprovalDate, untilPreapprovalDate, fromApprovalDate, untilApprovalDate, fromDocsSubmissionDate, untilDocsSubmissionDate, fromPayoutDate, untilPayoutDate, term, feeType, fromLoanAmount, untilLoanAmount);
        return localVarResp.getData();
    }

    /**
     * Search applications
     * 
     * @param page If this parameter is specified, standard pagination will be performed, returning the applications corresponding to the indicated page (0 based indexed) for the indicated page size. For example: page&#x3D;2&amp;pageSize&#x3D;10 will return the results (20-29). The results will be sorted by descending creation date. (optional)
     * @param pageSize Maximum number of applications to be returned. If not specified, 20 applications will be returned by default.. (optional, default to 20)
     * @param pageToken If the \&quot;page\&quot; parameter has not been specified, the search will use cursor-based pagination. Each search result will include a nextPageToken field in the \&quot;meta\&quot; section. This nextPageToken must be included as a pageToken in the following request in order to get the next page of applications. The initial search should not include pageToken. The results will always be returned ordered by descending creation date. (optional)
     * @param merchant Applications whose merchant code matches one of the values in this array will be returned. (optional)
     * @param fromDate Applications created after the date will be returned. (optional)
     * @param toDate Applications created prior to the date will be returned. (optional)
     * @param signed If \&quot;signed\&quot; is true it will recover applications with offers whose signature method equals to SIGNED_MANUAL, SIGNED_SMS or SIGNED_BIOMETRIC. If \&quot;signed\&quot; is false will recover applications with offers whose signature method is unset. (optional)
     * @param docsSubmitted Applications whose documents are submitted or not. (optional)
     * @param state The application states to filter with. (optional)
     * @param offerState Applications whose offers states equal to the values. (optional)
     * @param lender Applications whose selected offer lender code equals to the values. (optional)
     * @param registrationNumber Applications whose motor vehicle registration number equals to the value. (optional)
     * @param vin Applications whose motor vehicle vin number equals to the value. (optional)
     * @param offerDocsSubmitted If true, will return applications with offers whose state equals to PREAPPROVED or PENDING_REVIEW with uploaded documents unsent. (optional)
     * @param isNotCancelled Applications whose state is not CANCELED. (optional)
     * @param createdByUsername Applications created by the user (username) you want to search for. Results whose username begins with this value will be returned. (optional)
     * @param createdByDocIdNumber Applications created by the user with an identification document number. (optional)
     * @param groupCode Applications belonging to the group code values. (optional)
     * @param readableId Retrieves the application whose readable id number equals to the value. (optional)
     * @param province Applications whose main&#39;s applicant address province equals to the value. (optional)
     * @param surname Applications whose main&#39;s applicant surname contains the value. (optional)
     * @param docIdNumber Applications whose main&#39;s applicant doc id number equals to the value. (optional)
     * @param productType Applications whose financial product type equals to the value. (optional)
     * @param goodsType Applications whose code associated to the good/service sold equals to the value. (optional)
     * @param fromPreapprovalDate Applications whose pre-approval date is after the date will be returned. (optional)
     * @param untilPreapprovalDate Applications whose pre-approval date is prior to the date will be returned. (optional)
     * @param fromApprovalDate Applications whose approval date is after the date will be returned. (optional)
     * @param untilApprovalDate Applications whose approval date is prior to the date will be returned. (optional)
     * @param fromDocsSubmissionDate Applications whose docs submission date is after the date will be returned. (optional)
     * @param untilDocsSubmissionDate Applications whose docs submission date is prior to the date will be returned. (optional)
     * @param fromPayoutDate Applications whose payout date is after the date will be returned. (optional)
     * @param untilPayoutDate Applications whose payout date is prior to the date will be returned. (optional)
     * @param term Applications whose selected offer term equals to the value. (optional)
     * @param feeType Applications whose selected offer product type equals to the value. (optional)
     * @param fromLoanAmount Applications whose selected offer loan amount is greater or equal than the value. (optional)
     * @param untilLoanAmount Applications whose selected offer loan amount is lower or equal than the value. (optional)
     * @return ApiResponse&lt;ApplicationApiSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Applications recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationApiSearchResponse> searchApplicationsWithHttpInfo(Integer page, Integer pageSize, String pageToken, List<String> merchant, OffsetDateTime fromDate, OffsetDateTime toDate, Boolean signed, Boolean docsSubmitted, List<String> state, List<String> offerState, List<String> lender, String registrationNumber, String vin, Boolean offerDocsSubmitted, Boolean isNotCancelled, String createdByUsername, String createdByDocIdNumber, List<String> groupCode, String readableId, String province, String surname, String docIdNumber, String productType, String goodsType, OffsetDateTime fromPreapprovalDate, OffsetDateTime untilPreapprovalDate, OffsetDateTime fromApprovalDate, OffsetDateTime untilApprovalDate, OffsetDateTime fromDocsSubmissionDate, OffsetDateTime untilDocsSubmissionDate, OffsetDateTime fromPayoutDate, OffsetDateTime untilPayoutDate, String term, String feeType, BigDecimal fromLoanAmount, BigDecimal untilLoanAmount) throws ApiException {
        okhttp3.Call localVarCall = searchApplicationsValidateBeforeCall(page, pageSize, pageToken, merchant, fromDate, toDate, signed, docsSubmitted, state, offerState, lender, registrationNumber, vin, offerDocsSubmitted, isNotCancelled, createdByUsername, createdByDocIdNumber, groupCode, readableId, province, surname, docIdNumber, productType, goodsType, fromPreapprovalDate, untilPreapprovalDate, fromApprovalDate, untilApprovalDate, fromDocsSubmissionDate, untilDocsSubmissionDate, fromPayoutDate, untilPayoutDate, term, feeType, fromLoanAmount, untilLoanAmount, null);
        Type localVarReturnType = new TypeToken<ApplicationApiSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search applications (asynchronously)
     * 
     * @param page If this parameter is specified, standard pagination will be performed, returning the applications corresponding to the indicated page (0 based indexed) for the indicated page size. For example: page&#x3D;2&amp;pageSize&#x3D;10 will return the results (20-29). The results will be sorted by descending creation date. (optional)
     * @param pageSize Maximum number of applications to be returned. If not specified, 20 applications will be returned by default.. (optional, default to 20)
     * @param pageToken If the \&quot;page\&quot; parameter has not been specified, the search will use cursor-based pagination. Each search result will include a nextPageToken field in the \&quot;meta\&quot; section. This nextPageToken must be included as a pageToken in the following request in order to get the next page of applications. The initial search should not include pageToken. The results will always be returned ordered by descending creation date. (optional)
     * @param merchant Applications whose merchant code matches one of the values in this array will be returned. (optional)
     * @param fromDate Applications created after the date will be returned. (optional)
     * @param toDate Applications created prior to the date will be returned. (optional)
     * @param signed If \&quot;signed\&quot; is true it will recover applications with offers whose signature method equals to SIGNED_MANUAL, SIGNED_SMS or SIGNED_BIOMETRIC. If \&quot;signed\&quot; is false will recover applications with offers whose signature method is unset. (optional)
     * @param docsSubmitted Applications whose documents are submitted or not. (optional)
     * @param state The application states to filter with. (optional)
     * @param offerState Applications whose offers states equal to the values. (optional)
     * @param lender Applications whose selected offer lender code equals to the values. (optional)
     * @param registrationNumber Applications whose motor vehicle registration number equals to the value. (optional)
     * @param vin Applications whose motor vehicle vin number equals to the value. (optional)
     * @param offerDocsSubmitted If true, will return applications with offers whose state equals to PREAPPROVED or PENDING_REVIEW with uploaded documents unsent. (optional)
     * @param isNotCancelled Applications whose state is not CANCELED. (optional)
     * @param createdByUsername Applications created by the user (username) you want to search for. Results whose username begins with this value will be returned. (optional)
     * @param createdByDocIdNumber Applications created by the user with an identification document number. (optional)
     * @param groupCode Applications belonging to the group code values. (optional)
     * @param readableId Retrieves the application whose readable id number equals to the value. (optional)
     * @param province Applications whose main&#39;s applicant address province equals to the value. (optional)
     * @param surname Applications whose main&#39;s applicant surname contains the value. (optional)
     * @param docIdNumber Applications whose main&#39;s applicant doc id number equals to the value. (optional)
     * @param productType Applications whose financial product type equals to the value. (optional)
     * @param goodsType Applications whose code associated to the good/service sold equals to the value. (optional)
     * @param fromPreapprovalDate Applications whose pre-approval date is after the date will be returned. (optional)
     * @param untilPreapprovalDate Applications whose pre-approval date is prior to the date will be returned. (optional)
     * @param fromApprovalDate Applications whose approval date is after the date will be returned. (optional)
     * @param untilApprovalDate Applications whose approval date is prior to the date will be returned. (optional)
     * @param fromDocsSubmissionDate Applications whose docs submission date is after the date will be returned. (optional)
     * @param untilDocsSubmissionDate Applications whose docs submission date is prior to the date will be returned. (optional)
     * @param fromPayoutDate Applications whose payout date is after the date will be returned. (optional)
     * @param untilPayoutDate Applications whose payout date is prior to the date will be returned. (optional)
     * @param term Applications whose selected offer term equals to the value. (optional)
     * @param feeType Applications whose selected offer product type equals to the value. (optional)
     * @param fromLoanAmount Applications whose selected offer loan amount is greater or equal than the value. (optional)
     * @param untilLoanAmount Applications whose selected offer loan amount is lower or equal than the value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Applications recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchApplicationsAsync(Integer page, Integer pageSize, String pageToken, List<String> merchant, OffsetDateTime fromDate, OffsetDateTime toDate, Boolean signed, Boolean docsSubmitted, List<String> state, List<String> offerState, List<String> lender, String registrationNumber, String vin, Boolean offerDocsSubmitted, Boolean isNotCancelled, String createdByUsername, String createdByDocIdNumber, List<String> groupCode, String readableId, String province, String surname, String docIdNumber, String productType, String goodsType, OffsetDateTime fromPreapprovalDate, OffsetDateTime untilPreapprovalDate, OffsetDateTime fromApprovalDate, OffsetDateTime untilApprovalDate, OffsetDateTime fromDocsSubmissionDate, OffsetDateTime untilDocsSubmissionDate, OffsetDateTime fromPayoutDate, OffsetDateTime untilPayoutDate, String term, String feeType, BigDecimal fromLoanAmount, BigDecimal untilLoanAmount, final ApiCallback<ApplicationApiSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchApplicationsValidateBeforeCall(page, pageSize, pageToken, merchant, fromDate, toDate, signed, docsSubmitted, state, offerState, lender, registrationNumber, vin, offerDocsSubmitted, isNotCancelled, createdByUsername, createdByDocIdNumber, groupCode, readableId, province, surname, docIdNumber, productType, goodsType, fromPreapprovalDate, untilPreapprovalDate, fromApprovalDate, untilApprovalDate, fromDocsSubmissionDate, untilDocsSubmissionDate, fromPayoutDate, untilPayoutDate, term, feeType, fromLoanAmount, untilLoanAmount, _callback);
        Type localVarReturnType = new TypeToken<ApplicationApiSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApplication
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param application The payload of the application that is about to be updated (required)
     * @param validate  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApplicationCall(String id, Application application, Boolean validate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = application;

        // create path and map variables
        String localVarPath = "/v2/applications/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApplicationValidateBeforeCall(String id, Application application, Boolean validate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateApplication(Async)");
        }

        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling updateApplication(Async)");
        }

        return updateApplicationCall(id, application, validate, _callback);

    }

    /**
     * Updates an application
     * 
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param application The payload of the application that is about to be updated (required)
     * @param validate  (optional, default to true)
     * @return ApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResponse updateApplication(String id, Application application, Boolean validate) throws ApiException {
        ApiResponse<ApplicationResponse> localVarResp = updateApplicationWithHttpInfo(id, application, validate);
        return localVarResp.getData();
    }

    /**
     * Updates an application
     * 
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param application The payload of the application that is about to be updated (required)
     * @param validate  (optional, default to true)
     * @return ApiResponse&lt;ApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResponse> updateApplicationWithHttpInfo(String id, Application application, Boolean validate) throws ApiException {
        okhttp3.Call localVarCall = updateApplicationValidateBeforeCall(id, application, validate, null);
        Type localVarReturnType = new TypeToken<ApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an application (asynchronously)
     * 
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param application The payload of the application that is about to be updated (required)
     * @param validate  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The application has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApplicationAsync(String id, Application application, Boolean validate, final ApiCallback<ApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApplicationValidateBeforeCall(id, application, validate, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadApplicationDocument
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param uploadApplicationDocumentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Document successfully sent </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadApplicationDocumentCall(String id, UploadApplicationDocumentRequest uploadApplicationDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadApplicationDocumentRequest;

        // create path and map variables
        String localVarPath = "/v2/applications/{id}/document"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadApplicationDocumentValidateBeforeCall(String id, UploadApplicationDocumentRequest uploadApplicationDocumentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadApplicationDocument(Async)");
        }

        return uploadApplicationDocumentCall(id, uploadApplicationDocumentRequest, _callback);

    }

    /**
     * Creates an application document.
     * 
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param uploadApplicationDocumentRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Document successfully sent </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public void uploadApplicationDocument(String id, UploadApplicationDocumentRequest uploadApplicationDocumentRequest) throws ApiException {
        uploadApplicationDocumentWithHttpInfo(id, uploadApplicationDocumentRequest);
    }

    /**
     * Creates an application document.
     * 
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param uploadApplicationDocumentRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Document successfully sent </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadApplicationDocumentWithHttpInfo(String id, UploadApplicationDocumentRequest uploadApplicationDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadApplicationDocumentValidateBeforeCall(id, uploadApplicationDocumentRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates an application document. (asynchronously)
     * 
     * @param id The id of the application, it can be a uuid or a numeric value. If the passed value is neither an uuid nor a numeric (integer) value an error will be thrown. (required)
     * @param uploadApplicationDocumentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Document successfully sent </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadApplicationDocumentAsync(String id, UploadApplicationDocumentRequest uploadApplicationDocumentRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadApplicationDocumentValidateBeforeCall(id, uploadApplicationDocumentRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
