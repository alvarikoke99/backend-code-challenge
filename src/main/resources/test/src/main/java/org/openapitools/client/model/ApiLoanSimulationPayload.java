/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a loan simulation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class ApiLoanSimulationPayload {
  public static final String SERIALIZED_NAME_MERCHANT_CODE = "merchantCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CODE)
  private String merchantCode;

  public static final String SERIALIZED_NAME_GOODS_TYPE_CODE = "goodsTypeCode";
  @SerializedName(SERIALIZED_NAME_GOODS_TYPE_CODE)
  private String goodsTypeCode;

  public static final String SERIALIZED_NAME_PURCHASE_AMOUNT = "purchaseAmount";
  @SerializedName(SERIALIZED_NAME_PURCHASE_AMOUNT)
  private String purchaseAmount;

  public static final String SERIALIZED_NAME_REQUESTED_AMOUNT = "requestedAmount";
  @SerializedName(SERIALIZED_NAME_REQUESTED_AMOUNT)
  private String requestedAmount;

  /**
   * It indicates whether the applicant is an individual or a company
   */
  @JsonAdapter(ApplicantTypeEnum.Adapter.class)
  public enum ApplicantTypeEnum {
    PERSONAL("PERSONAL"),
    
    BUSINESS("BUSINESS"),
    
    CONDO_ASSOCIATION("CONDO_ASSOCIATION");

    private String value;

    ApplicantTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicantTypeEnum fromValue(String value) {
      for (ApplicantTypeEnum b : ApplicantTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicantTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicantTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicantTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicantTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApplicantTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPLICANT_TYPE = "applicantType";
  @SerializedName(SERIALIZED_NAME_APPLICANT_TYPE)
  private ApplicantTypeEnum applicantType;

  public static final String SERIALIZED_NAME_MAX_MONTHLY_PAYMENT = "maxMonthlyPayment";
  @SerializedName(SERIALIZED_NAME_MAX_MONTHLY_PAYMENT)
  private String maxMonthlyPayment;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_PAYMENT = "subscriptionPayment";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_PAYMENT)
  private BigDecimal subscriptionPayment;

  public static final String SERIALIZED_NAME_MAX_NOMINAL_ANNUAL_RATE = "maxNominalAnnualRate";
  @SerializedName(SERIALIZED_NAME_MAX_NOMINAL_ANNUAL_RATE)
  private String maxNominalAnnualRate;

  /**
   * The desired financial product type (e.g. interest-free, interest-bearing, etc.)
   */
  @JsonAdapter(ProductTypeEnum.Adapter.class)
  public enum ProductTypeEnum {
    INTEREST_BEARING("INTEREST_BEARING"),
    
    ZERO_INTEREST("ZERO_INTEREST"),
    
    SUBSIDIZED_INTEREST("SUBSIDIZED_INTEREST"),
    
    OPTION_PLUS("OPTION_PLUS"),
    
    MULTIOPTION("MULTIOPTION"),
    
    LEASING("LEASING"),
    
    REFINANCING("REFINANCING"),
    
    BULLET("BULLET"),
    
    LOAN("LOAN"),
    
    SUBSCRIPTION("SUBSCRIPTION"),
    
    VARIABLE_RATE("VARIABLE_RATE"),
    
    RENTING("RENTING"),
    
    PROMOTION("PROMOTION"),
    
    STANDARD("STANDARD"),
    
    BNPL("BNPL"),
    
    KIA_FLEXIBLE_RANGE_FINANCE("KIA_FLEXIBLE_RANGE_FINANCE"),
    
    KIA_KREDIT("KIA_KREDIT"),
    
    KIA_PROTECCION_CLIENTE("KIA_PROTECCION_CLIENTE"),
    
    KIA_FLEXIPLAN("KIA_FLEXIPLAN");

    private String value;

    ProductTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductTypeEnum fromValue(String value) {
      for (ProductTypeEnum b : ProductTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private ProductTypeEnum productType;

  /**
   * Frequency of loan repayments (e.g., monthly, quarterly, annually)
   */
  @JsonAdapter(PaymentFrequencyEnum.Adapter.class)
  public enum PaymentFrequencyEnum {
    WEEKLY("WEEKLY"),
    
    BI_WEEKLY("BI_WEEKLY"),
    
    SEMI_MONTHLY("SEMI_MONTHLY"),
    
    MONTHLY("MONTHLY"),
    
    BI_MONTHLY("BI_MONTHLY"),
    
    QUARTERLY("QUARTERLY"),
    
    SEMI_ANNUALLY("SEMI_ANNUALLY"),
    
    ANNUALLY("ANNUALLY");

    private String value;

    PaymentFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentFrequencyEnum fromValue(String value) {
      for (PaymentFrequencyEnum b : PaymentFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_FREQUENCY = "paymentFrequency";
  @SerializedName(SERIALIZED_NAME_PAYMENT_FREQUENCY)
  private PaymentFrequencyEnum paymentFrequency;

  /**
   * Type of loan payments (end-of-period vs beginning-of-period)
   */
  @JsonAdapter(InstalmentTypeEnum.Adapter.class)
  public enum InstalmentTypeEnum {
    ORDINARY("ORDINARY"),
    
    DUE("DUE");

    private String value;

    InstalmentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstalmentTypeEnum fromValue(String value) {
      for (InstalmentTypeEnum b : InstalmentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstalmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstalmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstalmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstalmentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InstalmentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSTALMENT_TYPE = "instalmentType";
  @SerializedName(SERIALIZED_NAME_INSTALMENT_TYPE)
  private InstalmentTypeEnum instalmentType;

  /**
   * The make/brand of the vehicle
   */
  @JsonAdapter(VehicleMakeEnum.Adapter.class)
  public enum VehicleMakeEnum {
    ABARTH("ABARTH"),
    
    ADIVA("ADIVA"),
    
    ADLY("ADLY"),
    
    AEON("AEON"),
    
    AIWAYS("AIWAYS"),
    
    AIXAM("AIXAM"),
    
    AIYUMO("AIYUMO"),
    
    AJP("AJP"),
    
    ALFA_ROMEO("ALFA_ROMEO"),
    
    ALPINA("ALPINA"),
    
    ALPINE("ALPINE"),
    
    APRILIA("APRILIA"),
    
    ARCTIC_CAT("ARCTIC_CAT"),
    
    ARIIC("ARIIC"),
    
    ARO("ARO"),
    
    ASIA("ASIA"),
    
    ASIA_MOTORS("ASIA_MOTORS"),
    
    ASPID("ASPID"),
    
    ASTON_MARTIN("ASTON_MARTIN"),
    
    ATK("ATK"),
    
    AUDI("AUDI"),
    
    AUSTIN("AUSTIN"),
    
    AUVERLAND("AUVERLAND"),
    
    BAIC("BAIC"),
    
    BENELLI("BENELLI"),
    
    BENTLEY("BENTLEY"),
    
    BERTONE("BERTONE"),
    
    BETA("BETA"),
    
    BIMOTA("BIMOTA"),
    
    BMW("BMW"),
    
    BOMBARDIER("BOMBARDIER"),
    
    BOOM("BOOM"),
    
    BORGWARD("BORGWARD"),
    
    BRIXTON("BRIXTON"),
    
    BUELL("BUELL"),
    
    BUGATTI("BUGATTI"),
    
    BULTACO("BULTACO"),
    
    BYD("BYD"),
    
    CADILLAC("CADILLAC"),
    
    CAGIVA("CAGIVA"),
    
    CAKE("CAKE"),
    
    CAN_AM("CAN_AM"),
    
    CASALINI("CASALINI"),
    
    CATERHAM("CATERHAM"),
    
    CCM("CCM"),
    
    CECTEK("CECTEK"),
    
    CF_MOTO("CF_MOTO"),
    
    CHATENET("CHATENET"),
    
    CHEVROLET("CHEVROLET"),
    
    CHRYSLER("CHRYSLER"),
    
    CITROEN("CITROEN"),
    
    CITYCOCO("CITYCOCO"),
    
    CLIPIC("CLIPIC"),
    
    COOLTRA("COOLTRA"),
    
    CORBIN("CORBIN"),
    
    CORVETTE("CORVETTE"),
    
    CPI_MOTOR("CPI_MOTOR"),
    
    CSR("CSR"),
    
    CUPRA("CUPRA"),
    
    DACIA("DACIA"),
    
    DAELIM("DAELIM"),
    
    DAEWOO("DAEWOO"),
    
    DAF("DAF"),
    
    DAIHATSU("DAIHATSU"),
    
    DAIMLER("DAIMLER"),
    
    DERBI("DERBI"),
    
    DFSK("DFSK"),
    
    DINLI("DINLI"),
    
    DODGE("DODGE"),
    
    DORTON("DORTON"),
    
    DR("DR"),
    
    DS("DS"),
    
    DS4("DS4"),
    
    DUCATI("DUCATI"),
    
    E_MAX("E_MAX"),
    
    EASY_TRIKE("EASY_TRIKE"),
    
    EBROH("EBROH"),
    
    ENERGICA("ENERGICA"),
    
    EVO("EVO"),
    
    FACTORY("FACTORY"),
    
    FANTIC("FANTIC"),
    
    FERRARI("FERRARI"),
    
    FIAT("FIAT"),
    
    FORD("FORD"),
    
    FUN("FUN"),
    
    GALLOPER("GALLOPER"),
    
    GAS_GAS("GAS_GAS"),
    
    GENERIC_MOTOR("GENERIC_MOTOR"),
    
    GIANTCO("GIANTCO"),
    
    GILERA("GILERA"),
    
    GME("GME"),
    
    GOES("GOES"),
    
    GRECAV("GRECAV"),
    
    GTA("GTA"),
    
    GUZZI("GUZZI"),
    
    HANWAY("HANWAY"),
    
    HARLEY_DAVIDSON("HARLEY_DAVIDSON"),
    
    HM("HM"),
    
    HONDA("HONDA"),
    
    HRD("HRD"),
    
    HUATIAN("HUATIAN"),
    
    HUMMER("HUMMER"),
    
    HUONIAO("HUONIAO"),
    
    HUSABERG("HUSABERG"),
    
    HUSQVARNA("HUSQVARNA"),
    
    HYOSUNG("HYOSUNG"),
    
    HYUNDAI("HYUNDAI"),
    
    INDIAN("INDIAN"),
    
    INEOS("INEOS"),
    
    INFINITI("INFINITI"),
    
    INNOCENTI("INNOCENTI"),
    
    INVICTA("INVICTA"),
    
    I_MOTO("I_MOTO"),
    
    IO("IO"),
    
    ISETTA("ISETTA"),
    
    ISUZU("ISUZU"),
    
    ITALJET("ITALJET"),
    
    IVECO("IVECO"),
    
    JAGUAR("JAGUAR"),
    
    JCADI("JCADI"),
    
    JDM("JDM"),
    
    JEEP("JEEP"),
    
    JIAYUAN("JIAYUAN"),
    
    JINCHENG("JINCHENG"),
    
    JONWAY("JONWAY"),
    
    KAIYUN("KAIYUN"),
    
    KAWASAKI("KAWASAKI"),
    
    KEEWAY("KEEWAY"),
    
    KENROD("KENROD"),
    
    KIA("KIA"),
    
    KINROAD("KINROAD"),
    
    KSR("KSR"),
    
    KUBOTA("KUBOTA"),
    
    KTM("KTM"),
    
    KYMCO("KYMCO"),
    
    LADA("LADA"),
    
    LAMBORGHINI("LAMBORGHINI"),
    
    LAMBRETTA("LAMBRETTA"),
    
    LANCIA("LANCIA"),
    
    LAND_ROVER("LAND_ROVER"),
    
    LDV("LDV"),
    
    LEONART("LEONART"),
    
    LEVC("LEVC"),
    
    LEXMOTO("LEXMOTO"),
    
    LEXUS("LEXUS"),
    
    LIFAN("LIFAN"),
    
    LIGIER("LIGIER"),
    
    LIMA("LIMA"),
    
    LINHAI("LINHAI"),
    
    LINK_AND_CO("LINK_AND_CO"),
    
    LML("LML"),
    
    LOTUS("LOTUS"),
    
    MACBOR("MACBOR"),
    
    MAHINDRA("MAHINDRA"),
    
    MALAGUTI("MALAGUTI"),
    
    MAN("MAN"),
    
    MASERATI("MASERATI"),
    
    MASH("MASH"),
    
    MAXUS("MAXUS"),
    
    MAYBACH("MAYBACH"),
    
    MAZDA("MAZDA"),
    
    MBK("MBK"),
    
    MCLAREN("MCLAREN"),
    
    MERCEDES_BENZ("MERCEDES_BENZ"),
    
    MG("MG"),
    
    MICRO_CARD_DUE("MICRO_CARD_DUE"),
    
    MICROCARS("MICROCARS"),
    
    MICROLINO("MICROLINO"),
    
    MINI("MINI"),
    
    MITSUBISHI("MITSUBISHI"),
    
    MITT("MITT"),
    
    MH_MOTORCYCLES("MH_MOTORCYCLES"),
    
    MONDIAL("MONDIAL"),
    
    MONKEY_BIKES("MONKEY_BIKES"),
    
    MONTESA("MONTESA"),
    
    MORGAN("MORGAN"),
    
    MOTIVAS("MOTIVAS"),
    
    MOTO_MORINI("MOTO_MORINI"),
    
    MOTOR_HISPANIA("MOTOR_HISPANIA"),
    
    MOTRON("MOTRON"),
    
    MPM_MOTORS("MPM_MOTORS"),
    
    MTR("MTR"),
    
    MV_AGUSTA("MV_AGUSTA"),
    
    MX_MOTOR("MX_MOTOR"),
    
    MZ_MUZ("MZ_MUZ"),
    
    NEXT("NEXT"),
    
    NEXTEM("NEXTEM"),
    
    NISSAN("NISSAN"),
    
    NIU("NIU"),
    
    NORTON("NORTON"),
    
    ODES("ODES"),
    
    OMODA("OMODA"),
    
    OPEL("OPEL"),
    
    ORCAL("ORCAL"),
    
    OSSA("OSSA"),
    
    PAGANI("PAGANI"),
    
    PEUGEOT("PEUGEOT"),
    
    PGO("PGO"),
    
    PIAGGIO("PIAGGIO"),
    
    POLARIS("POLARIS"),
    
    POLESTAR("POLESTAR"),
    
    PONTIAC("PONTIAC"),
    
    PORSCHE("PORSCHE"),
    
    PUCH("PUCH"),
    
    QUADRO("QUADRO"),
    
    QUAZZAR("QUAZZAR"),
    
    RAM("RAM"),
    
    RAY_ELECTRIC_MOTORS("RAY_ELECTRIC_MOTORS"),
    
    RENAULT("RENAULT"),
    
    RENAULT_TRUCKS("RENAULT_TRUCKS"),
    
    REWACO("REWACO"),
    
    RGNT("RGNT"),
    
    RIDE("RIDE"),
    
    RIEJU("RIEJU"),
    
    RIYA("RIYA"),
    
    ROLLS_ROYCE("ROLLS_ROYCE"),
    
    ROVER("ROVER"),
    
    ROYAL_ALLOY("ROYAL_ALLOY"),
    
    ROYAL_ENFIELD("ROYAL_ENFIELD"),
    
    SAAB("SAAB"),
    
    SACHS("SACHS"),
    
    SANTANA("SANTANA"),
    
    SCANIA("SCANIA"),
    
    SCARABEO("SCARABEO"),
    
    SCOMADI("SCOMADI"),
    
    SCORPA("SCORPA"),
    
    SCRAMBLER_DUCATI("SCRAMBLER_DUCATI"),
    
    SEAT("SEAT"),
    
    SEGWAY("SEGWAY"),
    
    SHERCO("SHERCO"),
    
    SILENCE("SILENCE"),
    
    SMC_SM("SMC_SM"),
    
    SKODA("SKODA"),
    
    SMART("SMART"),
    
    SOKON("SOKON"),
    
    SSANGYONG("SSANGYONG"),
    
    STREETWISE("STREETWISE"),
    
    SUBARU("SUBARU"),
    
    SUMCO("SUMCO"),
    
    SUNRA("SUNRA"),
    
    SUPER_SOCO("SUPER_SOCO"),
    
    SUZUKI("SUZUKI"),
    
    SWM("SWM"),
    
    SYM("SYM"),
    
    TALBOT("TALBOT"),
    
    TATA("TATA"),
    
    TESLA("TESLA"),
    
    TGB("TGB"),
    
    THINK("THINK"),
    
    TINBOT("TINBOT"),
    
    TM("TM"),
    
    TORROT("TORROT"),
    
    TOYOTA("TOYOTA"),
    
    TRIUMPH("TRIUMPH"),
    
    TRS("TRS"),
    
    UM("UM"),
    
    URAL("URAL"),
    
    VECTRIX("VECTRIX"),
    
    VERTEMATI("VERTEMATI"),
    
    VESPA("VESPA"),
    
    VICTORY("VICTORY"),
    
    V_MOTO("V_MOTO"),
    
    VOGE("VOGE"),
    
    VOLKSWAGEN("VOLKSWAGEN"),
    
    VOLTA("VOLTA"),
    
    VOLVO("VOLVO"),
    
    VOXAN("VOXAN"),
    
    WARTBURG("WARTBURG"),
    
    WILDLANDER("WILDLANDER"),
    
    WOTTAN("WOTTAN"),
    
    XEV("XEV"),
    
    YAMAHA("YAMAHA"),
    
    ZERO("ZERO"),
    
    ZIDHOU("ZIDHOU"),
    
    ZITMUV("ZITMUV"),
    
    ZONTES("ZONTES"),
    
    ZOTYE("ZOTYE"),
    
    OTHER_MAKE("OTHER_MAKE");

    private String value;

    VehicleMakeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VehicleMakeEnum fromValue(String value) {
      for (VehicleMakeEnum b : VehicleMakeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VehicleMakeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VehicleMakeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VehicleMakeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VehicleMakeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VehicleMakeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VEHICLE_MAKE = "vehicleMake";
  @SerializedName(SERIALIZED_NAME_VEHICLE_MAKE)
  private VehicleMakeEnum vehicleMake;

  public static final String SERIALIZED_NAME_VEHICLE_MODEL_CODE = "vehicleModelCode";
  @SerializedName(SERIALIZED_NAME_VEHICLE_MODEL_CODE)
  private String vehicleModelCode;

  public static final String SERIALIZED_NAME_VEHICLE_VERSION_CODE = "vehicleVersionCode";
  @SerializedName(SERIALIZED_NAME_VEHICLE_VERSION_CODE)
  private String vehicleVersionCode;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_FIRST_REGISTRATION_DATE = "firstRegistrationDate";
  @SerializedName(SERIALIZED_NAME_FIRST_REGISTRATION_DATE)
  private LocalDate firstRegistrationDate;

  public static final String SERIALIZED_NAME_MILEAGE = "mileage";
  @SerializedName(SERIALIZED_NAME_MILEAGE)
  private Integer mileage;

  /**
   * The duration of the service/s sold (it doesn&#39;t apply to the sale of goods).
   */
  @JsonAdapter(ServiceDurationEnum.Adapter.class)
  public enum ServiceDurationEnum {
    ZERO_TO_THREE_MONTHS("ZERO_TO_THREE_MONTHS"),
    
    THREE_TO_SIX_MONTHS("THREE_TO_SIX_MONTHS"),
    
    SIX_TO_NINE_MONTHS("SIX_TO_NINE_MONTHS"),
    
    NINE_TO_TWELVE_MONTHS("NINE_TO_TWELVE_MONTHS"),
    
    TWELVE_TO_EIGHTEEN_MONTHS("TWELVE_TO_EIGHTEEN_MONTHS"),
    
    EIGHTEEN_TO_TWENTY_FOUR_MONTHS("EIGHTEEN_TO_TWENTY_FOUR_MONTHS"),
    
    TWENTY_FOUR_TO_THIRTY_MONTHS("TWENTY_FOUR_TO_THIRTY_MONTHS"),
    
    MORE_THAN_THIRTY_MONTHS("MORE_THAN_THIRTY_MONTHS");

    private String value;

    ServiceDurationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceDurationEnum fromValue(String value) {
      for (ServiceDurationEnum b : ServiceDurationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceDurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceDurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceDurationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceDurationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceDurationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_DURATION = "serviceDuration";
  @SerializedName(SERIALIZED_NAME_SERVICE_DURATION)
  private ServiceDurationEnum serviceDuration;

  /**
   * If included, only products associated to this lender will be considered
   */
  @JsonAdapter(LenderEnum.Adapter.class)
  public enum LenderEnum {
    AUTOFIN("AUTOFIN"),
    
    ABANCA("ABANCA"),
    
    AKF("AKF"),
    
    ALMA("ALMA"),
    
    APLAZAME("APLAZAME"),
    
    AIS("AIS"),
    
    APK_RENTING("APK_RENTING"),
    
    BANCO_SANTANDER("BANCO_SANTANDER"),
    
    BANKINTER("BANKINTER"),
    
    BBVA("BBVA"),
    
    CAIXABANK("CAIXABANK"),
    
    CAJAMAR("CAJAMAR"),
    
    CAJA_RURAL("CAJA_RURAL"),
    
    CARREFOUR_PASS("CARREFOUR_PASS"),
    
    CETELEM("CETELEM"),
    
    COFIDIS("COFIDIS"),
    
    CONFIA("CONFIA"),
    
    CREDIBOX("CREDIBOX"),
    
    EQUIFAX("EQUIFAX"),
    
    EVO_FINANCE("EVO_FINANCE"),
    
    FCA("FCA"),
    
    FINDIRECT("FINDIRECT"),
    
    FLOA("FLOA"),
    
    FRAKMENTA("FRAKMENTA"),
    
    GREEN_HOME_FINANCE("GREEN_HOME_FINANCE"),
    
    HONDA("HONDA"),
    
    HYUNDAI("HYUNDAI"),
    
    INSTANT_CREDIT("INSTANT_CREDIT"),
    
    KIA("KIA"),
    
    KUTXABANK("KUTXABANK"),
    
    LEA_BANK("LEA_BANK"),
    
    MICROCREDIT("MICROCREDIT"),
    
    ONEY("ONEY"),
    
    PAYIN7("PAYIN7"),
    
    PEPPER("PEPPER"),
    
    PONTIO("PONTIO"),
    
    RCI_BANQUE("RCI_BANQUE"),
    
    SABADELL("SABADELL"),
    
    SANTANDER("SANTANDER"),
    
    SEQURA("SEQURA"),
    
    SOYOU("SOYOU"),
    
    STELLANTIS("STELLANTIS"),
    
    SUZUKI("SUZUKI"),
    
    UFA("UFA"),
    
    VOLVO("VOLVO"),
    
    VWFS("VWFS"),
    
    YOUNITED("YOUNITED"),
    
    YOUNITED_CREDIT("YOUNITED_CREDIT"),
    
    ZAPLO("ZAPLO"),
    
    LENDIFINANCE("LENDIFINANCE"),
    
    LENDIPLAN("LENDIPLAN"),
    
    LENDIPLAN_SUBSCRIPTIONS("LENDIPLAN_SUBSCRIPTIONS"),
    
    LENDROCK("LENDROCK"),
    
    MERCEDES("MERCEDES"),
    
    ALMA_FR("ALMA_FR"),
    
    FLOA_FR("FLOA_FR"),
    
    LENDIFINANCE_FR("LENDIFINANCE_FR"),
    
    LENDIPLAN_FR("LENDIPLAN_FR"),
    
    LENDIPLAN_SUBSCRIPTIONS_FR("LENDIPLAN_SUBSCRIPTIONS_FR"),
    
    SEQURA_FR("SEQURA_FR"),
    
    YOUNITED_FR("YOUNITED_FR"),
    
    ALMA_DE("ALMA_DE"),
    
    FLOA_DE("FLOA_DE"),
    
    LENDIFINANCE_DE("LENDIFINANCE_DE"),
    
    LENDIPLAN_DE("LENDIPLAN_DE"),
    
    LENDIPLAN_SUBSCRIPTIONS_DE("LENDIPLAN_SUBSCRIPTIONS_DE"),
    
    NELLY_DE("NELLY_DE"),
    
    RATEPAY_DE("RATEPAY_DE"),
    
    UNZER_DE("UNZER_DE"),
    
    SEQURA_DE("SEQURA_DE"),
    
    YOUNITED_DE("YOUNITED_DE"),
    
    ALMA_IT("ALMA_IT"),
    
    FLOA_IT("FLOA_IT"),
    
    LENDIFINANCE_IT("LENDIFINANCE_IT"),
    
    LENDIPLAN_IT("LENDIPLAN_IT"),
    
    LENDIPLAN_SUBSCRIPTIONS_IT("LENDIPLAN_SUBSCRIPTIONS_IT"),
    
    SCALAPAY_IT("SCALAPAY_IT"),
    
    SELLA_IT("SELLA_IT"),
    
    SEQURA_IT("SEQURA_IT"),
    
    YOUNITED_IT("YOUNITED_IT"),
    
    SPRAY_PAY_NL("SPRAY_PAY_NL"),
    
    ABANCA_PT("ABANCA_PT"),
    
    ALMA_PT("ALMA_PT"),
    
    BBVA_PT("BBVA_PT"),
    
    CETELEM_PT("CETELEM_PT"),
    
    COFIDIS_PT("COFIDIS_PT"),
    
    COFIDIS_WEB_PT("COFIDIS_WEB_PT"),
    
    CREDIBOM_PT("CREDIBOM_PT"),
    
    FLOA_PT("FLOA_PT"),
    
    LENDIFINANCE_PT("LENDIFINANCE_PT"),
    
    LENDIPLAN_PT("LENDIPLAN_PT"),
    
    LENDIPLAN_SUBSCRIPTIONS_PT("LENDIPLAN_SUBSCRIPTIONS_PT"),
    
    MONTEPIO_PT("MONTEPIO_PT"),
    
    PRIMUS_PT("PRIMUS_PT"),
    
    SEQURA_PT("SEQURA_PT"),
    
    YOUNITED_PT("YOUNITED_PT"),
    
    LENDIFINANCE_UK("LENDIFINANCE_UK"),
    
    LENDIPLAN_UK("LENDIPLAN_UK"),
    
    LENDIPLAN_SUBSCRIPTIONS_UK("LENDIPLAN_SUBSCRIPTIONS_UK"),
    
    BUYLINE_UK("BUYLINE_UK"),
    
    PAYMENT_ASSIST_UK("PAYMENT_ASSIST_UK"),
    
    LENDIPLAN_US("LENDIPLAN_US"),
    
    BNP_PARIBAS("BNP_PARIBAS"),
    
    CREDE("CREDE"),
    
    DLL("DLL"),
    
    GEDESCO("GEDESCO"),
    
    GRENKE("GRENKE"),
    
    IBERENT("IBERENT"),
    
    ITL("ITL"),
    
    IT_RENTING("IT_RENTING"),
    
    LIQUIDO("LIQUIDO"),
    
    SIEMENS("SIEMENS"),
    
    SOCIETE_GENERALE("SOCIETE_GENERALE");

    private String value;

    LenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LenderEnum fromValue(String value) {
      for (LenderEnum b : LenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LENDER = "lender";
  @SerializedName(SERIALIZED_NAME_LENDER)
  private LenderEnum lender;

  /**
   * The preferred type of fee payment (if not zero)
   */
  @JsonAdapter(FeePaymentTypeEnum.Adapter.class)
  public enum FeePaymentTypeEnum {
    UPFRONT("UPFRONT"),
    
    FINANCED("FINANCED");

    private String value;

    FeePaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeePaymentTypeEnum fromValue(String value) {
      for (FeePaymentTypeEnum b : FeePaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeePaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeePaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeePaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeePaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeePaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEE_PAYMENT_TYPE = "feePaymentType";
  @SerializedName(SERIALIZED_NAME_FEE_PAYMENT_TYPE)
  private FeePaymentTypeEnum feePaymentType;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private Integer term;

  public static final String SERIALIZED_NAME_GRACE_PERIOD = "gracePeriod";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD)
  private Integer gracePeriod;

  public static final String SERIALIZED_NAME_MAX_MERCHANT_COST = "maxMerchantCost";
  @SerializedName(SERIALIZED_NAME_MAX_MERCHANT_COST)
  private String maxMerchantCost;

  public static final String SERIALIZED_NAME_MAX_MERCHANT_COST_PCT = "maxMerchantCostPct";
  @SerializedName(SERIALIZED_NAME_MAX_MERCHANT_COST_PCT)
  private String maxMerchantCostPct;

  public static final String SERIALIZED_NAME_MAX_NIR = "maxNir";
  @SerializedName(SERIALIZED_NAME_MAX_NIR)
  private BigDecimal maxNir;

  public static final String SERIALIZED_NAME_OPENING_FEE_PCT = "openingFeePct";
  @SerializedName(SERIALIZED_NAME_OPENING_FEE_PCT)
  private String openingFeePct;

  public static final String SERIALIZED_NAME_WITH_INSURANCE = "withInsurance";
  @SerializedName(SERIALIZED_NAME_WITH_INSURANCE)
  private Boolean withInsurance;

  public static final String SERIALIZED_NAME_PAYMENT_PERIOD_START_DATE = "paymentPeriodStartDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PERIOD_START_DATE)
  private LocalDate paymentPeriodStartDate;

  public static final String SERIALIZED_NAME_MAIN_APPLICANT_BIRTH_DATE = "mainApplicantBirthDate";
  @SerializedName(SERIALIZED_NAME_MAIN_APPLICANT_BIRTH_DATE)
  private LocalDate mainApplicantBirthDate;

  public static final String SERIALIZED_NAME_DRIVING_LICENCE_ISSUANCE_DATE = "drivingLicenceIssuanceDate";
  @SerializedName(SERIALIZED_NAME_DRIVING_LICENCE_ISSUANCE_DATE)
  private LocalDate drivingLicenceIssuanceDate;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  /**
   * The specific occupation the applicant has
   */
  @JsonAdapter(OccupationEnum.Adapter.class)
  public enum OccupationEnum {
    PERMANENT_CIVIL_SERVANT("PERMANENT_CIVIL_SERVANT"),
    
    TEMPORARY_UNDETERMINED_CIVIL_SERVANT("TEMPORARY_UNDETERMINED_CIVIL_SERVANT"),
    
    TEMPORARY_CIVIL_SERVANT("TEMPORARY_CIVIL_SERVANT"),
    
    PERMANENT_NON_CAREER("PERMANENT_NON_CAREER"),
    
    TEMPORARY_NON_CAREER("TEMPORARY_NON_CAREER"),
    
    TEMPORARY_AGENCY_CIVIL_SERVANT("TEMPORARY_AGENCY_CIVIL_SERVANT"),
    
    PERMANENT("PERMANENT"),
    
    TEMPORARY_UNDETERMINED("TEMPORARY_UNDETERMINED"),
    
    TEMPORARY("TEMPORARY"),
    
    TEMPORARY_AGENCY("TEMPORARY_AGENCY"),
    
    PERMANENT_SEASONAL("PERMANENT_SEASONAL"),
    
    SERVICE_CONTRACT("SERVICE_CONTRACT"),
    
    APPRENTICESHIP("APPRENTICESHIP"),
    
    INTERN("INTERN"),
    
    FREELANCE("FREELANCE"),
    
    LIBERAL_PROFESSIONAL("LIBERAL_PROFESSIONAL"),
    
    COMPANY_OWNER("COMPANY_OWNER"),
    
    RETIREMENT_PENSION("RETIREMENT_PENSION"),
    
    TEMPORARY_DISABILITY_PENSION("TEMPORARY_DISABILITY_PENSION"),
    
    PERMANENT_DISABILITY_PENSION("PERMANENT_DISABILITY_PENSION"),
    
    ORPHANHOOD_PENSION("ORPHANHOOD_PENSION"),
    
    SURVIVOR_PENSION("SURVIVOR_PENSION"),
    
    OTHER_PENSION("OTHER_PENSION"),
    
    HOUSEWIFE("HOUSEWIFE"),
    
    UNEMPLOYED("UNEMPLOYED"),
    
    STUDENT("STUDENT"),
    
    RENTIER("RENTIER"),
    
    OTHER("OTHER");

    private String value;

    OccupationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OccupationEnum fromValue(String value) {
      for (OccupationEnum b : OccupationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OccupationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OccupationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OccupationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OccupationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OccupationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OCCUPATION = "occupation";
  @SerializedName(SERIALIZED_NAME_OCCUPATION)
  private OccupationEnum occupation;

  /**
   * Set of insurance coverages included in the loan
   */
  @JsonAdapter(InsuranceCoveragesEnum.Adapter.class)
  public enum InsuranceCoveragesEnum {
    LIFE("LIFE"),
    
    TEMPORARY_DISABILITY("TEMPORARY_DISABILITY"),
    
    UNEMPLOYMENT("UNEMPLOYMENT"),
    
    TOTAL_LOSS("TOTAL_LOSS"),
    
    LOSS_OF_LICENCE("LOSS_OF_LICENCE"),
    
    REPLACEMENT("REPLACEMENT"),
    
    MECHANICAL_BREAKDOWN("MECHANICAL_BREAKDOWN"),
    
    FULLY_COMPREHENSIVE_WITHOUT_EXCESS("FULLY_COMPREHENSIVE_WITHOUT_EXCESS"),
    
    FULLY_COMPREHENSIVE_WITH_300_EXCESS("FULLY_COMPREHENSIVE_WITH_300_EXCESS"),
    
    EXTENDED_CIVIL_LIABILITY("EXTENDED_CIVIL_LIABILITY"),
    
    SIMI30000("SIMI30000"),
    
    SIMI45000("SIMI45000"),
    
    SIMI30000_2_Y("SIMI30000_2Y"),
    
    SIMI45000_2_Y("SIMI45000_2Y");

    private String value;

    InsuranceCoveragesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InsuranceCoveragesEnum fromValue(String value) {
      for (InsuranceCoveragesEnum b : InsuranceCoveragesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InsuranceCoveragesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InsuranceCoveragesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InsuranceCoveragesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InsuranceCoveragesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InsuranceCoveragesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSURANCE_COVERAGES = "insuranceCoverages";
  @SerializedName(SERIALIZED_NAME_INSURANCE_COVERAGES)
  private Set<InsuranceCoveragesEnum> insuranceCoverages = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LANGUAGE_TAG = "languageTag";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_TAG)
  private String languageTag;

  public ApiLoanSimulationPayload() {
  }

  public ApiLoanSimulationPayload merchantCode(String merchantCode) {
    this.merchantCode = merchantCode;
    return this;
  }

  /**
   * The code of the Merchant, a list of codes was provided to you by Lendismart&#39;s team.
   * @return merchantCode
   */
  @javax.annotation.Nonnull
  public String getMerchantCode() {
    return merchantCode;
  }

  public void setMerchantCode(String merchantCode) {
    this.merchantCode = merchantCode;
  }


  public ApiLoanSimulationPayload goodsTypeCode(String goodsTypeCode) {
    this.goodsTypeCode = goodsTypeCode;
    return this;
  }

  /**
   * Code associated to the good/service sold. The available codes are dependant on the specific merchant and must be provided by Lendismart.
   * @return goodsTypeCode
   */
  @javax.annotation.Nullable
  public String getGoodsTypeCode() {
    return goodsTypeCode;
  }

  public void setGoodsTypeCode(String goodsTypeCode) {
    this.goodsTypeCode = goodsTypeCode;
  }


  public ApiLoanSimulationPayload purchaseAmount(String purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
    return this;
  }

  /**
   * The total amount of the purchase.
   * @return purchaseAmount
   */
  @javax.annotation.Nullable
  public String getPurchaseAmount() {
    return purchaseAmount;
  }

  public void setPurchaseAmount(String purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
  }


  public ApiLoanSimulationPayload requestedAmount(String requestedAmount) {
    this.requestedAmount = requestedAmount;
    return this;
  }

  /**
   * The amount of the loan, the value should be less than 100,000
   * @return requestedAmount
   */
  @javax.annotation.Nullable
  public String getRequestedAmount() {
    return requestedAmount;
  }

  public void setRequestedAmount(String requestedAmount) {
    this.requestedAmount = requestedAmount;
  }


  public ApiLoanSimulationPayload applicantType(ApplicantTypeEnum applicantType) {
    this.applicantType = applicantType;
    return this;
  }

  /**
   * It indicates whether the applicant is an individual or a company
   * @return applicantType
   */
  @javax.annotation.Nullable
  public ApplicantTypeEnum getApplicantType() {
    return applicantType;
  }

  public void setApplicantType(ApplicantTypeEnum applicantType) {
    this.applicantType = applicantType;
  }


  public ApiLoanSimulationPayload maxMonthlyPayment(String maxMonthlyPayment) {
    this.maxMonthlyPayment = maxMonthlyPayment;
    return this;
  }

  /**
   * The maximum monthly instalment the applicant is willing to pay for the loan
   * @return maxMonthlyPayment
   */
  @javax.annotation.Nullable
  public String getMaxMonthlyPayment() {
    return maxMonthlyPayment;
  }

  public void setMaxMonthlyPayment(String maxMonthlyPayment) {
    this.maxMonthlyPayment = maxMonthlyPayment;
  }


  public ApiLoanSimulationPayload subscriptionPayment(BigDecimal subscriptionPayment) {
    this.subscriptionPayment = subscriptionPayment;
    return this;
  }

  /**
   * Get subscriptionPayment
   * @return subscriptionPayment
   */
  @javax.annotation.Nullable
  public BigDecimal getSubscriptionPayment() {
    return subscriptionPayment;
  }

  public void setSubscriptionPayment(BigDecimal subscriptionPayment) {
    this.subscriptionPayment = subscriptionPayment;
  }


  public ApiLoanSimulationPayload maxNominalAnnualRate(String maxNominalAnnualRate) {
    this.maxNominalAnnualRate = maxNominalAnnualRate;
    return this;
  }

  /**
   * The maximum nominal annual rate to apply
   * @return maxNominalAnnualRate
   */
  @javax.annotation.Nullable
  public String getMaxNominalAnnualRate() {
    return maxNominalAnnualRate;
  }

  public void setMaxNominalAnnualRate(String maxNominalAnnualRate) {
    this.maxNominalAnnualRate = maxNominalAnnualRate;
  }


  public ApiLoanSimulationPayload productType(ProductTypeEnum productType) {
    this.productType = productType;
    return this;
  }

  /**
   * The desired financial product type (e.g. interest-free, interest-bearing, etc.)
   * @return productType
   */
  @javax.annotation.Nullable
  public ProductTypeEnum getProductType() {
    return productType;
  }

  public void setProductType(ProductTypeEnum productType) {
    this.productType = productType;
  }


  public ApiLoanSimulationPayload paymentFrequency(PaymentFrequencyEnum paymentFrequency) {
    this.paymentFrequency = paymentFrequency;
    return this;
  }

  /**
   * Frequency of loan repayments (e.g., monthly, quarterly, annually)
   * @return paymentFrequency
   */
  @javax.annotation.Nullable
  public PaymentFrequencyEnum getPaymentFrequency() {
    return paymentFrequency;
  }

  public void setPaymentFrequency(PaymentFrequencyEnum paymentFrequency) {
    this.paymentFrequency = paymentFrequency;
  }


  public ApiLoanSimulationPayload instalmentType(InstalmentTypeEnum instalmentType) {
    this.instalmentType = instalmentType;
    return this;
  }

  /**
   * Type of loan payments (end-of-period vs beginning-of-period)
   * @return instalmentType
   */
  @javax.annotation.Nullable
  public InstalmentTypeEnum getInstalmentType() {
    return instalmentType;
  }

  public void setInstalmentType(InstalmentTypeEnum instalmentType) {
    this.instalmentType = instalmentType;
  }


  public ApiLoanSimulationPayload vehicleMake(VehicleMakeEnum vehicleMake) {
    this.vehicleMake = vehicleMake;
    return this;
  }

  /**
   * The make/brand of the vehicle
   * @return vehicleMake
   */
  @javax.annotation.Nullable
  public VehicleMakeEnum getVehicleMake() {
    return vehicleMake;
  }

  public void setVehicleMake(VehicleMakeEnum vehicleMake) {
    this.vehicleMake = vehicleMake;
  }


  public ApiLoanSimulationPayload vehicleModelCode(String vehicleModelCode) {
    this.vehicleModelCode = vehicleModelCode;
    return this;
  }

  /**
   * The vehicle&#39;s model code
   * @return vehicleModelCode
   */
  @javax.annotation.Nullable
  public String getVehicleModelCode() {
    return vehicleModelCode;
  }

  public void setVehicleModelCode(String vehicleModelCode) {
    this.vehicleModelCode = vehicleModelCode;
  }


  public ApiLoanSimulationPayload vehicleVersionCode(String vehicleVersionCode) {
    this.vehicleVersionCode = vehicleVersionCode;
    return this;
  }

  /**
   * The vehicle&#39;s version code
   * @return vehicleVersionCode
   */
  @javax.annotation.Nullable
  public String getVehicleVersionCode() {
    return vehicleVersionCode;
  }

  public void setVehicleVersionCode(String vehicleVersionCode) {
    this.vehicleVersionCode = vehicleVersionCode;
  }


  public ApiLoanSimulationPayload registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * Get registrationNumber
   * @return registrationNumber
   */
  @javax.annotation.Nullable
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public ApiLoanSimulationPayload firstRegistrationDate(LocalDate firstRegistrationDate) {
    this.firstRegistrationDate = firstRegistrationDate;
    return this;
  }

  /**
   * Date was the vehicle was first registered
   * @return firstRegistrationDate
   */
  @javax.annotation.Nullable
  public LocalDate getFirstRegistrationDate() {
    return firstRegistrationDate;
  }

  public void setFirstRegistrationDate(LocalDate firstRegistrationDate) {
    this.firstRegistrationDate = firstRegistrationDate;
  }


  public ApiLoanSimulationPayload mileage(Integer mileage) {
    this.mileage = mileage;
    return this;
  }

  /**
   * Get mileage
   * @return mileage
   */
  @javax.annotation.Nullable
  public Integer getMileage() {
    return mileage;
  }

  public void setMileage(Integer mileage) {
    this.mileage = mileage;
  }


  public ApiLoanSimulationPayload serviceDuration(ServiceDurationEnum serviceDuration) {
    this.serviceDuration = serviceDuration;
    return this;
  }

  /**
   * The duration of the service/s sold (it doesn&#39;t apply to the sale of goods).
   * @return serviceDuration
   */
  @javax.annotation.Nullable
  public ServiceDurationEnum getServiceDuration() {
    return serviceDuration;
  }

  public void setServiceDuration(ServiceDurationEnum serviceDuration) {
    this.serviceDuration = serviceDuration;
  }


  public ApiLoanSimulationPayload lender(LenderEnum lender) {
    this.lender = lender;
    return this;
  }

  /**
   * If included, only products associated to this lender will be considered
   * @return lender
   */
  @javax.annotation.Nullable
  public LenderEnum getLender() {
    return lender;
  }

  public void setLender(LenderEnum lender) {
    this.lender = lender;
  }


  public ApiLoanSimulationPayload feePaymentType(FeePaymentTypeEnum feePaymentType) {
    this.feePaymentType = feePaymentType;
    return this;
  }

  /**
   * The preferred type of fee payment (if not zero)
   * @return feePaymentType
   */
  @javax.annotation.Nullable
  public FeePaymentTypeEnum getFeePaymentType() {
    return feePaymentType;
  }

  public void setFeePaymentType(FeePaymentTypeEnum feePaymentType) {
    this.feePaymentType = feePaymentType;
  }


  public ApiLoanSimulationPayload term(Integer term) {
    this.term = term;
    return this;
  }

  /**
   * The desired number of terms in which the loan will be payed.
   * @return term
   */
  @javax.annotation.Nullable
  public Integer getTerm() {
    return term;
  }

  public void setTerm(Integer term) {
    this.term = term;
  }


  public ApiLoanSimulationPayload gracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
    return this;
  }

  /**
   * The desired grace period in months - initial period during which the loan doesn&#39;t have to be repaid
   * @return gracePeriod
   */
  @javax.annotation.Nullable
  public Integer getGracePeriod() {
    return gracePeriod;
  }

  public void setGracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
  }


  public ApiLoanSimulationPayload maxMerchantCost(String maxMerchantCost) {
    this.maxMerchantCost = maxMerchantCost;
    return this;
  }

  /**
   * It indicates the maximum cost (in currency units) the merchant is willing to bear to subsidize loan interests
   * @return maxMerchantCost
   */
  @javax.annotation.Nullable
  public String getMaxMerchantCost() {
    return maxMerchantCost;
  }

  public void setMaxMerchantCost(String maxMerchantCost) {
    this.maxMerchantCost = maxMerchantCost;
  }


  public ApiLoanSimulationPayload maxMerchantCostPct(String maxMerchantCostPct) {
    this.maxMerchantCostPct = maxMerchantCostPct;
    return this;
  }

  /**
   * It indicates the maximum cost (per currency unit of the loan amount) the merchant is willing to bear to subsidize loan interests
   * @return maxMerchantCostPct
   */
  @javax.annotation.Nullable
  public String getMaxMerchantCostPct() {
    return maxMerchantCostPct;
  }

  public void setMaxMerchantCostPct(String maxMerchantCostPct) {
    this.maxMerchantCostPct = maxMerchantCostPct;
  }


  public ApiLoanSimulationPayload maxNir(BigDecimal maxNir) {
    this.maxNir = maxNir;
    return this;
  }

  /**
   * Get maxNir
   * @return maxNir
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxNir() {
    return maxNir;
  }

  public void setMaxNir(BigDecimal maxNir) {
    this.maxNir = maxNir;
  }


  public ApiLoanSimulationPayload openingFeePct(String openingFeePct) {
    this.openingFeePct = openingFeePct;
    return this;
  }

  /**
   * The desired maximum opening fee (per currency unit)
   * @return openingFeePct
   */
  @javax.annotation.Nullable
  public String getOpeningFeePct() {
    return openingFeePct;
  }

  public void setOpeningFeePct(String openingFeePct) {
    this.openingFeePct = openingFeePct;
  }


  public ApiLoanSimulationPayload withInsurance(Boolean withInsurance) {
    this.withInsurance = withInsurance;
    return this;
  }

  /**
   * Whether the loan includes an insurance or not.
   * @return withInsurance
   */
  @javax.annotation.Nullable
  public Boolean getWithInsurance() {
    return withInsurance;
  }

  public void setWithInsurance(Boolean withInsurance) {
    this.withInsurance = withInsurance;
  }


  public ApiLoanSimulationPayload paymentPeriodStartDate(LocalDate paymentPeriodStartDate) {
    this.paymentPeriodStartDate = paymentPeriodStartDate;
    return this;
  }

  /**
   * Get paymentPeriodStartDate
   * @return paymentPeriodStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getPaymentPeriodStartDate() {
    return paymentPeriodStartDate;
  }

  public void setPaymentPeriodStartDate(LocalDate paymentPeriodStartDate) {
    this.paymentPeriodStartDate = paymentPeriodStartDate;
  }


  public ApiLoanSimulationPayload mainApplicantBirthDate(LocalDate mainApplicantBirthDate) {
    this.mainApplicantBirthDate = mainApplicantBirthDate;
    return this;
  }

  /**
   * The main applicant&#39;s birth date
   * @return mainApplicantBirthDate
   */
  @javax.annotation.Nullable
  public LocalDate getMainApplicantBirthDate() {
    return mainApplicantBirthDate;
  }

  public void setMainApplicantBirthDate(LocalDate mainApplicantBirthDate) {
    this.mainApplicantBirthDate = mainApplicantBirthDate;
  }


  public ApiLoanSimulationPayload drivingLicenceIssuanceDate(LocalDate drivingLicenceIssuanceDate) {
    this.drivingLicenceIssuanceDate = drivingLicenceIssuanceDate;
    return this;
  }

  /**
   * Driving license issuance date
   * @return drivingLicenceIssuanceDate
   */
  @javax.annotation.Nullable
  public LocalDate getDrivingLicenceIssuanceDate() {
    return drivingLicenceIssuanceDate;
  }

  public void setDrivingLicenceIssuanceDate(LocalDate drivingLicenceIssuanceDate) {
    this.drivingLicenceIssuanceDate = drivingLicenceIssuanceDate;
  }


  public ApiLoanSimulationPayload postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * The applicant&#39;s postal code
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public ApiLoanSimulationPayload occupation(OccupationEnum occupation) {
    this.occupation = occupation;
    return this;
  }

  /**
   * The specific occupation the applicant has
   * @return occupation
   */
  @javax.annotation.Nullable
  public OccupationEnum getOccupation() {
    return occupation;
  }

  public void setOccupation(OccupationEnum occupation) {
    this.occupation = occupation;
  }


  public ApiLoanSimulationPayload insuranceCoverages(Set<InsuranceCoveragesEnum> insuranceCoverages) {
    this.insuranceCoverages = insuranceCoverages;
    return this;
  }

  public ApiLoanSimulationPayload addInsuranceCoveragesItem(InsuranceCoveragesEnum insuranceCoveragesItem) {
    if (this.insuranceCoverages == null) {
      this.insuranceCoverages = new LinkedHashSet<>();
    }
    this.insuranceCoverages.add(insuranceCoveragesItem);
    return this;
  }

  /**
   * Set of insurance coverages included in the loan
   * @return insuranceCoverages
   */
  @javax.annotation.Nullable
  public Set<InsuranceCoveragesEnum> getInsuranceCoverages() {
    return insuranceCoverages;
  }

  public void setInsuranceCoverages(Set<InsuranceCoveragesEnum> insuranceCoverages) {
    this.insuranceCoverages = insuranceCoverages;
  }


  public ApiLoanSimulationPayload languageTag(String languageTag) {
    this.languageTag = languageTag;
    return this;
  }

  /**
   * Get languageTag
   * @return languageTag
   */
  @javax.annotation.Nullable
  public String getLanguageTag() {
    return languageTag;
  }

  public void setLanguageTag(String languageTag) {
    this.languageTag = languageTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiLoanSimulationPayload apiLoanSimulationPayload = (ApiLoanSimulationPayload) o;
    return Objects.equals(this.merchantCode, apiLoanSimulationPayload.merchantCode) &&
        Objects.equals(this.goodsTypeCode, apiLoanSimulationPayload.goodsTypeCode) &&
        Objects.equals(this.purchaseAmount, apiLoanSimulationPayload.purchaseAmount) &&
        Objects.equals(this.requestedAmount, apiLoanSimulationPayload.requestedAmount) &&
        Objects.equals(this.applicantType, apiLoanSimulationPayload.applicantType) &&
        Objects.equals(this.maxMonthlyPayment, apiLoanSimulationPayload.maxMonthlyPayment) &&
        Objects.equals(this.subscriptionPayment, apiLoanSimulationPayload.subscriptionPayment) &&
        Objects.equals(this.maxNominalAnnualRate, apiLoanSimulationPayload.maxNominalAnnualRate) &&
        Objects.equals(this.productType, apiLoanSimulationPayload.productType) &&
        Objects.equals(this.paymentFrequency, apiLoanSimulationPayload.paymentFrequency) &&
        Objects.equals(this.instalmentType, apiLoanSimulationPayload.instalmentType) &&
        Objects.equals(this.vehicleMake, apiLoanSimulationPayload.vehicleMake) &&
        Objects.equals(this.vehicleModelCode, apiLoanSimulationPayload.vehicleModelCode) &&
        Objects.equals(this.vehicleVersionCode, apiLoanSimulationPayload.vehicleVersionCode) &&
        Objects.equals(this.registrationNumber, apiLoanSimulationPayload.registrationNumber) &&
        Objects.equals(this.firstRegistrationDate, apiLoanSimulationPayload.firstRegistrationDate) &&
        Objects.equals(this.mileage, apiLoanSimulationPayload.mileage) &&
        Objects.equals(this.serviceDuration, apiLoanSimulationPayload.serviceDuration) &&
        Objects.equals(this.lender, apiLoanSimulationPayload.lender) &&
        Objects.equals(this.feePaymentType, apiLoanSimulationPayload.feePaymentType) &&
        Objects.equals(this.term, apiLoanSimulationPayload.term) &&
        Objects.equals(this.gracePeriod, apiLoanSimulationPayload.gracePeriod) &&
        Objects.equals(this.maxMerchantCost, apiLoanSimulationPayload.maxMerchantCost) &&
        Objects.equals(this.maxMerchantCostPct, apiLoanSimulationPayload.maxMerchantCostPct) &&
        Objects.equals(this.maxNir, apiLoanSimulationPayload.maxNir) &&
        Objects.equals(this.openingFeePct, apiLoanSimulationPayload.openingFeePct) &&
        Objects.equals(this.withInsurance, apiLoanSimulationPayload.withInsurance) &&
        Objects.equals(this.paymentPeriodStartDate, apiLoanSimulationPayload.paymentPeriodStartDate) &&
        Objects.equals(this.mainApplicantBirthDate, apiLoanSimulationPayload.mainApplicantBirthDate) &&
        Objects.equals(this.drivingLicenceIssuanceDate, apiLoanSimulationPayload.drivingLicenceIssuanceDate) &&
        Objects.equals(this.postalCode, apiLoanSimulationPayload.postalCode) &&
        Objects.equals(this.occupation, apiLoanSimulationPayload.occupation) &&
        Objects.equals(this.insuranceCoverages, apiLoanSimulationPayload.insuranceCoverages) &&
        Objects.equals(this.languageTag, apiLoanSimulationPayload.languageTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantCode, goodsTypeCode, purchaseAmount, requestedAmount, applicantType, maxMonthlyPayment, subscriptionPayment, maxNominalAnnualRate, productType, paymentFrequency, instalmentType, vehicleMake, vehicleModelCode, vehicleVersionCode, registrationNumber, firstRegistrationDate, mileage, serviceDuration, lender, feePaymentType, term, gracePeriod, maxMerchantCost, maxMerchantCostPct, maxNir, openingFeePct, withInsurance, paymentPeriodStartDate, mainApplicantBirthDate, drivingLicenceIssuanceDate, postalCode, occupation, insuranceCoverages, languageTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiLoanSimulationPayload {\n");
    sb.append("    merchantCode: ").append(toIndentedString(merchantCode)).append("\n");
    sb.append("    goodsTypeCode: ").append(toIndentedString(goodsTypeCode)).append("\n");
    sb.append("    purchaseAmount: ").append(toIndentedString(purchaseAmount)).append("\n");
    sb.append("    requestedAmount: ").append(toIndentedString(requestedAmount)).append("\n");
    sb.append("    applicantType: ").append(toIndentedString(applicantType)).append("\n");
    sb.append("    maxMonthlyPayment: ").append(toIndentedString(maxMonthlyPayment)).append("\n");
    sb.append("    subscriptionPayment: ").append(toIndentedString(subscriptionPayment)).append("\n");
    sb.append("    maxNominalAnnualRate: ").append(toIndentedString(maxNominalAnnualRate)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    paymentFrequency: ").append(toIndentedString(paymentFrequency)).append("\n");
    sb.append("    instalmentType: ").append(toIndentedString(instalmentType)).append("\n");
    sb.append("    vehicleMake: ").append(toIndentedString(vehicleMake)).append("\n");
    sb.append("    vehicleModelCode: ").append(toIndentedString(vehicleModelCode)).append("\n");
    sb.append("    vehicleVersionCode: ").append(toIndentedString(vehicleVersionCode)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    firstRegistrationDate: ").append(toIndentedString(firstRegistrationDate)).append("\n");
    sb.append("    mileage: ").append(toIndentedString(mileage)).append("\n");
    sb.append("    serviceDuration: ").append(toIndentedString(serviceDuration)).append("\n");
    sb.append("    lender: ").append(toIndentedString(lender)).append("\n");
    sb.append("    feePaymentType: ").append(toIndentedString(feePaymentType)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    gracePeriod: ").append(toIndentedString(gracePeriod)).append("\n");
    sb.append("    maxMerchantCost: ").append(toIndentedString(maxMerchantCost)).append("\n");
    sb.append("    maxMerchantCostPct: ").append(toIndentedString(maxMerchantCostPct)).append("\n");
    sb.append("    maxNir: ").append(toIndentedString(maxNir)).append("\n");
    sb.append("    openingFeePct: ").append(toIndentedString(openingFeePct)).append("\n");
    sb.append("    withInsurance: ").append(toIndentedString(withInsurance)).append("\n");
    sb.append("    paymentPeriodStartDate: ").append(toIndentedString(paymentPeriodStartDate)).append("\n");
    sb.append("    mainApplicantBirthDate: ").append(toIndentedString(mainApplicantBirthDate)).append("\n");
    sb.append("    drivingLicenceIssuanceDate: ").append(toIndentedString(drivingLicenceIssuanceDate)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    occupation: ").append(toIndentedString(occupation)).append("\n");
    sb.append("    insuranceCoverages: ").append(toIndentedString(insuranceCoverages)).append("\n");
    sb.append("    languageTag: ").append(toIndentedString(languageTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merchantCode");
    openapiFields.add("goodsTypeCode");
    openapiFields.add("purchaseAmount");
    openapiFields.add("requestedAmount");
    openapiFields.add("applicantType");
    openapiFields.add("maxMonthlyPayment");
    openapiFields.add("subscriptionPayment");
    openapiFields.add("maxNominalAnnualRate");
    openapiFields.add("productType");
    openapiFields.add("paymentFrequency");
    openapiFields.add("instalmentType");
    openapiFields.add("vehicleMake");
    openapiFields.add("vehicleModelCode");
    openapiFields.add("vehicleVersionCode");
    openapiFields.add("registrationNumber");
    openapiFields.add("firstRegistrationDate");
    openapiFields.add("mileage");
    openapiFields.add("serviceDuration");
    openapiFields.add("lender");
    openapiFields.add("feePaymentType");
    openapiFields.add("term");
    openapiFields.add("gracePeriod");
    openapiFields.add("maxMerchantCost");
    openapiFields.add("maxMerchantCostPct");
    openapiFields.add("maxNir");
    openapiFields.add("openingFeePct");
    openapiFields.add("withInsurance");
    openapiFields.add("paymentPeriodStartDate");
    openapiFields.add("mainApplicantBirthDate");
    openapiFields.add("drivingLicenceIssuanceDate");
    openapiFields.add("postalCode");
    openapiFields.add("occupation");
    openapiFields.add("insuranceCoverages");
    openapiFields.add("languageTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("merchantCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiLoanSimulationPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiLoanSimulationPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiLoanSimulationPayload is not found in the empty JSON string", ApiLoanSimulationPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiLoanSimulationPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiLoanSimulationPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiLoanSimulationPayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("merchantCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCode").toString()));
      }
      if ((jsonObj.get("goodsTypeCode") != null && !jsonObj.get("goodsTypeCode").isJsonNull()) && !jsonObj.get("goodsTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goodsTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goodsTypeCode").toString()));
      }
      if ((jsonObj.get("purchaseAmount") != null && !jsonObj.get("purchaseAmount").isJsonNull()) && !jsonObj.get("purchaseAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseAmount").toString()));
      }
      if ((jsonObj.get("requestedAmount") != null && !jsonObj.get("requestedAmount").isJsonNull()) && !jsonObj.get("requestedAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedAmount").toString()));
      }
      if ((jsonObj.get("applicantType") != null && !jsonObj.get("applicantType").isJsonNull()) && !jsonObj.get("applicantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicantType").toString()));
      }
      // validate the optional field `applicantType`
      if (jsonObj.get("applicantType") != null && !jsonObj.get("applicantType").isJsonNull()) {
        ApplicantTypeEnum.validateJsonElement(jsonObj.get("applicantType"));
      }
      if ((jsonObj.get("maxMonthlyPayment") != null && !jsonObj.get("maxMonthlyPayment").isJsonNull()) && !jsonObj.get("maxMonthlyPayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxMonthlyPayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxMonthlyPayment").toString()));
      }
      if ((jsonObj.get("maxNominalAnnualRate") != null && !jsonObj.get("maxNominalAnnualRate").isJsonNull()) && !jsonObj.get("maxNominalAnnualRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxNominalAnnualRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxNominalAnnualRate").toString()));
      }
      if ((jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) && !jsonObj.get("productType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productType").toString()));
      }
      // validate the optional field `productType`
      if (jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) {
        ProductTypeEnum.validateJsonElement(jsonObj.get("productType"));
      }
      if ((jsonObj.get("paymentFrequency") != null && !jsonObj.get("paymentFrequency").isJsonNull()) && !jsonObj.get("paymentFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentFrequency").toString()));
      }
      // validate the optional field `paymentFrequency`
      if (jsonObj.get("paymentFrequency") != null && !jsonObj.get("paymentFrequency").isJsonNull()) {
        PaymentFrequencyEnum.validateJsonElement(jsonObj.get("paymentFrequency"));
      }
      if ((jsonObj.get("instalmentType") != null && !jsonObj.get("instalmentType").isJsonNull()) && !jsonObj.get("instalmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instalmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instalmentType").toString()));
      }
      // validate the optional field `instalmentType`
      if (jsonObj.get("instalmentType") != null && !jsonObj.get("instalmentType").isJsonNull()) {
        InstalmentTypeEnum.validateJsonElement(jsonObj.get("instalmentType"));
      }
      if ((jsonObj.get("vehicleMake") != null && !jsonObj.get("vehicleMake").isJsonNull()) && !jsonObj.get("vehicleMake").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicleMake` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicleMake").toString()));
      }
      // validate the optional field `vehicleMake`
      if (jsonObj.get("vehicleMake") != null && !jsonObj.get("vehicleMake").isJsonNull()) {
        VehicleMakeEnum.validateJsonElement(jsonObj.get("vehicleMake"));
      }
      if ((jsonObj.get("vehicleModelCode") != null && !jsonObj.get("vehicleModelCode").isJsonNull()) && !jsonObj.get("vehicleModelCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicleModelCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicleModelCode").toString()));
      }
      if ((jsonObj.get("vehicleVersionCode") != null && !jsonObj.get("vehicleVersionCode").isJsonNull()) && !jsonObj.get("vehicleVersionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vehicleVersionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vehicleVersionCode").toString()));
      }
      if ((jsonObj.get("registrationNumber") != null && !jsonObj.get("registrationNumber").isJsonNull()) && !jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      if ((jsonObj.get("serviceDuration") != null && !jsonObj.get("serviceDuration").isJsonNull()) && !jsonObj.get("serviceDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDuration").toString()));
      }
      // validate the optional field `serviceDuration`
      if (jsonObj.get("serviceDuration") != null && !jsonObj.get("serviceDuration").isJsonNull()) {
        ServiceDurationEnum.validateJsonElement(jsonObj.get("serviceDuration"));
      }
      if ((jsonObj.get("lender") != null && !jsonObj.get("lender").isJsonNull()) && !jsonObj.get("lender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lender").toString()));
      }
      // validate the optional field `lender`
      if (jsonObj.get("lender") != null && !jsonObj.get("lender").isJsonNull()) {
        LenderEnum.validateJsonElement(jsonObj.get("lender"));
      }
      if ((jsonObj.get("feePaymentType") != null && !jsonObj.get("feePaymentType").isJsonNull()) && !jsonObj.get("feePaymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feePaymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feePaymentType").toString()));
      }
      // validate the optional field `feePaymentType`
      if (jsonObj.get("feePaymentType") != null && !jsonObj.get("feePaymentType").isJsonNull()) {
        FeePaymentTypeEnum.validateJsonElement(jsonObj.get("feePaymentType"));
      }
      if ((jsonObj.get("maxMerchantCost") != null && !jsonObj.get("maxMerchantCost").isJsonNull()) && !jsonObj.get("maxMerchantCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxMerchantCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxMerchantCost").toString()));
      }
      if ((jsonObj.get("maxMerchantCostPct") != null && !jsonObj.get("maxMerchantCostPct").isJsonNull()) && !jsonObj.get("maxMerchantCostPct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxMerchantCostPct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxMerchantCostPct").toString()));
      }
      if ((jsonObj.get("openingFeePct") != null && !jsonObj.get("openingFeePct").isJsonNull()) && !jsonObj.get("openingFeePct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openingFeePct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openingFeePct").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("occupation") != null && !jsonObj.get("occupation").isJsonNull()) && !jsonObj.get("occupation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occupation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occupation").toString()));
      }
      // validate the optional field `occupation`
      if (jsonObj.get("occupation") != null && !jsonObj.get("occupation").isJsonNull()) {
        OccupationEnum.validateJsonElement(jsonObj.get("occupation"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("insuranceCoverages") != null && !jsonObj.get("insuranceCoverages").isJsonNull() && !jsonObj.get("insuranceCoverages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `insuranceCoverages` to be an array in the JSON string but got `%s`", jsonObj.get("insuranceCoverages").toString()));
      }
      if ((jsonObj.get("languageTag") != null && !jsonObj.get("languageTag").isJsonNull()) && !jsonObj.get("languageTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiLoanSimulationPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiLoanSimulationPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiLoanSimulationPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiLoanSimulationPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiLoanSimulationPayload>() {
           @Override
           public void write(JsonWriter out, ApiLoanSimulationPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiLoanSimulationPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiLoanSimulationPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiLoanSimulationPayload
   * @throws IOException if the JSON string is invalid with respect to ApiLoanSimulationPayload
   */
  public static ApiLoanSimulationPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiLoanSimulationPayload.class);
  }

  /**
   * Convert an instance of ApiLoanSimulationPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

