/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import java.time.OffsetDateTime;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserApiSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUser
     * @param user The payload of the user that is about to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The user has been successfully created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(User user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/v2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(User user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling createUser(Async)");
        }

        return createUserCall(user, _callback);

    }

    /**
     * Creates a new user
     * 
     * @param user The payload of the user that is about to be created (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The user has been successfully created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public User createUser(User user) throws ApiException {
        ApiResponse<User> localVarResp = createUserWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * Creates a new user
     * 
     * @param user The payload of the user that is about to be created (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The user has been successfully created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> createUserWithHttpInfo(User user) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new user (asynchronously)
     * 
     * @param user The payload of the user that is about to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The user has been successfully created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(User user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> User recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUser(Async)");
        }

        return getUserCall(id, _callback);

    }

    /**
     * Retrieves user information
     * 
     * @param id  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> User recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public User getUser(String id) throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves user information
     * 
     * @param id  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> User recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves user information (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> User recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String id, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchUser
     * @param id  (required)
     * @param user Payload including the fields that we want to patch from the User (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The user has been successfully patched </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchUserCall(String id, User user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/v2/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/merge-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchUserValidateBeforeCall(String id, User user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchUser(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling patchUser(Async)");
        }

        return patchUserCall(id, user, _callback);

    }

    /**
     * Patches a user
     * 
     * @param id  (required)
     * @param user Payload including the fields that we want to patch from the User (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The user has been successfully patched </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public User patchUser(String id, User user) throws ApiException {
        ApiResponse<User> localVarResp = patchUserWithHttpInfo(id, user);
        return localVarResp.getData();
    }

    /**
     * Patches a user
     * 
     * @param id  (required)
     * @param user Payload including the fields that we want to patch from the User (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The user has been successfully patched </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> patchUserWithHttpInfo(String id, User user) throws ApiException {
        okhttp3.Call localVarCall = patchUserValidateBeforeCall(id, user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patches a user (asynchronously)
     * 
     * @param id  (required)
     * @param user Payload including the fields that we want to patch from the User (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The user has been successfully patched </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchUserAsync(String id, User user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchUserValidateBeforeCall(id, user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchUser
     * @param page If this parameter is specified, standard pagination will be performed, returning the users corresponding to the indicated page (0 based indexed) for the indicated page size. For example: page&#x3D;2&amp;pageSize&#x3D;10 will return the results (20-29). The results will be sorted by descending creation date. (optional)
     * @param pageSize Maximum number of users to be returned. If not specified, 20 users will be returned by default.. (optional, default to 20)
     * @param pageToken If the \&quot;page\&quot; parameter has not been specified, the search will use cursor-based pagination. Each search result will include a nextPageToken field in the \&quot;meta\&quot; section. This nextPageToken must be included as a pageToken in the following request in order to get the next page of users. The initial search should not include pageToken. The results will always be returned ordered by descending creation date. (optional)
     * @param usernameStartsWith Name of the user you want to search for. Results whose username begins with this value will be returned. (optional)
     * @param createdBefore Users created prior to the date will be returned. (optional)
     * @param createdAfter Users created after the date will be returned. (optional)
     * @param stateIn Users whose state matches one of the values in this array will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> User recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserCall(Integer page, Integer pageSize, String pageToken, String usernameStartsWith, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> stateIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (usernameStartsWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usernameStartsWith", usernameStartsWith));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (stateIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "stateIn", stateIn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUserValidateBeforeCall(Integer page, Integer pageSize, String pageToken, String usernameStartsWith, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> stateIn, final ApiCallback _callback) throws ApiException {
        return searchUserCall(page, pageSize, pageToken, usernameStartsWith, createdBefore, createdAfter, stateIn, _callback);

    }

    /**
     * Search users information
     * 
     * @param page If this parameter is specified, standard pagination will be performed, returning the users corresponding to the indicated page (0 based indexed) for the indicated page size. For example: page&#x3D;2&amp;pageSize&#x3D;10 will return the results (20-29). The results will be sorted by descending creation date. (optional)
     * @param pageSize Maximum number of users to be returned. If not specified, 20 users will be returned by default.. (optional, default to 20)
     * @param pageToken If the \&quot;page\&quot; parameter has not been specified, the search will use cursor-based pagination. Each search result will include a nextPageToken field in the \&quot;meta\&quot; section. This nextPageToken must be included as a pageToken in the following request in order to get the next page of users. The initial search should not include pageToken. The results will always be returned ordered by descending creation date. (optional)
     * @param usernameStartsWith Name of the user you want to search for. Results whose username begins with this value will be returned. (optional)
     * @param createdBefore Users created prior to the date will be returned. (optional)
     * @param createdAfter Users created after the date will be returned. (optional)
     * @param stateIn Users whose state matches one of the values in this array will be returned. (optional)
     * @return UserApiSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> User recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public UserApiSearchResponse searchUser(Integer page, Integer pageSize, String pageToken, String usernameStartsWith, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> stateIn) throws ApiException {
        ApiResponse<UserApiSearchResponse> localVarResp = searchUserWithHttpInfo(page, pageSize, pageToken, usernameStartsWith, createdBefore, createdAfter, stateIn);
        return localVarResp.getData();
    }

    /**
     * Search users information
     * 
     * @param page If this parameter is specified, standard pagination will be performed, returning the users corresponding to the indicated page (0 based indexed) for the indicated page size. For example: page&#x3D;2&amp;pageSize&#x3D;10 will return the results (20-29). The results will be sorted by descending creation date. (optional)
     * @param pageSize Maximum number of users to be returned. If not specified, 20 users will be returned by default.. (optional, default to 20)
     * @param pageToken If the \&quot;page\&quot; parameter has not been specified, the search will use cursor-based pagination. Each search result will include a nextPageToken field in the \&quot;meta\&quot; section. This nextPageToken must be included as a pageToken in the following request in order to get the next page of users. The initial search should not include pageToken. The results will always be returned ordered by descending creation date. (optional)
     * @param usernameStartsWith Name of the user you want to search for. Results whose username begins with this value will be returned. (optional)
     * @param createdBefore Users created prior to the date will be returned. (optional)
     * @param createdAfter Users created after the date will be returned. (optional)
     * @param stateIn Users whose state matches one of the values in this array will be returned. (optional)
     * @return ApiResponse&lt;UserApiSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> User recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserApiSearchResponse> searchUserWithHttpInfo(Integer page, Integer pageSize, String pageToken, String usernameStartsWith, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> stateIn) throws ApiException {
        okhttp3.Call localVarCall = searchUserValidateBeforeCall(page, pageSize, pageToken, usernameStartsWith, createdBefore, createdAfter, stateIn, null);
        Type localVarReturnType = new TypeToken<UserApiSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search users information (asynchronously)
     * 
     * @param page If this parameter is specified, standard pagination will be performed, returning the users corresponding to the indicated page (0 based indexed) for the indicated page size. For example: page&#x3D;2&amp;pageSize&#x3D;10 will return the results (20-29). The results will be sorted by descending creation date. (optional)
     * @param pageSize Maximum number of users to be returned. If not specified, 20 users will be returned by default.. (optional, default to 20)
     * @param pageToken If the \&quot;page\&quot; parameter has not been specified, the search will use cursor-based pagination. Each search result will include a nextPageToken field in the \&quot;meta\&quot; section. This nextPageToken must be included as a pageToken in the following request in order to get the next page of users. The initial search should not include pageToken. The results will always be returned ordered by descending creation date. (optional)
     * @param usernameStartsWith Name of the user you want to search for. Results whose username begins with this value will be returned. (optional)
     * @param createdBefore Users created prior to the date will be returned. (optional)
     * @param createdAfter Users created after the date will be returned. (optional)
     * @param stateIn Users whose state matches one of the values in this array will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> User recovered successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserAsync(Integer page, Integer pageSize, String pageToken, String usernameStartsWith, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> stateIn, final ApiCallback<UserApiSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchUserValidateBeforeCall(page, pageSize, pageToken, usernameStartsWith, createdBefore, createdAfter, stateIn, _callback);
        Type localVarReturnType = new TypeToken<UserApiSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param id The id of the user (required)
     * @param user The payload of the user that is about to be updated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The user has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String id, User user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/v2/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String id, User user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUser(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling updateUser(Async)");
        }

        return updateUserCall(id, user, _callback);

    }

    /**
     * Updates a user
     * 
     * @param id The id of the user (required)
     * @param user The payload of the user that is about to be updated (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The user has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public User updateUser(String id, User user) throws ApiException {
        ApiResponse<User> localVarResp = updateUserWithHttpInfo(id, user);
        return localVarResp.getData();
    }

    /**
     * Updates a user
     * 
     * @param id The id of the user (required)
     * @param user The payload of the user that is about to be updated (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The user has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUserWithHttpInfo(String id, User user) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(id, user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a user (asynchronously)
     * 
     * @param id The id of the user (required)
     * @param user The payload of the user that is about to be updated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The request was malformed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> The user has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You are not authorized, please check your API-KEY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String id, User user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(id, user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
