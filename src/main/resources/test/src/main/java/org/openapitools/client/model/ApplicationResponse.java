/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Applicant;
import org.openapitools.client.model.LoanDetails;
import org.openapitools.client.model.Merchant;
import org.openapitools.client.model.Offer;
import org.openapitools.client.model.Order;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class ApplicationResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_APPLICANTS = "applicants";
  @SerializedName(SERIALIZED_NAME_APPLICANTS)
  private List<Applicant> applicants = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private Merchant merchant;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Order order;

  public static final String SERIALIZED_NAME_LOAN_DETAILS = "loanDetails";
  @SerializedName(SERIALIZED_NAME_LOAN_DETAILS)
  private LoanDetails loanDetails;

  public static final String SERIALIZED_NAME_SEND_LEAD_EMAIL = "sendLeadEmail";
  @SerializedName(SERIALIZED_NAME_SEND_LEAD_EMAIL)
  private Boolean sendLeadEmail;

  public static final String SERIALIZED_NAME_PHONE_VALIDATION_REQUIRED = "phoneValidationRequired";
  @SerializedName(SERIALIZED_NAME_PHONE_VALIDATION_REQUIRED)
  private Boolean phoneValidationRequired;

  public static final String SERIALIZED_NAME_SIGNATURE_DISABLED = "signatureDisabled";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_DISABLED)
  private Boolean signatureDisabled;

  /**
   * Indicates who is responsible for managing the Application creation and submission
   */
  @JsonAdapter(ManagedByEnum.Adapter.class)
  public enum ManagedByEnum {
    APPLICANT("APPLICANT"),
    
    AGENT("AGENT");

    private String value;

    ManagedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagedByEnum fromValue(String value) {
      for (ManagedByEnum b : ManagedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGED_BY = "managedBy";
  @SerializedName(SERIALIZED_NAME_MANAGED_BY)
  private ManagedByEnum managedBy = ManagedByEnum.AGENT;

  public static final String SERIALIZED_NAME_APPLICATION_TTL_SEC = "applicationTtlSec";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TTL_SEC)
  private Integer applicationTtlSec;

  public static final String SERIALIZED_NAME_SESSION_TTL_SEC = "sessionTtlSec";
  @SerializedName(SERIALIZED_NAME_SESSION_TTL_SEC)
  private Integer sessionTtlSec;

  public static final String SERIALIZED_NAME_PRIMARY_COLOR = "primaryColor";
  @SerializedName(SERIALIZED_NAME_PRIMARY_COLOR)
  private String primaryColor;

  public static final String SERIALIZED_NAME_SHOW_DENIALS = "showDenials";
  @SerializedName(SERIALIZED_NAME_SHOW_DENIALS)
  private Boolean showDenials;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_READABLE_ID = "readableId";
  @SerializedName(SERIALIZED_NAME_READABLE_ID)
  private Long readableId;

  public static final String SERIALIZED_NAME_APPLICATION_UI_URL = "applicationUiUrl";
  @SerializedName(SERIALIZED_NAME_APPLICATION_UI_URL)
  private String applicationUiUrl;

  public static final String SERIALIZED_NAME_APPLICANT_URL = "applicantUrl";
  @SerializedName(SERIALIZED_NAME_APPLICANT_URL)
  private String applicantUrl;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_CANCELLATION_DATE = "cancellationDate";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_DATE)
  private OffsetDateTime cancellationDate;

  /**
   * The reason why the application got cancelled
   */
  @JsonAdapter(CancellationReasonEnum.Adapter.class)
  public enum CancellationReasonEnum {
    OTHER_PAYMENT_METHOD("OTHER_PAYMENT_METHOD"),
    
    OTHER_FINANCING_OPTION("OTHER_FINANCING_OPTION"),
    
    NO_LONGER_INTERESTED("NO_LONGER_INTERESTED"),
    
    DUPLICATED_APPLICATION("DUPLICATED_APPLICATION"),
    
    CLONED_APPLICATION("CLONED_APPLICATION"),
    
    NON_ELIGIBLE("NON_ELIGIBLE"),
    
    IRREGULAR_DOCUMENTS("IRREGULAR_DOCUMENTS"),
    
    ILLNESS("ILLNESS"),
    
    SERVICE_PERIOD_EXCEEDED("SERVICE_PERIOD_EXCEEDED"),
    
    QUOTE_INCREASE("QUOTE_INCREASE"),
    
    NOT_SPECIFIED("NOT_SPECIFIED"),
    
    TTL_CONCLUDED("TTL_CONCLUDED"),
    
    JUST_BROWSING("JUST_BROWSING"),
    
    TOO_EXPENSIVE("TOO_EXPENSIVE"),
    
    UNCLEAR_TERMS("UNCLEAR_TERMS"),
    
    ERROR_OCCURRED("ERROR_OCCURRED");

    private String value;

    CancellationReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CancellationReasonEnum fromValue(String value) {
      for (CancellationReasonEnum b : CancellationReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CancellationReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CancellationReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CancellationReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CancellationReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CancellationReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CANCELLATION_REASON = "cancellationReason";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_REASON)
  private CancellationReasonEnum cancellationReason;

  public static final String SERIALIZED_NAME_CLONED_FROM_ID = "clonedFromId";
  @SerializedName(SERIALIZED_NAME_CLONED_FROM_ID)
  private UUID clonedFromId;

  public static final String SERIALIZED_NAME_CLONED_FROM_READABLE_ID = "clonedFromReadableId";
  @SerializedName(SERIALIZED_NAME_CLONED_FROM_READABLE_ID)
  private Long clonedFromReadableId;

  /**
   * The state the Application, checkout the docs for a detailed explanation about the different available states
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    APPROVED("APPROVED"),
    
    PREAPPROVED("PREAPPROVED"),
    
    SUBMITTING("SUBMITTING"),
    
    PENDING_REVIEW("PENDING_REVIEW"),
    
    PENDING_DATA("PENDING_DATA"),
    
    PENDING_SUBMISSION("PENDING_SUBMISSION"),
    
    DRAFT("DRAFT"),
    
    ERROR("ERROR"),
    
    DENIED("DENIED"),
    
    CANCELED("CANCELED"),
    
    RETURNED("RETURNED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_PAYMENT_AUTHORIZATION_CODE = "paymentAuthorizationCode";
  @SerializedName(SERIALIZED_NAME_PAYMENT_AUTHORIZATION_CODE)
  private String paymentAuthorizationCode;

  public static final String SERIALIZED_NAME_SELECTED_OFFER = "selectedOffer";
  @SerializedName(SERIALIZED_NAME_SELECTED_OFFER)
  private Offer selectedOffer;

  public static final String SERIALIZED_NAME_DESELECTED_OFFER = "deselectedOffer";
  @SerializedName(SERIALIZED_NAME_DESELECTED_OFFER)
  private Offer deselectedOffer;

  /**
   * Represents where was the application created in initially
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    PORTAL("PORTAL"),
    
    API("API");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  public ApplicationResponse() {
  }

  public ApplicationResponse id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The main identifier of the Application
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public ApplicationResponse applicants(List<Applicant> applicants) {
    this.applicants = applicants;
    return this;
  }

  public ApplicationResponse addApplicantsItem(Applicant applicantsItem) {
    if (this.applicants == null) {
      this.applicants = new ArrayList<>();
    }
    this.applicants.add(applicantsItem);
    return this;
  }

  /**
   * Represents the collection of applicants who are applying for a loan. At least one applicant is required
   * @return applicants
   */
  @javax.annotation.Nullable
  public List<Applicant> getApplicants() {
    return applicants;
  }

  public void setApplicants(List<Applicant> applicants) {
    this.applicants = applicants;
  }


  public ApplicationResponse merchant(Merchant merchant) {
    this.merchant = merchant;
    return this;
  }

  /**
   * Get merchant
   * @return merchant
   */
  @javax.annotation.Nonnull
  public Merchant getMerchant() {
    return merchant;
  }

  public void setMerchant(Merchant merchant) {
    this.merchant = merchant;
  }


  public ApplicationResponse order(Order order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Order getOrder() {
    return order;
  }

  public void setOrder(Order order) {
    this.order = order;
  }


  public ApplicationResponse loanDetails(LoanDetails loanDetails) {
    this.loanDetails = loanDetails;
    return this;
  }

  /**
   * Get loanDetails
   * @return loanDetails
   */
  @javax.annotation.Nullable
  public LoanDetails getLoanDetails() {
    return loanDetails;
  }

  public void setLoanDetails(LoanDetails loanDetails) {
    this.loanDetails = loanDetails;
  }


  public ApplicationResponse sendLeadEmail(Boolean sendLeadEmail) {
    this.sendLeadEmail = sendLeadEmail;
    return this;
  }

  /**
   * If the flag is true an email will be sent to the main applicant informing him/her that an Application has been created. Please note that if this flag is set to true,  the MAIN_APPLICANT&#39;s email field should have a valid value. Also, if this flag is true the managedBy field will be set to APPLICANT automatically
   * @return sendLeadEmail
   */
  @javax.annotation.Nullable
  public Boolean getSendLeadEmail() {
    return sendLeadEmail;
  }

  public void setSendLeadEmail(Boolean sendLeadEmail) {
    this.sendLeadEmail = sendLeadEmail;
  }


  public ApplicationResponse phoneValidationRequired(Boolean phoneValidationRequired) {
    this.phoneValidationRequired = phoneValidationRequired;
    return this;
  }

  /**
   * If the flag is false mobile phone validation will be skipped
   * @return phoneValidationRequired
   */
  @javax.annotation.Nullable
  public Boolean getPhoneValidationRequired() {
    return phoneValidationRequired;
  }

  public void setPhoneValidationRequired(Boolean phoneValidationRequired) {
    this.phoneValidationRequired = phoneValidationRequired;
  }


  public ApplicationResponse signatureDisabled(Boolean signatureDisabled) {
    this.signatureDisabled = signatureDisabled;
    return this;
  }

  /**
   * If this flag is true the signature will be disabled until it is set to false
   * @return signatureDisabled
   */
  @javax.annotation.Nullable
  public Boolean getSignatureDisabled() {
    return signatureDisabled;
  }

  public void setSignatureDisabled(Boolean signatureDisabled) {
    this.signatureDisabled = signatureDisabled;
  }


  public ApplicationResponse managedBy(ManagedByEnum managedBy) {
    this.managedBy = managedBy;
    return this;
  }

  /**
   * Indicates who is responsible for managing the Application creation and submission
   * @return managedBy
   */
  @javax.annotation.Nullable
  public ManagedByEnum getManagedBy() {
    return managedBy;
  }

  public void setManagedBy(ManagedByEnum managedBy) {
    this.managedBy = managedBy;
  }


  public ApplicationResponse applicationTtlSec(Integer applicationTtlSec) {
    this.applicationTtlSec = applicationTtlSec;
    return this;
  }

  /**
   * Indicates for how long you as as merchant are willing to keep an application alive in seconds. This value will determine for how long the &#39;token&#39; field will be valid. If this field is not specified and the &#39;managedBy&#39; field is set to APPLICANT, a default value of one week will be assigned
   * @return applicationTtlSec
   */
  @javax.annotation.Nullable
  public Integer getApplicationTtlSec() {
    return applicationTtlSec;
  }

  public void setApplicationTtlSec(Integer applicationTtlSec) {
    this.applicationTtlSec = applicationTtlSec;
  }


  public ApplicationResponse sessionTtlSec(Integer sessionTtlSec) {
    this.sessionTtlSec = sessionTtlSec;
    return this;
  }

  /**
   * Indicates how long the session in Lendismart will last in seconds once you&#39;ve opened the widget via the &#39;openCheckout&#39; method of the JavaScript SDK or you have redirected the user to the applicantUrl. You should try to align the Lendismart session ttl with you own session ttl. Only applies if the &#39;managedBy&#39; field is set to APPLICANT.
   * @return sessionTtlSec
   */
  @javax.annotation.Nullable
  public Integer getSessionTtlSec() {
    return sessionTtlSec;
  }

  public void setSessionTtlSec(Integer sessionTtlSec) {
    this.sessionTtlSec = sessionTtlSec;
  }


  public ApplicationResponse primaryColor(String primaryColor) {
    this.primaryColor = primaryColor;
    return this;
  }

  /**
   * Allows for the customization of the UI color (only applies to applications &#39;managed by applicant&#39;). It should be passed as the color&#39;s hexadecimal code preceded by a #
   * @return primaryColor
   */
  @javax.annotation.Nullable
  public String getPrimaryColor() {
    return primaryColor;
  }

  public void setPrimaryColor(String primaryColor) {
    this.primaryColor = primaryColor;
  }


  public ApplicationResponse showDenials(Boolean showDenials) {
    this.showDenials = showDenials;
    return this;
  }

  /**
   * Indicates if denied offers must be shown to the applicant
   * @return showDenials
   */
  @javax.annotation.Nullable
  public Boolean getShowDenials() {
    return showDenials;
  }

  public void setShowDenials(Boolean showDenials) {
    this.showDenials = showDenials;
  }


  public ApplicationResponse ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Customer IP address.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public ApplicationResponse userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Customer user agent.
   * @return userAgent
   */
  @javax.annotation.Nullable
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }


  public ApplicationResponse comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Comments you may want to make about this particular Application can be placed here
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public ApplicationResponse readableId(Long readableId) {
    this.readableId = readableId;
    return this;
  }

  /**
   * The secondary identifier of the Application. It&#39;s more user friendly and UI oriented
   * @return readableId
   */
  @javax.annotation.Nullable
  public Long getReadableId() {
    return readableId;
  }

  public void setReadableId(Long readableId) {
    this.readableId = readableId;
  }


  public ApplicationResponse applicationUiUrl(String applicationUiUrl) {
    this.applicationUiUrl = applicationUiUrl;
    return this;
  }

  /**
   * URL where the Application can be accessed in Lendismart&#39;s UI
   * @return applicationUiUrl
   */
  @javax.annotation.Nullable
  public String getApplicationUiUrl() {
    return applicationUiUrl;
  }

  public void setApplicationUiUrl(String applicationUiUrl) {
    this.applicationUiUrl = applicationUiUrl;
  }


  public ApplicationResponse applicantUrl(String applicantUrl) {
    this.applicantUrl = applicantUrl;
    return this;
  }

  /**
   * URL where the Applicant should be pointed to when a merchant needs the Applicant to sign the contract and upload the documentation and does not want to use the JavaScript SDK for this purpose.
   * @return applicantUrl
   */
  @javax.annotation.Nullable
  public String getApplicantUrl() {
    return applicantUrl;
  }

  public void setApplicantUrl(String applicantUrl) {
    this.applicantUrl = applicantUrl;
  }


  public ApplicationResponse token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Token that is meant to be used in the browser in order to open the checkout widget
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public ApplicationResponse creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Timestamp that indicates when the Application has been created
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public ApplicationResponse cancellationDate(OffsetDateTime cancellationDate) {
    this.cancellationDate = cancellationDate;
    return this;
  }

  /**
   * Timestamp that indicates when the Application has been cancelled
   * @return cancellationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCancellationDate() {
    return cancellationDate;
  }

  public void setCancellationDate(OffsetDateTime cancellationDate) {
    this.cancellationDate = cancellationDate;
  }


  public ApplicationResponse cancellationReason(CancellationReasonEnum cancellationReason) {
    this.cancellationReason = cancellationReason;
    return this;
  }

  /**
   * The reason why the application got cancelled
   * @return cancellationReason
   */
  @javax.annotation.Nullable
  public CancellationReasonEnum getCancellationReason() {
    return cancellationReason;
  }

  public void setCancellationReason(CancellationReasonEnum cancellationReason) {
    this.cancellationReason = cancellationReason;
  }


  public ApplicationResponse clonedFromId(UUID clonedFromId) {
    this.clonedFromId = clonedFromId;
    return this;
  }

  /**
   * If the Application has been cloned from another Application, it represents de Id of the original Application
   * @return clonedFromId
   */
  @javax.annotation.Nullable
  public UUID getClonedFromId() {
    return clonedFromId;
  }

  public void setClonedFromId(UUID clonedFromId) {
    this.clonedFromId = clonedFromId;
  }


  public ApplicationResponse clonedFromReadableId(Long clonedFromReadableId) {
    this.clonedFromReadableId = clonedFromReadableId;
    return this;
  }

  /**
   * If the Application has been cloned from another Application, it represents de readableId of the original Application
   * @return clonedFromReadableId
   */
  @javax.annotation.Nullable
  public Long getClonedFromReadableId() {
    return clonedFromReadableId;
  }

  public void setClonedFromReadableId(Long clonedFromReadableId) {
    this.clonedFromReadableId = clonedFromReadableId;
  }


  public ApplicationResponse state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state the Application, checkout the docs for a detailed explanation about the different available states
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public ApplicationResponse paymentAuthorizationCode(String paymentAuthorizationCode) {
    this.paymentAuthorizationCode = paymentAuthorizationCode;
    return this;
  }

  /**
   * When applicable, payment authorization code used for the settlement of the purchase price
   * @return paymentAuthorizationCode
   */
  @javax.annotation.Nullable
  public String getPaymentAuthorizationCode() {
    return paymentAuthorizationCode;
  }

  public void setPaymentAuthorizationCode(String paymentAuthorizationCode) {
    this.paymentAuthorizationCode = paymentAuthorizationCode;
  }


  public ApplicationResponse selectedOffer(Offer selectedOffer) {
    this.selectedOffer = selectedOffer;
    return this;
  }

  /**
   * Get selectedOffer
   * @return selectedOffer
   */
  @javax.annotation.Nullable
  public Offer getSelectedOffer() {
    return selectedOffer;
  }

  public void setSelectedOffer(Offer selectedOffer) {
    this.selectedOffer = selectedOffer;
  }


  public ApplicationResponse deselectedOffer(Offer deselectedOffer) {
    this.deselectedOffer = deselectedOffer;
    return this;
  }

  /**
   * Get deselectedOffer
   * @return deselectedOffer
   */
  @javax.annotation.Nullable
  public Offer getDeselectedOffer() {
    return deselectedOffer;
  }

  public void setDeselectedOffer(Offer deselectedOffer) {
    this.deselectedOffer = deselectedOffer;
  }


  public ApplicationResponse source(SourceEnum source) {
    this.source = source;
    return this;
  }

  /**
   * Represents where was the application created in initially
   * @return source
   */
  @javax.annotation.Nullable
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationResponse applicationResponse = (ApplicationResponse) o;
    return Objects.equals(this.id, applicationResponse.id) &&
        Objects.equals(this.applicants, applicationResponse.applicants) &&
        Objects.equals(this.merchant, applicationResponse.merchant) &&
        Objects.equals(this.order, applicationResponse.order) &&
        Objects.equals(this.loanDetails, applicationResponse.loanDetails) &&
        Objects.equals(this.sendLeadEmail, applicationResponse.sendLeadEmail) &&
        Objects.equals(this.phoneValidationRequired, applicationResponse.phoneValidationRequired) &&
        Objects.equals(this.signatureDisabled, applicationResponse.signatureDisabled) &&
        Objects.equals(this.managedBy, applicationResponse.managedBy) &&
        Objects.equals(this.applicationTtlSec, applicationResponse.applicationTtlSec) &&
        Objects.equals(this.sessionTtlSec, applicationResponse.sessionTtlSec) &&
        Objects.equals(this.primaryColor, applicationResponse.primaryColor) &&
        Objects.equals(this.showDenials, applicationResponse.showDenials) &&
        Objects.equals(this.ipAddress, applicationResponse.ipAddress) &&
        Objects.equals(this.userAgent, applicationResponse.userAgent) &&
        Objects.equals(this.comments, applicationResponse.comments) &&
        Objects.equals(this.readableId, applicationResponse.readableId) &&
        Objects.equals(this.applicationUiUrl, applicationResponse.applicationUiUrl) &&
        Objects.equals(this.applicantUrl, applicationResponse.applicantUrl) &&
        Objects.equals(this.token, applicationResponse.token) &&
        Objects.equals(this.creationDate, applicationResponse.creationDate) &&
        Objects.equals(this.cancellationDate, applicationResponse.cancellationDate) &&
        Objects.equals(this.cancellationReason, applicationResponse.cancellationReason) &&
        Objects.equals(this.clonedFromId, applicationResponse.clonedFromId) &&
        Objects.equals(this.clonedFromReadableId, applicationResponse.clonedFromReadableId) &&
        Objects.equals(this.state, applicationResponse.state) &&
        Objects.equals(this.paymentAuthorizationCode, applicationResponse.paymentAuthorizationCode) &&
        Objects.equals(this.selectedOffer, applicationResponse.selectedOffer) &&
        Objects.equals(this.deselectedOffer, applicationResponse.deselectedOffer) &&
        Objects.equals(this.source, applicationResponse.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, applicants, merchant, order, loanDetails, sendLeadEmail, phoneValidationRequired, signatureDisabled, managedBy, applicationTtlSec, sessionTtlSec, primaryColor, showDenials, ipAddress, userAgent, comments, readableId, applicationUiUrl, applicantUrl, token, creationDate, cancellationDate, cancellationReason, clonedFromId, clonedFromReadableId, state, paymentAuthorizationCode, selectedOffer, deselectedOffer, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    applicants: ").append(toIndentedString(applicants)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    loanDetails: ").append(toIndentedString(loanDetails)).append("\n");
    sb.append("    sendLeadEmail: ").append(toIndentedString(sendLeadEmail)).append("\n");
    sb.append("    phoneValidationRequired: ").append(toIndentedString(phoneValidationRequired)).append("\n");
    sb.append("    signatureDisabled: ").append(toIndentedString(signatureDisabled)).append("\n");
    sb.append("    managedBy: ").append(toIndentedString(managedBy)).append("\n");
    sb.append("    applicationTtlSec: ").append(toIndentedString(applicationTtlSec)).append("\n");
    sb.append("    sessionTtlSec: ").append(toIndentedString(sessionTtlSec)).append("\n");
    sb.append("    primaryColor: ").append(toIndentedString(primaryColor)).append("\n");
    sb.append("    showDenials: ").append(toIndentedString(showDenials)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    readableId: ").append(toIndentedString(readableId)).append("\n");
    sb.append("    applicationUiUrl: ").append(toIndentedString(applicationUiUrl)).append("\n");
    sb.append("    applicantUrl: ").append(toIndentedString(applicantUrl)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    cancellationDate: ").append(toIndentedString(cancellationDate)).append("\n");
    sb.append("    cancellationReason: ").append(toIndentedString(cancellationReason)).append("\n");
    sb.append("    clonedFromId: ").append(toIndentedString(clonedFromId)).append("\n");
    sb.append("    clonedFromReadableId: ").append(toIndentedString(clonedFromReadableId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    paymentAuthorizationCode: ").append(toIndentedString(paymentAuthorizationCode)).append("\n");
    sb.append("    selectedOffer: ").append(toIndentedString(selectedOffer)).append("\n");
    sb.append("    deselectedOffer: ").append(toIndentedString(deselectedOffer)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("applicants");
    openapiFields.add("merchant");
    openapiFields.add("order");
    openapiFields.add("loanDetails");
    openapiFields.add("sendLeadEmail");
    openapiFields.add("phoneValidationRequired");
    openapiFields.add("signatureDisabled");
    openapiFields.add("managedBy");
    openapiFields.add("applicationTtlSec");
    openapiFields.add("sessionTtlSec");
    openapiFields.add("primaryColor");
    openapiFields.add("showDenials");
    openapiFields.add("ipAddress");
    openapiFields.add("userAgent");
    openapiFields.add("comments");
    openapiFields.add("readableId");
    openapiFields.add("applicationUiUrl");
    openapiFields.add("applicantUrl");
    openapiFields.add("token");
    openapiFields.add("creationDate");
    openapiFields.add("cancellationDate");
    openapiFields.add("cancellationReason");
    openapiFields.add("clonedFromId");
    openapiFields.add("clonedFromReadableId");
    openapiFields.add("state");
    openapiFields.add("paymentAuthorizationCode");
    openapiFields.add("selectedOffer");
    openapiFields.add("deselectedOffer");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("merchant");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationResponse is not found in the empty JSON string", ApplicationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("applicants") != null && !jsonObj.get("applicants").isJsonNull()) {
        JsonArray jsonArrayapplicants = jsonObj.getAsJsonArray("applicants");
        if (jsonArrayapplicants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applicants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applicants` to be an array in the JSON string but got `%s`", jsonObj.get("applicants").toString()));
          }

          // validate the optional field `applicants` (array)
          for (int i = 0; i < jsonArrayapplicants.size(); i++) {
            Applicant.validateJsonElement(jsonArrayapplicants.get(i));
          };
        }
      }
      // validate the required field `merchant`
      Merchant.validateJsonElement(jsonObj.get("merchant"));
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        Order.validateJsonElement(jsonObj.get("order"));
      }
      // validate the optional field `loanDetails`
      if (jsonObj.get("loanDetails") != null && !jsonObj.get("loanDetails").isJsonNull()) {
        LoanDetails.validateJsonElement(jsonObj.get("loanDetails"));
      }
      if ((jsonObj.get("managedBy") != null && !jsonObj.get("managedBy").isJsonNull()) && !jsonObj.get("managedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedBy").toString()));
      }
      // validate the optional field `managedBy`
      if (jsonObj.get("managedBy") != null && !jsonObj.get("managedBy").isJsonNull()) {
        ManagedByEnum.validateJsonElement(jsonObj.get("managedBy"));
      }
      if ((jsonObj.get("primaryColor") != null && !jsonObj.get("primaryColor").isJsonNull()) && !jsonObj.get("primaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryColor").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("userAgent") != null && !jsonObj.get("userAgent").isJsonNull()) && !jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("applicationUiUrl") != null && !jsonObj.get("applicationUiUrl").isJsonNull()) && !jsonObj.get("applicationUiUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationUiUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationUiUrl").toString()));
      }
      if ((jsonObj.get("applicantUrl") != null && !jsonObj.get("applicantUrl").isJsonNull()) && !jsonObj.get("applicantUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicantUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicantUrl").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("cancellationReason") != null && !jsonObj.get("cancellationReason").isJsonNull()) && !jsonObj.get("cancellationReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancellationReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancellationReason").toString()));
      }
      // validate the optional field `cancellationReason`
      if (jsonObj.get("cancellationReason") != null && !jsonObj.get("cancellationReason").isJsonNull()) {
        CancellationReasonEnum.validateJsonElement(jsonObj.get("cancellationReason"));
      }
      if ((jsonObj.get("clonedFromId") != null && !jsonObj.get("clonedFromId").isJsonNull()) && !jsonObj.get("clonedFromId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clonedFromId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clonedFromId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("paymentAuthorizationCode") != null && !jsonObj.get("paymentAuthorizationCode").isJsonNull()) && !jsonObj.get("paymentAuthorizationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentAuthorizationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentAuthorizationCode").toString()));
      }
      // validate the optional field `selectedOffer`
      if (jsonObj.get("selectedOffer") != null && !jsonObj.get("selectedOffer").isJsonNull()) {
        Offer.validateJsonElement(jsonObj.get("selectedOffer"));
      }
      // validate the optional field `deselectedOffer`
      if (jsonObj.get("deselectedOffer") != null && !jsonObj.get("deselectedOffer").isJsonNull()) {
        Offer.validateJsonElement(jsonObj.get("deselectedOffer"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SourceEnum.validateJsonElement(jsonObj.get("source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationResponse>() {
           @Override
           public void write(JsonWriter out, ApplicationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationResponse
   * @throws IOException if the JSON string is invalid with respect to ApplicationResponse
   */
  public static ApplicationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationResponse.class);
  }

  /**
   * Convert an instance of ApplicationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

