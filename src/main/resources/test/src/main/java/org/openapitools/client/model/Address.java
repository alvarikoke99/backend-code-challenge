/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Shipping address.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class Address {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * Gets or Sets streetType
   */
  @JsonAdapter(StreetTypeEnum.Adapter.class)
  public enum StreetTypeEnum {
    ALAMEDA("ALAMEDA"),
    
    APARTAMENTO("APARTAMENTO"),
    
    AVENIDA("AVENIDA"),
    
    BARRIO("BARRIO"),
    
    BLOQUE("BLOQUE"),
    
    CALLE("CALLE"),
    
    CALLEJA("CALLEJA"),
    
    CAMINO("CAMINO"),
    
    CARRER("CARRER"),
    
    CARRETERA("CARRETERA"),
    
    CASERIO("CASERIO"),
    
    CHALET("CHALET"),
    
    COLONIA("COLONIA"),
    
    CUESTA("CUESTA"),
    
    EDIFICIO("EDIFICIO"),
    
    GLORIETA("GLORIETA"),
    
    GRAN_VIA("GRAN_VIA"),
    
    GRUPO("GRUPO"),
    
    KALEA("KALEA"),
    
    LUGAR("LUGAR"),
    
    MANZANA("MANZANA"),
    
    MERCADO("MERCADO"),
    
    MUNICIPIO("MUNICIPIO"),
    
    PARQUE("PARQUE"),
    
    PASAJE("PASAJE"),
    
    PASEO("PASEO"),
    
    PLAZA("PLAZA"),
    
    POBLADO("POBLADO"),
    
    POLIGONO("POLIGONO"),
    
    PROLONGACION("PROLONGACION"),
    
    RAMBLA("RAMBLA"),
    
    RONDA("RONDA"),
    
    RUA("RUA"),
    
    SENDA("SENDA"),
    
    TRAVESIA("TRAVESIA"),
    
    URBANIZACION("URBANIZACION"),
    
    VIA("VIA");

    private String value;

    StreetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreetTypeEnum fromValue(String value) {
      for (StreetTypeEnum b : StreetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREET_TYPE = "streetType";
  @SerializedName(SERIALIZED_NAME_STREET_TYPE)
  private StreetTypeEnum streetType;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_BLOCK = "block";
  @SerializedName(SERIALIZED_NAME_BLOCK)
  private String block;

  public static final String SERIALIZED_NAME_STAIRS = "stairs";
  @SerializedName(SERIALIZED_NAME_STAIRS)
  private String stairs;

  public static final String SERIALIZED_NAME_FLOOR = "floor";
  @SerializedName(SERIALIZED_NAME_FLOOR)
  private String floor;

  public static final String SERIALIZED_NAME_DOOR = "door";
  @SerializedName(SERIALIZED_NAME_DOOR)
  private String door;

  public static final String SERIALIZED_NAME_COMPLEMENT = "complement";
  @SerializedName(SERIALIZED_NAME_COMPLEMENT)
  private String complement;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  /**
   * Gets or Sets province
   */
  @JsonAdapter(ProvinceEnum.Adapter.class)
  public enum ProvinceEnum {
    ALAVA("ALAVA"),
    
    ALBACETE("ALBACETE"),
    
    ALICANTE("ALICANTE"),
    
    ALMERIA("ALMERIA"),
    
    AVILA("AVILA"),
    
    BADAJOZ("BADAJOZ"),
    
    BALEARES("BALEARES"),
    
    BARCELONA("BARCELONA"),
    
    BURGOS("BURGOS"),
    
    CACERES("CACERES"),
    
    CADIZ("CADIZ"),
    
    CASTELLON("CASTELLON"),
    
    CIUDAD_REAL("CIUDAD_REAL"),
    
    CORDOBA("CORDOBA"),
    
    A_CORUNA("A_CORUNA"),
    
    CUENCA("CUENCA"),
    
    GERONA("GERONA"),
    
    GRANADA("GRANADA"),
    
    GUADALAJARA("GUADALAJARA"),
    
    GUIPUZCOA("GUIPUZCOA"),
    
    HUELVA("HUELVA"),
    
    HUESCA("HUESCA"),
    
    JAEN("JAEN"),
    
    LEON("LEON"),
    
    LERIDA("LERIDA"),
    
    LA_RIOJA("LA_RIOJA"),
    
    LUGO("LUGO"),
    
    MADRID("MADRID"),
    
    MALAGA("MALAGA"),
    
    MURCIA("MURCIA"),
    
    NAVARRA("NAVARRA"),
    
    ORENSE("ORENSE"),
    
    ASTURIAS("ASTURIAS"),
    
    PALENCIA("PALENCIA"),
    
    LAS_PALMAS("LAS_PALMAS"),
    
    PONTEVEDRA("PONTEVEDRA"),
    
    SALAMANCA("SALAMANCA"),
    
    SANTA_CRUZ_DE_TENERIFE("SANTA_CRUZ_DE_TENERIFE"),
    
    CANTABRIA("CANTABRIA"),
    
    SEGOVIA("SEGOVIA"),
    
    SEVILLA("SEVILLA"),
    
    SORIA("SORIA"),
    
    TARRAGONA("TARRAGONA"),
    
    TERUEL("TERUEL"),
    
    TOLEDO("TOLEDO"),
    
    VALENCIA("VALENCIA"),
    
    VALLADOLID("VALLADOLID"),
    
    VIZCAYA("VIZCAYA"),
    
    ZAMORA("ZAMORA"),
    
    ZARAGOZA("ZARAGOZA"),
    
    CEUTA("CEUTA"),
    
    MELILLA("MELILLA"),
    
    AVEIRO("AVEIRO"),
    
    BEJA("BEJA"),
    
    BRAGA("BRAGA"),
    
    BRAGANCA("BRAGANCA"),
    
    CASTELO_BRANCO("CASTELO_BRANCO"),
    
    COIMBRA("COIMBRA"),
    
    EVORA("EVORA"),
    
    FARO("FARO"),
    
    GUARDA("GUARDA"),
    
    LEIRIA("LEIRIA"),
    
    LISBOA("LISBOA"),
    
    PORTALEGRE("PORTALEGRE"),
    
    PORTO("PORTO"),
    
    SANTAREM("SANTAREM"),
    
    SETUBAL("SETUBAL"),
    
    VIANA_DO_CASTELO("VIANA_DO_CASTELO"),
    
    VILA_REAL("VILA_REAL"),
    
    VISEU("VISEU"),
    
    ILHA_DA_MADEIRA("ILHA_DA_MADEIRA"),
    
    ILHA_DE_PORTO_SANTO("ILHA_DE_PORTO_SANTO"),
    
    ILHA_DE_SANTA_MARIA("ILHA_DE_SANTA_MARIA"),
    
    ILHA_DE_SAO_MIGUEL("ILHA_DE_SAO_MIGUEL"),
    
    ILHA_TERCEIRA("ILHA_TERCEIRA"),
    
    ILHA_DA_GRACIOSA("ILHA_DA_GRACIOSA"),
    
    ILHA_DE_SAO_JORGE("ILHA_DE_SAO_JORGE"),
    
    ILHA_DO_PICO("ILHA_DO_PICO"),
    
    ILHA_DO_FAIAL("ILHA_DO_FAIAL"),
    
    ILHA_DAS_FLORES("ILHA_DAS_FLORES"),
    
    ILHA_DO_CORVO("ILHA_DO_CORVO"),
    
    AGRIGENTO("AGRIGENTO"),
    
    ALESSANDRIA("ALESSANDRIA"),
    
    ANCONA("ANCONA"),
    
    VALLE_D_AOSTA("VALLE_D_AOSTA"),
    
    AREZZO("AREZZO"),
    
    ASCOLI_PICENO("ASCOLI_PICENO"),
    
    ASTI("ASTI"),
    
    AVELLINO("AVELLINO"),
    
    BARI("BARI"),
    
    BARLETTA_ANDRIA_TRANI("BARLETTA_ANDRIA_TRANI"),
    
    BELLUNO("BELLUNO"),
    
    BENEVENTO("BENEVENTO"),
    
    BERGAMO("BERGAMO"),
    
    BIELLA("BIELLA"),
    
    BOLOGNA("BOLOGNA"),
    
    BOLZANO("BOLZANO"),
    
    BRESCIA("BRESCIA"),
    
    BRINDISI("BRINDISI"),
    
    CAGLIARI("CAGLIARI"),
    
    CALTANISSETTA("CALTANISSETTA"),
    
    CAMPOBASSO("CAMPOBASSO"),
    
    CASERTA("CASERTA"),
    
    CATANIA("CATANIA"),
    
    CATANZARO("CATANZARO"),
    
    CHIETI("CHIETI"),
    
    COMO("COMO"),
    
    COSENZA("COSENZA"),
    
    CREMONA("CREMONA"),
    
    CROTONE("CROTONE"),
    
    CUNEO("CUNEO"),
    
    ENNA("ENNA"),
    
    FERMO("FERMO"),
    
    FERRARA("FERRARA"),
    
    FIRENZE("FIRENZE"),
    
    FOGGIA("FOGGIA"),
    
    FORLI_CESENA("FORLI_CESENA"),
    
    FROSINONE("FROSINONE"),
    
    GENOVA("GENOVA"),
    
    GORIZIA("GORIZIA"),
    
    GROSSETO("GROSSETO"),
    
    IMPERIA("IMPERIA"),
    
    ISERNIA("ISERNIA"),
    
    L_AQUILA("L_AQUILA"),
    
    LA_SPEZIA("LA_SPEZIA"),
    
    LATINA("LATINA"),
    
    LECCE("LECCE"),
    
    LECCO("LECCO"),
    
    LIVORNO("LIVORNO"),
    
    LODI("LODI"),
    
    LUCCA("LUCCA"),
    
    MACERATA("MACERATA"),
    
    MANTOVA("MANTOVA"),
    
    MASSA_CARRARA("MASSA_CARRARA"),
    
    MATERA("MATERA"),
    
    MESSINA("MESSINA"),
    
    MILANO("MILANO"),
    
    MODENA("MODENA"),
    
    MONZA_E_DELLA_BRIANZA("MONZA_E_DELLA_BRIANZA"),
    
    NAPOLI("NAPOLI"),
    
    NOVARA("NOVARA"),
    
    NUORO("NUORO"),
    
    ORISTANO("ORISTANO"),
    
    PADOVA("PADOVA"),
    
    PALERMO("PALERMO"),
    
    PARMA("PARMA"),
    
    PAVIA("PAVIA"),
    
    PERUGIA("PERUGIA"),
    
    PESARO_E_URBINO("PESARO_E_URBINO"),
    
    PESCARA("PESCARA"),
    
    PIACENZA("PIACENZA"),
    
    PISA("PISA"),
    
    PISTOIA("PISTOIA"),
    
    PORDENONE("PORDENONE"),
    
    POTENZA("POTENZA"),
    
    PRATO("PRATO"),
    
    RAGUSA("RAGUSA"),
    
    RAVENNA("RAVENNA"),
    
    REGGIO_CALABRIA("REGGIO_CALABRIA"),
    
    REGGIO_NELL_EMILIA("REGGIO_NELL_EMILIA"),
    
    RIETI("RIETI"),
    
    RIMINI("RIMINI"),
    
    ROMA("ROMA"),
    
    ROVIGO("ROVIGO"),
    
    SALERNO("SALERNO"),
    
    SASSARI("SASSARI"),
    
    SAVONA("SAVONA"),
    
    SIENA("SIENA"),
    
    SIRACUSA("SIRACUSA"),
    
    SONDRIO("SONDRIO"),
    
    SUD_SARDEGNA("SUD_SARDEGNA"),
    
    TARANTO("TARANTO"),
    
    TERAMO("TERAMO"),
    
    TERNI("TERNI"),
    
    TORINO("TORINO"),
    
    TRAPANI("TRAPANI"),
    
    TRENTO("TRENTO"),
    
    TREVISO("TREVISO"),
    
    TRIESTE("TRIESTE"),
    
    UDINE("UDINE"),
    
    VARESE("VARESE"),
    
    VENEZIA("VENEZIA"),
    
    VERBANO_CUSIO_OSSOLA("VERBANO_CUSIO_OSSOLA"),
    
    VERCELLI("VERCELLI"),
    
    VERONA("VERONA"),
    
    VIBO_VALENTIA("VIBO_VALENTIA"),
    
    VICENZA("VICENZA"),
    
    VITERBO("VITERBO"),
    
    AIN("AIN"),
    
    AISNE("AISNE"),
    
    ALLIER("ALLIER"),
    
    ALPES_DE_HAUTE_PROVENCE("ALPES_DE_HAUTE_PROVENCE"),
    
    HAUTES_ALPES("HAUTES_ALPES"),
    
    ALPES_MARITIMES("ALPES_MARITIMES"),
    
    ARDECHE("ARDECHE"),
    
    ARDENNES("ARDENNES"),
    
    ARIEGE("ARIEGE"),
    
    AUBE("AUBE"),
    
    AUDE("AUDE"),
    
    AVEYRON("AVEYRON"),
    
    BOUCHES_DU_RHONE("BOUCHES_DU_RHONE"),
    
    CALVADOS("CALVADOS"),
    
    CANTAL("CANTAL"),
    
    CHARENTE("CHARENTE"),
    
    CHARENTE_MARITIME("CHARENTE_MARITIME"),
    
    CHER("CHER"),
    
    CORREZE("CORREZE"),
    
    CORSE_DU_SUD("CORSE_DU_SUD"),
    
    HAUTE_CORSE("HAUTE_CORSE"),
    
    COTE_D_OR("COTE_D_OR"),
    
    COTES_D_ARMOR("COTES_D_ARMOR"),
    
    CREUSE("CREUSE"),
    
    DORDOGNE("DORDOGNE"),
    
    DOUBS("DOUBS"),
    
    DROME("DROME"),
    
    EURE("EURE"),
    
    EURE_ET_LOIR("EURE_ET_LOIR"),
    
    FINISTERE("FINISTERE"),
    
    GARD("GARD"),
    
    HAUTE_GARONNE("HAUTE_GARONNE"),
    
    GERS("GERS"),
    
    GIRONDE("GIRONDE"),
    
    HERAULT("HERAULT"),
    
    ILLE_ET_VILAINE("ILLE_ET_VILAINE"),
    
    INDRE("INDRE"),
    
    INDRE_ET_LOIRE("INDRE_ET_LOIRE"),
    
    ISERE("ISERE"),
    
    JURA("JURA"),
    
    LANDES("LANDES"),
    
    LOIR_ET_CHER("LOIR_ET_CHER"),
    
    LOIRE("LOIRE"),
    
    HAUTE_LOIRE("HAUTE_LOIRE"),
    
    LOIRE_ATLANTIQUE("LOIRE_ATLANTIQUE"),
    
    LOIRET("LOIRET"),
    
    LOT("LOT"),
    
    LOT_ET_GARONNE("LOT_ET_GARONNE"),
    
    LOZERE("LOZERE"),
    
    MAINE_ET_LOIRE("MAINE_ET_LOIRE"),
    
    MANCHE("MANCHE"),
    
    MARNE("MARNE"),
    
    HAUTE_MARNE("HAUTE_MARNE"),
    
    MAYENNE("MAYENNE"),
    
    MEURTHE_ET_MOSELLE("MEURTHE_ET_MOSELLE"),
    
    MEUSE("MEUSE"),
    
    MORBIHAN("MORBIHAN"),
    
    MOSELLE("MOSELLE"),
    
    NIEVRE("NIEVRE"),
    
    NORD("NORD"),
    
    OISE("OISE"),
    
    ORNE("ORNE"),
    
    PAS_DE_CALAIS("PAS_DE_CALAIS"),
    
    PUY_DE_DOME("PUY_DE_DOME"),
    
    PYRENEES_ATLANTIQUES("PYRENEES_ATLANTIQUES"),
    
    HAUTES_PYRENEES("HAUTES_PYRENEES"),
    
    PYRENEES_ORIENTALES("PYRENEES_ORIENTALES"),
    
    BAS_RHIN("BAS_RHIN"),
    
    HAUT_RHIN("HAUT_RHIN"),
    
    RHONE("RHONE"),
    
    LYON_METROPOLIS("LYON_METROPOLIS"),
    
    HAUTE_SAONE("HAUTE_SAONE"),
    
    SAONE_ET_LOIRE("SAONE_ET_LOIRE"),
    
    SARTHE("SARTHE"),
    
    SAVOIE("SAVOIE"),
    
    HAUTE_SAVOIE("HAUTE_SAVOIE"),
    
    PARIS("PARIS"),
    
    SEINE_MARITIME("SEINE_MARITIME"),
    
    SEINE_ET_MARNE("SEINE_ET_MARNE"),
    
    YVELINES("YVELINES"),
    
    DEUX_SEVRES("DEUX_SEVRES"),
    
    SOMME("SOMME"),
    
    TARN("TARN"),
    
    TARN_ET_GARONNE("TARN_ET_GARONNE"),
    
    VAR("VAR"),
    
    VAUCLUSE("VAUCLUSE"),
    
    VENDEE("VENDEE"),
    
    VIENNE("VIENNE"),
    
    HAUTE_VIENNE("HAUTE_VIENNE"),
    
    VOSGES("VOSGES"),
    
    YONNE("YONNE"),
    
    TERRITOIRE_DE_BELFORT("TERRITOIRE_DE_BELFORT"),
    
    ESSONNE("ESSONNE"),
    
    HAUTS_DE_SEINE("HAUTS_DE_SEINE"),
    
    SEINE_SAINT_DENIS("SEINE_SAINT_DENIS"),
    
    VAL_DE_MARNE("VAL_DE_MARNE"),
    
    VAL_D_OISE("VAL_D_OISE"),
    
    GUADELOUPE("GUADELOUPE"),
    
    MARTINIQUE("MARTINIQUE"),
    
    GUYANE("GUYANE"),
    
    LA_REUNION("LA_REUNION"),
    
    SAINT_PIERRE_ET_MIQUELON("SAINT_PIERRE_ET_MIQUELON"),
    
    MAYOTTE("MAYOTTE"),
    
    SAINT_BARTHELEMY("SAINT_BARTHELEMY"),
    
    SAINT_MARTIN("SAINT_MARTIN"),
    
    TERRES_AUSTRALES_ET_ANTARCTIQUES_FRANCAISES("TERRES_AUSTRALES_ET_ANTARCTIQUES_FRANCAISES"),
    
    WALLIS_ET_FUTUNA("WALLIS_ET_FUTUNA"),
    
    POLYNESIE_FRANCAISE("POLYNESIE_FRANCAISE"),
    
    NOUVELLE_CALEDONIE("NOUVELLE_CALEDONIE"),
    
    ILE_DE_CLIPPERTON("ILE_DE_CLIPPERTON"),
    
    MONACO("MONACO");

    private String value;

    ProvinceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvinceEnum fromValue(String value) {
      for (ProvinceEnum b : ProvinceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvinceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvinceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvinceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvinceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvinceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVINCE = "province";
  @SerializedName(SERIALIZED_NAME_PROVINCE)
  private ProvinceEnum province;

  public static final String SERIALIZED_NAME_CITY_CODE = "cityCode";
  @SerializedName(SERIALIZED_NAME_CITY_CODE)
  private String cityCode;

  public static final String SERIALIZED_NAME_LOCALITY_CODE = "localityCode";
  @SerializedName(SERIALIZED_NAME_LOCALITY_CODE)
  private String localityCode;

  public static final String SERIALIZED_NAME_COUNTRY_ISO = "countryIso";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO)
  private String countryIso;

  public static final String SERIALIZED_NAME_FULL_ADDRESS = "fullAddress";
  @SerializedName(SERIALIZED_NAME_FULL_ADDRESS)
  private String fullAddress;

  public static final String SERIALIZED_NAME_LINE1 = "line1";
  @SerializedName(SERIALIZED_NAME_LINE1)
  private String line1;

  public static final String SERIALIZED_NAME_LINE2 = "line2";
  @SerializedName(SERIALIZED_NAME_LINE2)
  private String line2;

  public static final String SERIALIZED_NAME_CITY_NAME = "cityName";
  @SerializedName(SERIALIZED_NAME_CITY_NAME)
  private String cityName;

  public static final String SERIALIZED_NAME_PROVINCE_NAME = "provinceName";
  @SerializedName(SERIALIZED_NAME_PROVINCE_NAME)
  private String provinceName;

  public Address() {
  }

  public Address id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public Address streetType(StreetTypeEnum streetType) {
    this.streetType = streetType;
    return this;
  }

  /**
   * Get streetType
   * @return streetType
   */
  @javax.annotation.Nullable
  public StreetTypeEnum getStreetType() {
    return streetType;
  }

  public void setStreetType(StreetTypeEnum streetType) {
    this.streetType = streetType;
  }


  public Address street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Get street
   * @return street
   */
  @javax.annotation.Nullable
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public Address number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public Address block(String block) {
    this.block = block;
    return this;
  }

  /**
   * Get block
   * @return block
   */
  @javax.annotation.Nullable
  public String getBlock() {
    return block;
  }

  public void setBlock(String block) {
    this.block = block;
  }


  public Address stairs(String stairs) {
    this.stairs = stairs;
    return this;
  }

  /**
   * Get stairs
   * @return stairs
   */
  @javax.annotation.Nullable
  public String getStairs() {
    return stairs;
  }

  public void setStairs(String stairs) {
    this.stairs = stairs;
  }


  public Address floor(String floor) {
    this.floor = floor;
    return this;
  }

  /**
   * Get floor
   * @return floor
   */
  @javax.annotation.Nullable
  public String getFloor() {
    return floor;
  }

  public void setFloor(String floor) {
    this.floor = floor;
  }


  public Address door(String door) {
    this.door = door;
    return this;
  }

  /**
   * Get door
   * @return door
   */
  @javax.annotation.Nullable
  public String getDoor() {
    return door;
  }

  public void setDoor(String door) {
    this.door = door;
  }


  public Address complement(String complement) {
    this.complement = complement;
    return this;
  }

  /**
   * Get complement
   * @return complement
   */
  @javax.annotation.Nullable
  public String getComplement() {
    return complement;
  }

  public void setComplement(String complement) {
    this.complement = complement;
  }


  public Address postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public Address province(ProvinceEnum province) {
    this.province = province;
    return this;
  }

  /**
   * Get province
   * @return province
   */
  @javax.annotation.Nullable
  public ProvinceEnum getProvince() {
    return province;
  }

  public void setProvince(ProvinceEnum province) {
    this.province = province;
  }


  public Address cityCode(String cityCode) {
    this.cityCode = cityCode;
    return this;
  }

  /**
   * The INE (Instituto Nacional de Estadística) code of the city.
   * @return cityCode
   */
  @javax.annotation.Nullable
  public String getCityCode() {
    return cityCode;
  }

  public void setCityCode(String cityCode) {
    this.cityCode = cityCode;
  }


  public Address localityCode(String localityCode) {
    this.localityCode = localityCode;
    return this;
  }

  /**
   * The INE (Instituto Nacional de Estadística) code of the locality.
   * @return localityCode
   */
  @javax.annotation.Nullable
  public String getLocalityCode() {
    return localityCode;
  }

  public void setLocalityCode(String localityCode) {
    this.localityCode = localityCode;
  }


  public Address countryIso(String countryIso) {
    this.countryIso = countryIso;
    return this;
  }

  /**
   * The ISO 3166-1 alpha-2 country code.
   * @return countryIso
   */
  @javax.annotation.Nullable
  public String getCountryIso() {
    return countryIso;
  }

  public void setCountryIso(String countryIso) {
    this.countryIso = countryIso;
  }


  public Address fullAddress(String fullAddress) {
    this.fullAddress = fullAddress;
    return this;
  }

  /**
   * Optional field, use this field when you store the whole address as a string instead of multiple fields.
   * @return fullAddress
   */
  @javax.annotation.Nullable
  public String getFullAddress() {
    return fullAddress;
  }

  public void setFullAddress(String fullAddress) {
    this.fullAddress = fullAddress;
  }


  public Address line1(String line1) {
    this.line1 = line1;
    return this;
  }

  /**
   * Address line 1.
   * @return line1
   */
  @javax.annotation.Nullable
  public String getLine1() {
    return line1;
  }

  public void setLine1(String line1) {
    this.line1 = line1;
  }


  public Address line2(String line2) {
    this.line2 = line2;
    return this;
  }

  /**
   * Address line 2.
   * @return line2
   */
  @javax.annotation.Nullable
  public String getLine2() {
    return line2;
  }

  public void setLine2(String line2) {
    this.line2 = line2;
  }


  public Address cityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  /**
   * Name of the city.
   * @return cityName
   */
  @javax.annotation.Nullable
  public String getCityName() {
    return cityName;
  }

  public void setCityName(String cityName) {
    this.cityName = cityName;
  }


  public Address provinceName(String provinceName) {
    this.provinceName = provinceName;
    return this;
  }

  /**
   * Name of the province/state.
   * @return provinceName
   */
  @javax.annotation.Nullable
  public String getProvinceName() {
    return provinceName;
  }

  public void setProvinceName(String provinceName) {
    this.provinceName = provinceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Address address = (Address) o;
    return Objects.equals(this.id, address.id) &&
        Objects.equals(this.streetType, address.streetType) &&
        Objects.equals(this.street, address.street) &&
        Objects.equals(this.number, address.number) &&
        Objects.equals(this.block, address.block) &&
        Objects.equals(this.stairs, address.stairs) &&
        Objects.equals(this.floor, address.floor) &&
        Objects.equals(this.door, address.door) &&
        Objects.equals(this.complement, address.complement) &&
        Objects.equals(this.postalCode, address.postalCode) &&
        Objects.equals(this.province, address.province) &&
        Objects.equals(this.cityCode, address.cityCode) &&
        Objects.equals(this.localityCode, address.localityCode) &&
        Objects.equals(this.countryIso, address.countryIso) &&
        Objects.equals(this.fullAddress, address.fullAddress) &&
        Objects.equals(this.line1, address.line1) &&
        Objects.equals(this.line2, address.line2) &&
        Objects.equals(this.cityName, address.cityName) &&
        Objects.equals(this.provinceName, address.provinceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, streetType, street, number, block, stairs, floor, door, complement, postalCode, province, cityCode, localityCode, countryIso, fullAddress, line1, line2, cityName, provinceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Address {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    streetType: ").append(toIndentedString(streetType)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    stairs: ").append(toIndentedString(stairs)).append("\n");
    sb.append("    floor: ").append(toIndentedString(floor)).append("\n");
    sb.append("    door: ").append(toIndentedString(door)).append("\n");
    sb.append("    complement: ").append(toIndentedString(complement)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("    cityCode: ").append(toIndentedString(cityCode)).append("\n");
    sb.append("    localityCode: ").append(toIndentedString(localityCode)).append("\n");
    sb.append("    countryIso: ").append(toIndentedString(countryIso)).append("\n");
    sb.append("    fullAddress: ").append(toIndentedString(fullAddress)).append("\n");
    sb.append("    line1: ").append(toIndentedString(line1)).append("\n");
    sb.append("    line2: ").append(toIndentedString(line2)).append("\n");
    sb.append("    cityName: ").append(toIndentedString(cityName)).append("\n");
    sb.append("    provinceName: ").append(toIndentedString(provinceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("streetType");
    openapiFields.add("street");
    openapiFields.add("number");
    openapiFields.add("block");
    openapiFields.add("stairs");
    openapiFields.add("floor");
    openapiFields.add("door");
    openapiFields.add("complement");
    openapiFields.add("postalCode");
    openapiFields.add("province");
    openapiFields.add("cityCode");
    openapiFields.add("localityCode");
    openapiFields.add("countryIso");
    openapiFields.add("fullAddress");
    openapiFields.add("line1");
    openapiFields.add("line2");
    openapiFields.add("cityName");
    openapiFields.add("provinceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Address
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Address.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Address is not found in the empty JSON string", Address.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Address.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Address` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("streetType") != null && !jsonObj.get("streetType").isJsonNull()) && !jsonObj.get("streetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetType").toString()));
      }
      // validate the optional field `streetType`
      if (jsonObj.get("streetType") != null && !jsonObj.get("streetType").isJsonNull()) {
        StreetTypeEnum.validateJsonElement(jsonObj.get("streetType"));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("block") != null && !jsonObj.get("block").isJsonNull()) && !jsonObj.get("block").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block").toString()));
      }
      if ((jsonObj.get("stairs") != null && !jsonObj.get("stairs").isJsonNull()) && !jsonObj.get("stairs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stairs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stairs").toString()));
      }
      if ((jsonObj.get("floor") != null && !jsonObj.get("floor").isJsonNull()) && !jsonObj.get("floor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floor").toString()));
      }
      if ((jsonObj.get("door") != null && !jsonObj.get("door").isJsonNull()) && !jsonObj.get("door").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `door` to be a primitive type in the JSON string but got `%s`", jsonObj.get("door").toString()));
      }
      if ((jsonObj.get("complement") != null && !jsonObj.get("complement").isJsonNull()) && !jsonObj.get("complement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complement").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("province") != null && !jsonObj.get("province").isJsonNull()) && !jsonObj.get("province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("province").toString()));
      }
      // validate the optional field `province`
      if (jsonObj.get("province") != null && !jsonObj.get("province").isJsonNull()) {
        ProvinceEnum.validateJsonElement(jsonObj.get("province"));
      }
      if ((jsonObj.get("cityCode") != null && !jsonObj.get("cityCode").isJsonNull()) && !jsonObj.get("cityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityCode").toString()));
      }
      if ((jsonObj.get("localityCode") != null && !jsonObj.get("localityCode").isJsonNull()) && !jsonObj.get("localityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localityCode").toString()));
      }
      if ((jsonObj.get("countryIso") != null && !jsonObj.get("countryIso").isJsonNull()) && !jsonObj.get("countryIso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryIso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryIso").toString()));
      }
      if ((jsonObj.get("fullAddress") != null && !jsonObj.get("fullAddress").isJsonNull()) && !jsonObj.get("fullAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullAddress").toString()));
      }
      if ((jsonObj.get("line1") != null && !jsonObj.get("line1").isJsonNull()) && !jsonObj.get("line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line1").toString()));
      }
      if ((jsonObj.get("line2") != null && !jsonObj.get("line2").isJsonNull()) && !jsonObj.get("line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line2").toString()));
      }
      if ((jsonObj.get("cityName") != null && !jsonObj.get("cityName").isJsonNull()) && !jsonObj.get("cityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityName").toString()));
      }
      if ((jsonObj.get("provinceName") != null && !jsonObj.get("provinceName").isJsonNull()) && !jsonObj.get("provinceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provinceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provinceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Address.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Address' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Address> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Address.class));

       return (TypeAdapter<T>) new TypeAdapter<Address>() {
           @Override
           public void write(JsonWriter out, Address value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Address read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Address given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Address
   * @throws IOException if the JSON string is invalid with respect to Address
   */
  public static Address fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Address.class);
  }

  /**
   * Convert an instance of Address to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

