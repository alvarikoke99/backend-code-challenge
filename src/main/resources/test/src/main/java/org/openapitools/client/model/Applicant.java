/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.Address;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the person that is going to apply for a loan.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class Applicant {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * The role the applicant has in the loan application
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    MAIN_APPLICANT("MAIN_APPLICANT"),
    
    COAPPLICANT("COAPPLICANT"),
    
    GUARANTOR("GUARANTOR");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  /**
   * The relationship this applicant has with the MAIN_APPLICANT. Should be specified only when the role is not MAIN_APPLICANT. If it&#39;s specified when the role is MAIN applicant a validation error will be thrown
   */
  @JsonAdapter(RelationshipEnum.Adapter.class)
  public enum RelationshipEnum {
    SPOUSE("SPOUSE"),
    
    PARTNER("PARTNER"),
    
    SON_OR_DAUGHTER("SON_OR_DAUGHTER"),
    
    PARENT("PARENT"),
    
    SIBLING("SIBLING"),
    
    SECOND_DEGREE("SECOND_DEGREE"),
    
    OTHER_FAMILY("OTHER_FAMILY"),
    
    NO_RELATION("NO_RELATION");

    private String value;

    RelationshipEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelationshipEnum fromValue(String value) {
      for (RelationshipEnum b : RelationshipEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelationshipEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationshipEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationshipEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelationshipEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelationshipEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIONSHIP = "relationship";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP)
  private RelationshipEnum relationship;

  /**
   * The type of the identification document
   */
  @JsonAdapter(DocIdTypeEnum.Adapter.class)
  public enum DocIdTypeEnum {
    NATIONAL_ID("NATIONAL_ID"),
    
    TEMPORARY_RESIDENT("TEMPORARY_RESIDENT"),
    
    PERMANENT_RESIDENT("PERMANENT_RESIDENT"),
    
    CIF("CIF"),
    
    EU_RESIDENCE_CARD("EU_RESIDENCE_CARD"),
    
    ARMY_CARD("ARMY_CARD"),
    
    AIR_FORCE_CARD("AIR_FORCE_CARD"),
    
    GENDARMERIE_CARD("GENDARMERIE_CARD"),
    
    NAVY_CARD("NAVY_CARD"),
    
    POLICE_CARD("POLICE_CARD"),
    
    CIVIL_CARD("CIVIL_CARD"),
    
    CITIZEN_CARD("CITIZEN_CARD"),
    
    PORTO_SEGURO_TREATY_CARD("PORTO_SEGURO_TREATY_CARD"),
    
    CPLP_RESIDENCE_PERMIT("CPLP_RESIDENCE_PERMIT"),
    
    PASSPORT("PASSPORT"),
    
    DRIVING_LICENCE("DRIVING_LICENCE");

    private String value;

    DocIdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocIdTypeEnum fromValue(String value) {
      for (DocIdTypeEnum b : DocIdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocIdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocIdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocIdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocIdTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocIdTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOC_ID_TYPE = "docIdType";
  @SerializedName(SERIALIZED_NAME_DOC_ID_TYPE)
  private DocIdTypeEnum docIdType;

  /**
   * The type of the second identification document (only available in some countries such as Portugal)
   */
  @JsonAdapter(DocIdType2Enum.Adapter.class)
  public enum DocIdType2Enum {
    NATIONAL_ID("NATIONAL_ID"),
    
    TEMPORARY_RESIDENT("TEMPORARY_RESIDENT"),
    
    PERMANENT_RESIDENT("PERMANENT_RESIDENT"),
    
    CIF("CIF"),
    
    EU_RESIDENCE_CARD("EU_RESIDENCE_CARD"),
    
    ARMY_CARD("ARMY_CARD"),
    
    AIR_FORCE_CARD("AIR_FORCE_CARD"),
    
    GENDARMERIE_CARD("GENDARMERIE_CARD"),
    
    NAVY_CARD("NAVY_CARD"),
    
    POLICE_CARD("POLICE_CARD"),
    
    CIVIL_CARD("CIVIL_CARD"),
    
    CITIZEN_CARD("CITIZEN_CARD"),
    
    PORTO_SEGURO_TREATY_CARD("PORTO_SEGURO_TREATY_CARD"),
    
    CPLP_RESIDENCE_PERMIT("CPLP_RESIDENCE_PERMIT"),
    
    PASSPORT("PASSPORT"),
    
    DRIVING_LICENCE("DRIVING_LICENCE");

    private String value;

    DocIdType2Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocIdType2Enum fromValue(String value) {
      for (DocIdType2Enum b : DocIdType2Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocIdType2Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocIdType2Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocIdType2Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocIdType2Enum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocIdType2Enum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOC_ID_TYPE2 = "docIdType2";
  @SerializedName(SERIALIZED_NAME_DOC_ID_TYPE2)
  private DocIdType2Enum docIdType2;

  public static final String SERIALIZED_NAME_DOC_ID_NUMBER = "docIdNumber";
  @SerializedName(SERIALIZED_NAME_DOC_ID_NUMBER)
  private String docIdNumber;

  public static final String SERIALIZED_NAME_DOC_ID_NUMBER2 = "docIdNumber2";
  @SerializedName(SERIALIZED_NAME_DOC_ID_NUMBER2)
  private String docIdNumber2;

  public static final String SERIALIZED_NAME_DOC_ID_EXPIRATION_DATE = "docIdExpirationDate";
  @SerializedName(SERIALIZED_NAME_DOC_ID_EXPIRATION_DATE)
  private LocalDate docIdExpirationDate;

  public static final String SERIALIZED_NAME_DRIVING_LICENCE_ISSUANCE_DATE = "drivingLicenceIssuanceDate";
  @SerializedName(SERIALIZED_NAME_DRIVING_LICENCE_ISSUANCE_DATE)
  private LocalDate drivingLicenceIssuanceDate;

  /**
   * The applicant&#39;s title
   */
  @JsonAdapter(TitleEnum.Adapter.class)
  public enum TitleEnum {
    SR_SRA("SR_SRA"),
    
    DR_DRA("DR_DRA"),
    
    ENG("ENG"),
    
    ARQ("ARQ"),
    
    PRF("PRF");

    private String value;

    TitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TitleEnum fromValue(String value) {
      for (TitleEnum b : TitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TitleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TitleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private TitleEnum title;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_SURNAME1 = "surname1";
  @SerializedName(SERIALIZED_NAME_SURNAME1)
  private String surname1;

  public static final String SERIALIZED_NAME_SURNAME2 = "surname2";
  @SerializedName(SERIALIZED_NAME_SURNAME2)
  private String surname2;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private LocalDate birthDate;

  public static final String SERIALIZED_NAME_NATIONALITY_ISO = "nationalityIso";
  @SerializedName(SERIALIZED_NAME_NATIONALITY_ISO)
  private String nationalityIso;

  public static final String SERIALIZED_NAME_NATIONALITY2_ISO = "nationality2Iso";
  @SerializedName(SERIALIZED_NAME_NATIONALITY2_ISO)
  private String nationality2Iso;

  /**
   * The payment method to be used
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
  public enum PaymentMethodEnum {
    CCC("CCC"),
    
    CREDIT_CARD("CREDIT_CARD");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "cardNumber";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_CREATION_DATE = "accountCreationDate";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CREATION_DATE)
  private LocalDate accountCreationDate;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_SOCIAL_SECURITY_NUMBER = "socialSecurityNumber";
  @SerializedName(SERIALIZED_NAME_SOCIAL_SECURITY_NUMBER)
  private String socialSecurityNumber;

  /**
   * Gets or Sets phoneType1
   */
  @JsonAdapter(PhoneType1Enum.Adapter.class)
  public enum PhoneType1Enum {
    LANDLINE("LANDLINE"),
    
    MOBILE("MOBILE");

    private String value;

    PhoneType1Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneType1Enum fromValue(String value) {
      for (PhoneType1Enum b : PhoneType1Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneType1Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneType1Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneType1Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneType1Enum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhoneType1Enum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHONE_TYPE1 = "phoneType1";
  @SerializedName(SERIALIZED_NAME_PHONE_TYPE1)
  private PhoneType1Enum phoneType1;

  public static final String SERIALIZED_NAME_PHONE1 = "phone1";
  @SerializedName(SERIALIZED_NAME_PHONE1)
  private String phone1;

  /**
   * Gets or Sets phoneType2
   */
  @JsonAdapter(PhoneType2Enum.Adapter.class)
  public enum PhoneType2Enum {
    LANDLINE("LANDLINE"),
    
    MOBILE("MOBILE");

    private String value;

    PhoneType2Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneType2Enum fromValue(String value) {
      for (PhoneType2Enum b : PhoneType2Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneType2Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneType2Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneType2Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneType2Enum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhoneType2Enum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHONE_TYPE2 = "phoneType2";
  @SerializedName(SERIALIZED_NAME_PHONE_TYPE2)
  private PhoneType2Enum phoneType2;

  public static final String SERIALIZED_NAME_PHONE2 = "phone2";
  @SerializedName(SERIALIZED_NAME_PHONE2)
  private String phone2;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_RESIDENCY_START_DATE = "residencyStartDate";
  @SerializedName(SERIALIZED_NAME_RESIDENCY_START_DATE)
  private LocalDate residencyStartDate;

  public static final String SERIALIZED_NAME_RESIDENCY_END_DATE = "residencyEndDate";
  @SerializedName(SERIALIZED_NAME_RESIDENCY_END_DATE)
  private LocalDate residencyEndDate;

  public static final String SERIALIZED_NAME_NATIVE_ADDRESS = "nativeAddress";
  @SerializedName(SERIALIZED_NAME_NATIVE_ADDRESS)
  private Address nativeAddress;

  /**
   * Gets or Sets gender
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    MALE("MALE"),
    
    FEMALE("FEMALE");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  /**
   * Gets or Sets maritalStatus
   */
  @JsonAdapter(MaritalStatusEnum.Adapter.class)
  public enum MaritalStatusEnum {
    SINGLE("SINGLE"),
    
    PARTNERSHIP("PARTNERSHIP"),
    
    MARRIED_COMMUNITY("MARRIED_COMMUNITY"),
    
    MARRIED_SEPARATION("MARRIED_SEPARATION"),
    
    SEPARATED("SEPARATED"),
    
    DIVORCED("DIVORCED"),
    
    WIDOWED("WIDOWED");

    private String value;

    MaritalStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaritalStatusEnum fromValue(String value) {
      for (MaritalStatusEnum b : MaritalStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaritalStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaritalStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaritalStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaritalStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaritalStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MARITAL_STATUS = "maritalStatus";
  @SerializedName(SERIALIZED_NAME_MARITAL_STATUS)
  private MaritalStatusEnum maritalStatus;

  public static final String SERIALIZED_NAME_DEPENDENT = "dependent";
  @SerializedName(SERIALIZED_NAME_DEPENDENT)
  private Integer dependent;

  /**
   * Type of property ownership / tenure of the house where the applicant lives
   */
  @JsonAdapter(HousingTenureTypeEnum.Adapter.class)
  public enum HousingTenureTypeEnum {
    OWN_MORTGAGE("OWN_MORTGAGE"),
    
    OWN_OUTRIGHT("OWN_OUTRIGHT"),
    
    RENTED("RENTED"),
    
    PARENTS("PARENTS"),
    
    SPOUSE("SPOUSE"),
    
    OTHER_RELATIVES("OTHER_RELATIVES"),
    
    EMPLOYER("EMPLOYER"),
    
    LEASE_TO_OWN("LEASE_TO_OWN"),
    
    USUFRUCT("USUFRUCT"),
    
    RENTED_ROOM("RENTED_ROOM"),
    
    RESIDENT_ABROAD("RESIDENT_ABROAD"),
    
    OTHER("OTHER");

    private String value;

    HousingTenureTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HousingTenureTypeEnum fromValue(String value) {
      for (HousingTenureTypeEnum b : HousingTenureTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HousingTenureTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HousingTenureTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HousingTenureTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HousingTenureTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HousingTenureTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOUSING_TENURE_TYPE = "housingTenureType";
  @SerializedName(SERIALIZED_NAME_HOUSING_TENURE_TYPE)
  private HousingTenureTypeEnum housingTenureType;

  public static final String SERIALIZED_NAME_HOUSING_TENURE_START_DATE = "housingTenureStartDate";
  @SerializedName(SERIALIZED_NAME_HOUSING_TENURE_START_DATE)
  private LocalDate housingTenureStartDate;

  public static final String SERIALIZED_NAME_HOUSING_EXPENSES = "housingExpenses";
  @SerializedName(SERIALIZED_NAME_HOUSING_EXPENSES)
  private String housingExpenses;

  public static final String SERIALIZED_NAME_OTHER_EXPENSES = "otherExpenses";
  @SerializedName(SERIALIZED_NAME_OTHER_EXPENSES)
  private String otherExpenses;

  /**
   * The applicant&#39;s occupation type
   */
  @JsonAdapter(OccupationTypeEnum.Adapter.class)
  public enum OccupationTypeEnum {
    PUBLIC_EMPLOYEE("PUBLIC_EMPLOYEE"),
    
    PRIVATE_EMPLOYEE("PRIVATE_EMPLOYEE"),
    
    SELF_EMPLOYED("SELF_EMPLOYED"),
    
    INACTIVE("INACTIVE");

    private String value;

    OccupationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OccupationTypeEnum fromValue(String value) {
      for (OccupationTypeEnum b : OccupationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OccupationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OccupationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OccupationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OccupationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OccupationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OCCUPATION_TYPE = "occupationType";
  @SerializedName(SERIALIZED_NAME_OCCUPATION_TYPE)
  private OccupationTypeEnum occupationType;

  /**
   * The specific occupation the applicant has
   */
  @JsonAdapter(OccupationEnum.Adapter.class)
  public enum OccupationEnum {
    PERMANENT_CIVIL_SERVANT("PERMANENT_CIVIL_SERVANT"),
    
    TEMPORARY_UNDETERMINED_CIVIL_SERVANT("TEMPORARY_UNDETERMINED_CIVIL_SERVANT"),
    
    TEMPORARY_CIVIL_SERVANT("TEMPORARY_CIVIL_SERVANT"),
    
    PERMANENT_NON_CAREER("PERMANENT_NON_CAREER"),
    
    TEMPORARY_NON_CAREER("TEMPORARY_NON_CAREER"),
    
    TEMPORARY_AGENCY_CIVIL_SERVANT("TEMPORARY_AGENCY_CIVIL_SERVANT"),
    
    PERMANENT("PERMANENT"),
    
    TEMPORARY_UNDETERMINED("TEMPORARY_UNDETERMINED"),
    
    TEMPORARY("TEMPORARY"),
    
    TEMPORARY_AGENCY("TEMPORARY_AGENCY"),
    
    PERMANENT_SEASONAL("PERMANENT_SEASONAL"),
    
    SERVICE_CONTRACT("SERVICE_CONTRACT"),
    
    APPRENTICESHIP("APPRENTICESHIP"),
    
    INTERN("INTERN"),
    
    FREELANCE("FREELANCE"),
    
    LIBERAL_PROFESSIONAL("LIBERAL_PROFESSIONAL"),
    
    COMPANY_OWNER("COMPANY_OWNER"),
    
    RETIREMENT_PENSION("RETIREMENT_PENSION"),
    
    TEMPORARY_DISABILITY_PENSION("TEMPORARY_DISABILITY_PENSION"),
    
    PERMANENT_DISABILITY_PENSION("PERMANENT_DISABILITY_PENSION"),
    
    ORPHANHOOD_PENSION("ORPHANHOOD_PENSION"),
    
    SURVIVOR_PENSION("SURVIVOR_PENSION"),
    
    OTHER_PENSION("OTHER_PENSION"),
    
    HOUSEWIFE("HOUSEWIFE"),
    
    UNEMPLOYED("UNEMPLOYED"),
    
    STUDENT("STUDENT"),
    
    RENTIER("RENTIER"),
    
    OTHER("OTHER");

    private String value;

    OccupationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OccupationEnum fromValue(String value) {
      for (OccupationEnum b : OccupationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OccupationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OccupationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OccupationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OccupationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OccupationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OCCUPATION = "occupation";
  @SerializedName(SERIALIZED_NAME_OCCUPATION)
  private OccupationEnum occupation;

  /**
   * If the applicant is a salaried employee, the applicant&#39;s profession
   */
  @JsonAdapter(ProfessionEnum.Adapter.class)
  public enum ProfessionEnum {
    ATTORNEY("ATTORNEY"),
    
    ADMINISTRATOR("ADMINISTRATOR"),
    
    FARMER("FARMER"),
    
    ARCHITECT("ARCHITECT"),
    
    ARTIST("ARTIST"),
    
    WAITER("WAITER"),
    
    CHEF("CHEF"),
    
    AGENT("AGENT"),
    
    CONCIERGE("CONCIERGE"),
    
    CONSULTANT("CONSULTANT"),
    
    ACCOUNTANT("ACCOUNTANT"),
    
    DRAFTSMAN("DRAFTSMAN"),
    
    DENTIST("DENTIST"),
    
    SHOP_ASSISTANT("SHOP_ASSISTANT"),
    
    SPORTSMAN("SPORTSMAN"),
    
    DIPLOMATIC("DIPLOMATIC"),
    
    ECONOMIST("ECONOMIST"),
    
    ELECTRICAL_TECHNICIAN("ELECTRICAL_TECHNICIAN"),
    
    TIPPED_EMPLOYEE("TIPPED_EMPLOYEE"),
    
    BANKING_CLERK("BANKING_CLERK"),
    
    NURSE("NURSE"),
    
    WRITER("WRITER"),
    
    STATISCIAN_OR_MATHEMATICIAN("STATISCIAN_OR_MATHEMATICIAN"),
    
    PHARMACIST("PHARMACIST"),
    
    PLUMBER("PLUMBER"),
    
    PRISONS_OFFICIAL("PRISONS_OFFICIAL"),
    
    COMPUTER_ENGINEER("COMPUTER_ENGINEER"),
    
    ENGINEER("ENGINEER"),
    
    INVESTIGATOR("INVESTIGATOR"),
    
    CLEANING("CLEANING"),
    
    SAILOR("SAILOR"),
    
    DOCTOR("DOCTOR"),
    
    MILITARY("MILITARY"),
    
    WORKER("WORKER"),
    
    JOURNALIST("JOURNALIST"),
    
    PRIVATE_SECURITY("PRIVATE_SECURITY"),
    
    PAINTER("PAINTER"),
    
    POLICE("POLICE"),
    
    TEACHER("TEACHER"),
    
    RELIGIOUS("RELIGIOUS"),
    
    PERSONAL_ASSISTANT("PERSONAL_ASSISTANT"),
    
    CARRIER("CARRIER"),
    
    SALES_REP("SALES_REP"),
    
    ONCE_SALESMAN("ONCE_SALESMAN"),
    
    VET("VET"),
    
    OTHER_TECHNICIANS("OTHER_TECHNICIANS"),
    
    OTHER_UNSKILLED("OTHER_UNSKILLED");

    private String value;

    ProfessionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProfessionEnum fromValue(String value) {
      for (ProfessionEnum b : ProfessionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProfessionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProfessionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProfessionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProfessionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProfessionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROFESSION = "profession";
  @SerializedName(SERIALIZED_NAME_PROFESSION)
  private ProfessionEnum profession;

  /**
   * If the applicant is a salaried employee, the applicant&#39;s job title / level of responsibility
   */
  @JsonAdapter(JobTitleEnum.Adapter.class)
  public enum JobTitleEnum {
    SENIOR_MANAGER("SENIOR_MANAGER"),
    
    MANAGER("MANAGER"),
    
    MIDDLE_MANAGEMENT("MIDDLE_MANAGEMENT"),
    
    ADVANCED_TECHNICIAN("ADVANCED_TECHNICIAN"),
    
    TECHNICIAN("TECHNICIAN"),
    
    OFFICE_CLERK("OFFICE_CLERK"),
    
    SUPERVISOR("SUPERVISOR"),
    
    SKILLED_WORKER("SKILLED_WORKER"),
    
    UNSKILLED_WORKER("UNSKILLED_WORKER"),
    
    CONSTRUCTION_WORKER("CONSTRUCTION_WORKER"),
    
    SALESMAN("SALESMAN"),
    
    COMMISSION_AGENT("COMMISSION_AGENT");

    private String value;

    JobTitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobTitleEnum fromValue(String value) {
      for (JobTitleEnum b : JobTitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobTitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobTitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobTitleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobTitleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private JobTitleEnum jobTitle;

  /**
   * The industry area in which the applicant&#39;s work takes place (only applies to public / private employees and the self-employed)
   */
  @JsonAdapter(IndustryTypeEnum.Adapter.class)
  public enum IndustryTypeEnum {
    AGRICULTURE_LIVESTOCK_FISHING("AGRICULTURE_LIVESTOCK_FISHING"),
    
    MINING_AND_QUARRYING("MINING_AND_QUARRYING"),
    
    MANUFACTURING("MANUFACTURING"),
    
    ENERGY_SUPPLY("ENERGY_SUPPLY"),
    
    WATER_SUPPLY("WATER_SUPPLY"),
    
    CONSTRUCTION("CONSTRUCTION"),
    
    RETAIL("RETAIL"),
    
    TRANSPORTATION_STORAGE_POST("TRANSPORTATION_STORAGE_POST"),
    
    HOSPITALITY("HOSPITALITY"),
    
    MEDIA_IT("MEDIA_IT"),
    
    BANK_INSURANCE("BANK_INSURANCE"),
    
    REAL_ESTATE("REAL_ESTATE"),
    
    TECHNICAL_ACTIVITIES("TECHNICAL_ACTIVITIES"),
    
    ADMINISTRATIVE_AND_SUPPORT("ADMINISTRATIVE_AND_SUPPORT"),
    
    GOVERNMENTAL("GOVERNMENTAL"),
    
    EDUCATION("EDUCATION"),
    
    HEALTH_SOCIAL_SERVICES("HEALTH_SOCIAL_SERVICES"),
    
    ARTS_ENTERTAINMENT("ARTS_ENTERTAINMENT"),
    
    OTHER_SERVICES("OTHER_SERVICES"),
    
    HOUSEHOLDS("HOUSEHOLDS"),
    
    EXTRATERRITORIAL_ORGANISATIONS("EXTRATERRITORIAL_ORGANISATIONS");

    private String value;

    IndustryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndustryTypeEnum fromValue(String value) {
      for (IndustryTypeEnum b : IndustryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndustryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndustryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndustryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndustryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndustryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDUSTRY_TYPE = "industryType";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_TYPE)
  private IndustryTypeEnum industryType;

  /**
   * The specific industry in which the applicant&#39;s work takes place (only applies to public / private employees and the self-employed)
   */
  @JsonAdapter(IndustryEnum.Adapter.class)
  public enum IndustryEnum {
    AGRICULTURE("AGRICULTURE"),
    
    LIVESTOCK("LIVESTOCK"),
    
    FISHING("FISHING"),
    
    MINING("MINING"),
    
    FOOD("FOOD"),
    
    TEXTILE("TEXTILE"),
    
    LEATHER("LEATHER"),
    
    WOOD("WOOD"),
    
    PAPER("PAPER"),
    
    CHEMISTRY("CHEMISTRY"),
    
    PLASTIC("PLASTIC"),
    
    WEAPONS("WEAPONS"),
    
    MACHINERY("MACHINERY"),
    
    MACHINERY_REPAIR("MACHINERY_REPAIR"),
    
    INDUSTRY_OTHERS("INDUSTRY_OTHERS"),
    
    ENERGY_SUPPLY("ENERGY_SUPPLY"),
    
    WATER_SUPPLY("WATER_SUPPLY"),
    
    REAL_ESTATE("REAL_ESTATE"),
    
    CIVIL_ENGINEERING("CIVIL_ENGINEERING"),
    
    ELECTRICAL_INSTALLATIONS("ELECTRICAL_INSTALLATIONS"),
    
    PLUMBING("PLUMBING"),
    
    CARPENTRY("CARPENTRY"),
    
    PAINTING("PAINTING"),
    
    CONSTRUCTION_OTHERS("CONSTRUCTION_OTHERS"),
    
    STREET_VENDING_FOOD("STREET_VENDING_FOOD"),
    
    STREET_VENDING_TEXTILE("STREET_VENDING_TEXTILE"),
    
    STREET_VENDING_OTHER("STREET_VENDING_OTHER"),
    
    FOOD_RETAILERS("FOOD_RETAILERS"),
    
    PHARMACIES("PHARMACIES"),
    
    RETAIL_OTHERS("RETAIL_OTHERS"),
    
    TAXI("TAXI"),
    
    PASSENGER_TRANSPORT("PASSENGER_TRANSPORT"),
    
    FREIGHT_TRANSPORT("FREIGHT_TRANSPORT"),
    
    MOVING_SERVICES("MOVING_SERVICES"),
    
    MAIL("MAIL"),
    
    TRANSPORT_OTHERS("TRANSPORT_OTHERS"),
    
    HOTELS("HOTELS"),
    
    RESTAURANTS_AND_BARS("RESTAURANTS_AND_BARS"),
    
    MEDIA("MEDIA"),
    
    IT_CONSULTING("IT_CONSULTING"),
    
    IT_OTHERS("IT_OTHERS"),
    
    INTERNET("INTERNET"),
    
    TELECOMMUNICATIONS("TELECOMMUNICATIONS"),
    
    BANKING("BANKING"),
    
    INSURANCE("INSURANCE"),
    
    FINANCE_OTHERS("FINANCE_OTHERS"),
    
    REAL_ESTATE_AGENCIES("REAL_ESTATE_AGENCIES"),
    
    LEGAL("LEGAL"),
    
    ADVISORY("ADVISORY"),
    
    ARCHITECTURE("ARCHITECTURE"),
    
    RESEARCH("RESEARCH"),
    
    ADVERTISING("ADVERTISING"),
    
    TECHNICAL_OTHERS("TECHNICAL_OTHERS"),
    
    ADMINISTRATIVE_AND_SUPPORT("ADMINISTRATIVE_AND_SUPPORT"),
    
    PUBLIC_ADMINISTRATION("PUBLIC_ADMINISTRATION"),
    
    CULTURAL("CULTURAL"),
    
    ARMY("ARMY"),
    
    PUBLIC_ADMINISTRATION_OTHERS("PUBLIC_ADMINISTRATION_OTHERS"),
    
    EDUCATION_SPORTS_LEISURE("EDUCATION_SPORTS_LEISURE"),
    
    EDUCATION_DRIVING("EDUCATION_DRIVING"),
    
    EDUCATION_OTHERS("EDUCATION_OTHERS"),
    
    VETERINARY_ACTIVITIES("VETERINARY_ACTIVITIES"),
    
    DENTAL("DENTAL"),
    
    MEDICAL("MEDICAL"),
    
    ELDERLY("ELDERLY"),
    
    HEALTH_OTHERS("HEALTH_OTHERS"),
    
    ARTS_AND_ENTERTAINMENT("ARTS_AND_ENTERTAINMENT"),
    
    LIBRARIES_AND_MUSEUMS("LIBRARIES_AND_MUSEUMS"),
    
    GAMBLING("GAMBLING"),
    
    SPORTS("SPORTS"),
    
    ARTS_AND_ENTERTAINMENT_OTHER("ARTS_AND_ENTERTAINMENT_OTHER"),
    
    RELIGIOUS_ORGANIZATIONS("RELIGIOUS_ORGANIZATIONS"),
    
    POLITICAL_ORGANIZATIONS("POLITICAL_ORGANIZATIONS"),
    
    OTHER_ASSOCIATIVE_ACTIVITIES("OTHER_ASSOCIATIVE_ACTIVITIES"),
    
    REPAIR("REPAIR"),
    
    COLLECTION("COLLECTION"),
    
    TRAVEL_AGENCIES("TRAVEL_AGENCIES"),
    
    CLEANING_SERVICES("CLEANING_SERVICES"),
    
    GARDENING("GARDENING"),
    
    SECURITY("SECURITY"),
    
    BEAUTY("BEAUTY"),
    
    PACKAGING("PACKAGING"),
    
    SKILLED_SERVICES_OTHER("SKILLED_SERVICES_OTHER"),
    
    UNSKILLED_SERVICES_OTHER("UNSKILLED_SERVICES_OTHER"),
    
    DOMESTIC_SERVANTS("DOMESTIC_SERVANTS"),
    
    EXTRATERRITORIAL_ORGANISATIONS("EXTRATERRITORIAL_ORGANISATIONS");

    private String value;

    IndustryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndustryEnum fromValue(String value) {
      for (IndustryEnum b : IndustryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndustryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndustryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndustryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndustryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndustryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private IndustryEnum industry;

  public static final String SERIALIZED_NAME_CONTRACT_START_DATE = "contractStartDate";
  @SerializedName(SERIALIZED_NAME_CONTRACT_START_DATE)
  private LocalDate contractStartDate;

  public static final String SERIALIZED_NAME_CONTRACT_END_DATE = "contractEndDate";
  @SerializedName(SERIALIZED_NAME_CONTRACT_END_DATE)
  private LocalDate contractEndDate;

  public static final String SERIALIZED_NAME_COMPANY_ID_NUMBER = "companyIdNumber";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID_NUMBER)
  private String companyIdNumber;

  public static final String SERIALIZED_NAME_COMPANY_PHONE = "companyPhone";
  @SerializedName(SERIALIZED_NAME_COMPANY_PHONE)
  private String companyPhone;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COMPANY_ADDRESS = "companyAddress";
  @SerializedName(SERIALIZED_NAME_COMPANY_ADDRESS)
  private Address companyAddress;

  public static final String SERIALIZED_NAME_MONTHLY_INCOME = "monthlyIncome";
  @SerializedName(SERIALIZED_NAME_MONTHLY_INCOME)
  private String monthlyIncome;

  public static final String SERIALIZED_NAME_INCOME_FREQUENCY = "incomeFrequency";
  @SerializedName(SERIALIZED_NAME_INCOME_FREQUENCY)
  private Integer incomeFrequency;

  public static final String SERIALIZED_NAME_CONSENT_GROUP = "consentGroup";
  @SerializedName(SERIALIZED_NAME_CONSENT_GROUP)
  private Boolean consentGroup;

  public Applicant() {
  }

  public Applicant id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public Applicant role(RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * The role the applicant has in the loan application
   * @return role
   */
  @javax.annotation.Nonnull
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public Applicant relationship(RelationshipEnum relationship) {
    this.relationship = relationship;
    return this;
  }

  /**
   * The relationship this applicant has with the MAIN_APPLICANT. Should be specified only when the role is not MAIN_APPLICANT. If it&#39;s specified when the role is MAIN applicant a validation error will be thrown
   * @return relationship
   */
  @javax.annotation.Nullable
  public RelationshipEnum getRelationship() {
    return relationship;
  }

  public void setRelationship(RelationshipEnum relationship) {
    this.relationship = relationship;
  }


  public Applicant docIdType(DocIdTypeEnum docIdType) {
    this.docIdType = docIdType;
    return this;
  }

  /**
   * The type of the identification document
   * @return docIdType
   */
  @javax.annotation.Nullable
  public DocIdTypeEnum getDocIdType() {
    return docIdType;
  }

  public void setDocIdType(DocIdTypeEnum docIdType) {
    this.docIdType = docIdType;
  }


  public Applicant docIdType2(DocIdType2Enum docIdType2) {
    this.docIdType2 = docIdType2;
    return this;
  }

  /**
   * The type of the second identification document (only available in some countries such as Portugal)
   * @return docIdType2
   */
  @javax.annotation.Nullable
  public DocIdType2Enum getDocIdType2() {
    return docIdType2;
  }

  public void setDocIdType2(DocIdType2Enum docIdType2) {
    this.docIdType2 = docIdType2;
  }


  public Applicant docIdNumber(String docIdNumber) {
    this.docIdNumber = docIdNumber;
    return this;
  }

  /**
   * The actual value of the identification document
   * @return docIdNumber
   */
  @javax.annotation.Nullable
  public String getDocIdNumber() {
    return docIdNumber;
  }

  public void setDocIdNumber(String docIdNumber) {
    this.docIdNumber = docIdNumber;
  }


  public Applicant docIdNumber2(String docIdNumber2) {
    this.docIdNumber2 = docIdNumber2;
    return this;
  }

  /**
   * The actual value of the second identification document (only available in some countries such as Portugal)
   * @return docIdNumber2
   */
  @javax.annotation.Nullable
  public String getDocIdNumber2() {
    return docIdNumber2;
  }

  public void setDocIdNumber2(String docIdNumber2) {
    this.docIdNumber2 = docIdNumber2;
  }


  public Applicant docIdExpirationDate(LocalDate docIdExpirationDate) {
    this.docIdExpirationDate = docIdExpirationDate;
    return this;
  }

  /**
   * Expiration date of the identification number (&#39;9999-01-01&#39; in the case of perpetual documents)
   * @return docIdExpirationDate
   */
  @javax.annotation.Nullable
  public LocalDate getDocIdExpirationDate() {
    return docIdExpirationDate;
  }

  public void setDocIdExpirationDate(LocalDate docIdExpirationDate) {
    this.docIdExpirationDate = docIdExpirationDate;
  }


  public Applicant drivingLicenceIssuanceDate(LocalDate drivingLicenceIssuanceDate) {
    this.drivingLicenceIssuanceDate = drivingLicenceIssuanceDate;
    return this;
  }

  /**
   * Driving license issuance date
   * @return drivingLicenceIssuanceDate
   */
  @javax.annotation.Nullable
  public LocalDate getDrivingLicenceIssuanceDate() {
    return drivingLicenceIssuanceDate;
  }

  public void setDrivingLicenceIssuanceDate(LocalDate drivingLicenceIssuanceDate) {
    this.drivingLicenceIssuanceDate = drivingLicenceIssuanceDate;
  }


  public Applicant title(TitleEnum title) {
    this.title = title;
    return this;
  }

  /**
   * The applicant&#39;s title
   * @return title
   */
  @javax.annotation.Nullable
  public TitleEnum getTitle() {
    return title;
  }

  public void setTitle(TitleEnum title) {
    this.title = title;
  }


  public Applicant firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Applicant surname1(String surname1) {
    this.surname1 = surname1;
    return this;
  }

  /**
   * Get surname1
   * @return surname1
   */
  @javax.annotation.Nullable
  public String getSurname1() {
    return surname1;
  }

  public void setSurname1(String surname1) {
    this.surname1 = surname1;
  }


  public Applicant surname2(String surname2) {
    this.surname2 = surname2;
    return this;
  }

  /**
   * Get surname2
   * @return surname2
   */
  @javax.annotation.Nullable
  public String getSurname2() {
    return surname2;
  }

  public void setSurname2(String surname2) {
    this.surname2 = surname2;
  }


  public Applicant birthDate(LocalDate birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * Get birthDate
   * @return birthDate
   */
  @javax.annotation.Nullable
  public LocalDate getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(LocalDate birthDate) {
    this.birthDate = birthDate;
  }


  public Applicant nationalityIso(String nationalityIso) {
    this.nationalityIso = nationalityIso;
    return this;
  }

  /**
   * The ISO-3166-1 alpha-2 code of the nationality country
   * @return nationalityIso
   */
  @javax.annotation.Nullable
  public String getNationalityIso() {
    return nationalityIso;
  }

  public void setNationalityIso(String nationalityIso) {
    this.nationalityIso = nationalityIso;
  }


  public Applicant nationality2Iso(String nationality2Iso) {
    this.nationality2Iso = nationality2Iso;
    return this;
  }

  /**
   * The ISO-3166-1 alpha-2 code of the second nationality country
   * @return nationality2Iso
   */
  @javax.annotation.Nullable
  public String getNationality2Iso() {
    return nationality2Iso;
  }

  public void setNationality2Iso(String nationality2Iso) {
    this.nationality2Iso = nationality2Iso;
  }


  public Applicant paymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * The payment method to be used
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Applicant cardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
    return this;
  }

  /**
   * The credit card number. Empty spaces and non alphanumeric characters will be removed. This field should have a value only when the paymentMethod field is CREDIT_CARD
   * @return cardNumber
   */
  @javax.annotation.Nullable
  public String getCardNumber() {
    return cardNumber;
  }

  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public Applicant accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * The account number, should only by specified when the paymentMethod is CCC. It can be either an account number or an IBAN
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public Applicant accountCreationDate(LocalDate accountCreationDate) {
    this.accountCreationDate = accountCreationDate;
    return this;
  }

  /**
   * The date when the account specified in the previous field (accountNumber) has been created
   * @return accountCreationDate
   */
  @javax.annotation.Nullable
  public LocalDate getAccountCreationDate() {
    return accountCreationDate;
  }

  public void setAccountCreationDate(LocalDate accountCreationDate) {
    this.accountCreationDate = accountCreationDate;
  }


  public Applicant email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Applicant socialSecurityNumber(String socialSecurityNumber) {
    this.socialSecurityNumber = socialSecurityNumber;
    return this;
  }

  /**
   * Get socialSecurityNumber
   * @return socialSecurityNumber
   */
  @javax.annotation.Nullable
  public String getSocialSecurityNumber() {
    return socialSecurityNumber;
  }

  public void setSocialSecurityNumber(String socialSecurityNumber) {
    this.socialSecurityNumber = socialSecurityNumber;
  }


  public Applicant phoneType1(PhoneType1Enum phoneType1) {
    this.phoneType1 = phoneType1;
    return this;
  }

  /**
   * Get phoneType1
   * @return phoneType1
   */
  @javax.annotation.Nullable
  public PhoneType1Enum getPhoneType1() {
    return phoneType1;
  }

  public void setPhoneType1(PhoneType1Enum phoneType1) {
    this.phoneType1 = phoneType1;
  }


  public Applicant phone1(String phone1) {
    this.phone1 = phone1;
    return this;
  }

  /**
   * Get phone1
   * @return phone1
   */
  @javax.annotation.Nullable
  public String getPhone1() {
    return phone1;
  }

  public void setPhone1(String phone1) {
    this.phone1 = phone1;
  }


  public Applicant phoneType2(PhoneType2Enum phoneType2) {
    this.phoneType2 = phoneType2;
    return this;
  }

  /**
   * Get phoneType2
   * @return phoneType2
   */
  @javax.annotation.Nullable
  public PhoneType2Enum getPhoneType2() {
    return phoneType2;
  }

  public void setPhoneType2(PhoneType2Enum phoneType2) {
    this.phoneType2 = phoneType2;
  }


  public Applicant phone2(String phone2) {
    this.phone2 = phone2;
    return this;
  }

  /**
   * Get phone2
   * @return phone2
   */
  @javax.annotation.Nullable
  public String getPhone2() {
    return phone2;
  }

  public void setPhone2(String phone2) {
    this.phone2 = phone2;
  }


  public Applicant address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public Applicant residencyStartDate(LocalDate residencyStartDate) {
    this.residencyStartDate = residencyStartDate;
    return this;
  }

  /**
   * The date when the applicant started his/her residency. Should only be specified when the docIdType is not NATIONAL_ID
   * @return residencyStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getResidencyStartDate() {
    return residencyStartDate;
  }

  public void setResidencyStartDate(LocalDate residencyStartDate) {
    this.residencyStartDate = residencyStartDate;
  }


  public Applicant residencyEndDate(LocalDate residencyEndDate) {
    this.residencyEndDate = residencyEndDate;
    return this;
  }

  /**
   * The date when the applicant ends his/her residency. Should only be specified when the docIdType is not NATIONAL_ID
   * @return residencyEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getResidencyEndDate() {
    return residencyEndDate;
  }

  public void setResidencyEndDate(LocalDate residencyEndDate) {
    this.residencyEndDate = residencyEndDate;
  }


  public Applicant nativeAddress(Address nativeAddress) {
    this.nativeAddress = nativeAddress;
    return this;
  }

  /**
   * Get nativeAddress
   * @return nativeAddress
   */
  @javax.annotation.Nullable
  public Address getNativeAddress() {
    return nativeAddress;
  }

  public void setNativeAddress(Address nativeAddress) {
    this.nativeAddress = nativeAddress;
  }


  public Applicant gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public Applicant maritalStatus(MaritalStatusEnum maritalStatus) {
    this.maritalStatus = maritalStatus;
    return this;
  }

  /**
   * Get maritalStatus
   * @return maritalStatus
   */
  @javax.annotation.Nullable
  public MaritalStatusEnum getMaritalStatus() {
    return maritalStatus;
  }

  public void setMaritalStatus(MaritalStatusEnum maritalStatus) {
    this.maritalStatus = maritalStatus;
  }


  public Applicant dependent(Integer dependent) {
    this.dependent = dependent;
    return this;
  }

  /**
   * The number of dependant persons the applicant has (children, ancestors, or both)
   * @return dependent
   */
  @javax.annotation.Nullable
  public Integer getDependent() {
    return dependent;
  }

  public void setDependent(Integer dependent) {
    this.dependent = dependent;
  }


  public Applicant housingTenureType(HousingTenureTypeEnum housingTenureType) {
    this.housingTenureType = housingTenureType;
    return this;
  }

  /**
   * Type of property ownership / tenure of the house where the applicant lives
   * @return housingTenureType
   */
  @javax.annotation.Nullable
  public HousingTenureTypeEnum getHousingTenureType() {
    return housingTenureType;
  }

  public void setHousingTenureType(HousingTenureTypeEnum housingTenureType) {
    this.housingTenureType = housingTenureType;
  }


  public Applicant housingTenureStartDate(LocalDate housingTenureStartDate) {
    this.housingTenureStartDate = housingTenureStartDate;
    return this;
  }

  /**
   * The date when the applicant started to live in the house described by the previous field (housingTenureType)
   * @return housingTenureStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getHousingTenureStartDate() {
    return housingTenureStartDate;
  }

  public void setHousingTenureStartDate(LocalDate housingTenureStartDate) {
    this.housingTenureStartDate = housingTenureStartDate;
  }


  public Applicant housingExpenses(String housingExpenses) {
    this.housingExpenses = housingExpenses;
    return this;
  }

  /**
   * The monthly housing related expenses
   * @return housingExpenses
   */
  @javax.annotation.Nullable
  public String getHousingExpenses() {
    return housingExpenses;
  }

  public void setHousingExpenses(String housingExpenses) {
    this.housingExpenses = housingExpenses;
  }


  public Applicant otherExpenses(String otherExpenses) {
    this.otherExpenses = otherExpenses;
    return this;
  }

  /**
   * Other monthly expenses the applicant may have, existing loans etc.
   * @return otherExpenses
   */
  @javax.annotation.Nullable
  public String getOtherExpenses() {
    return otherExpenses;
  }

  public void setOtherExpenses(String otherExpenses) {
    this.otherExpenses = otherExpenses;
  }


  public Applicant occupationType(OccupationTypeEnum occupationType) {
    this.occupationType = occupationType;
    return this;
  }

  /**
   * The applicant&#39;s occupation type
   * @return occupationType
   */
  @javax.annotation.Nullable
  public OccupationTypeEnum getOccupationType() {
    return occupationType;
  }

  public void setOccupationType(OccupationTypeEnum occupationType) {
    this.occupationType = occupationType;
  }


  public Applicant occupation(OccupationEnum occupation) {
    this.occupation = occupation;
    return this;
  }

  /**
   * The specific occupation the applicant has
   * @return occupation
   */
  @javax.annotation.Nullable
  public OccupationEnum getOccupation() {
    return occupation;
  }

  public void setOccupation(OccupationEnum occupation) {
    this.occupation = occupation;
  }


  public Applicant profession(ProfessionEnum profession) {
    this.profession = profession;
    return this;
  }

  /**
   * If the applicant is a salaried employee, the applicant&#39;s profession
   * @return profession
   */
  @javax.annotation.Nullable
  public ProfessionEnum getProfession() {
    return profession;
  }

  public void setProfession(ProfessionEnum profession) {
    this.profession = profession;
  }


  public Applicant jobTitle(JobTitleEnum jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * If the applicant is a salaried employee, the applicant&#39;s job title / level of responsibility
   * @return jobTitle
   */
  @javax.annotation.Nullable
  public JobTitleEnum getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(JobTitleEnum jobTitle) {
    this.jobTitle = jobTitle;
  }


  public Applicant industryType(IndustryTypeEnum industryType) {
    this.industryType = industryType;
    return this;
  }

  /**
   * The industry area in which the applicant&#39;s work takes place (only applies to public / private employees and the self-employed)
   * @return industryType
   */
  @javax.annotation.Nullable
  public IndustryTypeEnum getIndustryType() {
    return industryType;
  }

  public void setIndustryType(IndustryTypeEnum industryType) {
    this.industryType = industryType;
  }


  public Applicant industry(IndustryEnum industry) {
    this.industry = industry;
    return this;
  }

  /**
   * The specific industry in which the applicant&#39;s work takes place (only applies to public / private employees and the self-employed)
   * @return industry
   */
  @javax.annotation.Nullable
  public IndustryEnum getIndustry() {
    return industry;
  }

  public void setIndustry(IndustryEnum industry) {
    this.industry = industry;
  }


  public Applicant contractStartDate(LocalDate contractStartDate) {
    this.contractStartDate = contractStartDate;
    return this;
  }

  /**
   * Starting date of the applicant&#39;s current job (only applies to public / private employees)
   * @return contractStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getContractStartDate() {
    return contractStartDate;
  }

  public void setContractStartDate(LocalDate contractStartDate) {
    this.contractStartDate = contractStartDate;
  }


  public Applicant contractEndDate(LocalDate contractEndDate) {
    this.contractEndDate = contractEndDate;
    return this;
  }

  /**
   * Contract end job of the applicant&#39;s current job (only applies to temporary public / private employees)
   * @return contractEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getContractEndDate() {
    return contractEndDate;
  }

  public void setContractEndDate(LocalDate contractEndDate) {
    this.contractEndDate = contractEndDate;
  }


  public Applicant companyIdNumber(String companyIdNumber) {
    this.companyIdNumber = companyIdNumber;
    return this;
  }

  /**
   * The company&#39;s identification number
   * @return companyIdNumber
   */
  @javax.annotation.Nullable
  public String getCompanyIdNumber() {
    return companyIdNumber;
  }

  public void setCompanyIdNumber(String companyIdNumber) {
    this.companyIdNumber = companyIdNumber;
  }


  public Applicant companyPhone(String companyPhone) {
    this.companyPhone = companyPhone;
    return this;
  }

  /**
   * The applicant&#39;s working telephone number (only applies to public / private employees and the self-employed)
   * @return companyPhone
   */
  @javax.annotation.Nullable
  public String getCompanyPhone() {
    return companyPhone;
  }

  public void setCompanyPhone(String companyPhone) {
    this.companyPhone = companyPhone;
  }


  public Applicant companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Name of the company where the applicant works (only applies to public / private employees)
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public Applicant companyAddress(Address companyAddress) {
    this.companyAddress = companyAddress;
    return this;
  }

  /**
   * Get companyAddress
   * @return companyAddress
   */
  @javax.annotation.Nullable
  public Address getCompanyAddress() {
    return companyAddress;
  }

  public void setCompanyAddress(Address companyAddress) {
    this.companyAddress = companyAddress;
  }


  public Applicant monthlyIncome(String monthlyIncome) {
    this.monthlyIncome = monthlyIncome;
    return this;
  }

  /**
   * The applicant&#39;s monthly net income (it may be subject to proof of income)
   * @return monthlyIncome
   */
  @javax.annotation.Nullable
  public String getMonthlyIncome() {
    return monthlyIncome;
  }

  public void setMonthlyIncome(String monthlyIncome) {
    this.monthlyIncome = monthlyIncome;
  }


  public Applicant incomeFrequency(Integer incomeFrequency) {
    this.incomeFrequency = incomeFrequency;
    return this;
  }

  /**
   * Number of pay periods in which the applicant&#39;s annual income is paid, usually 12/14 (it doesn&#39;t apply to the self employed)
   * @return incomeFrequency
   */
  @javax.annotation.Nullable
  public Integer getIncomeFrequency() {
    return incomeFrequency;
  }

  public void setIncomeFrequency(Integer incomeFrequency) {
    this.incomeFrequency = incomeFrequency;
  }


  public Applicant consentGroup(Boolean consentGroup) {
    this.consentGroup = consentGroup;
    return this;
  }

  /**
   * Indicates if the applicant has already given its consent to the merchant&#39;s policies
   * @return consentGroup
   */
  @javax.annotation.Nullable
  public Boolean getConsentGroup() {
    return consentGroup;
  }

  public void setConsentGroup(Boolean consentGroup) {
    this.consentGroup = consentGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Applicant applicant = (Applicant) o;
    return Objects.equals(this.id, applicant.id) &&
        Objects.equals(this.role, applicant.role) &&
        Objects.equals(this.relationship, applicant.relationship) &&
        Objects.equals(this.docIdType, applicant.docIdType) &&
        Objects.equals(this.docIdType2, applicant.docIdType2) &&
        Objects.equals(this.docIdNumber, applicant.docIdNumber) &&
        Objects.equals(this.docIdNumber2, applicant.docIdNumber2) &&
        Objects.equals(this.docIdExpirationDate, applicant.docIdExpirationDate) &&
        Objects.equals(this.drivingLicenceIssuanceDate, applicant.drivingLicenceIssuanceDate) &&
        Objects.equals(this.title, applicant.title) &&
        Objects.equals(this.firstName, applicant.firstName) &&
        Objects.equals(this.surname1, applicant.surname1) &&
        Objects.equals(this.surname2, applicant.surname2) &&
        Objects.equals(this.birthDate, applicant.birthDate) &&
        Objects.equals(this.nationalityIso, applicant.nationalityIso) &&
        Objects.equals(this.nationality2Iso, applicant.nationality2Iso) &&
        Objects.equals(this.paymentMethod, applicant.paymentMethod) &&
        Objects.equals(this.cardNumber, applicant.cardNumber) &&
        Objects.equals(this.accountNumber, applicant.accountNumber) &&
        Objects.equals(this.accountCreationDate, applicant.accountCreationDate) &&
        Objects.equals(this.email, applicant.email) &&
        Objects.equals(this.socialSecurityNumber, applicant.socialSecurityNumber) &&
        Objects.equals(this.phoneType1, applicant.phoneType1) &&
        Objects.equals(this.phone1, applicant.phone1) &&
        Objects.equals(this.phoneType2, applicant.phoneType2) &&
        Objects.equals(this.phone2, applicant.phone2) &&
        Objects.equals(this.address, applicant.address) &&
        Objects.equals(this.residencyStartDate, applicant.residencyStartDate) &&
        Objects.equals(this.residencyEndDate, applicant.residencyEndDate) &&
        Objects.equals(this.nativeAddress, applicant.nativeAddress) &&
        Objects.equals(this.gender, applicant.gender) &&
        Objects.equals(this.maritalStatus, applicant.maritalStatus) &&
        Objects.equals(this.dependent, applicant.dependent) &&
        Objects.equals(this.housingTenureType, applicant.housingTenureType) &&
        Objects.equals(this.housingTenureStartDate, applicant.housingTenureStartDate) &&
        Objects.equals(this.housingExpenses, applicant.housingExpenses) &&
        Objects.equals(this.otherExpenses, applicant.otherExpenses) &&
        Objects.equals(this.occupationType, applicant.occupationType) &&
        Objects.equals(this.occupation, applicant.occupation) &&
        Objects.equals(this.profession, applicant.profession) &&
        Objects.equals(this.jobTitle, applicant.jobTitle) &&
        Objects.equals(this.industryType, applicant.industryType) &&
        Objects.equals(this.industry, applicant.industry) &&
        Objects.equals(this.contractStartDate, applicant.contractStartDate) &&
        Objects.equals(this.contractEndDate, applicant.contractEndDate) &&
        Objects.equals(this.companyIdNumber, applicant.companyIdNumber) &&
        Objects.equals(this.companyPhone, applicant.companyPhone) &&
        Objects.equals(this.companyName, applicant.companyName) &&
        Objects.equals(this.companyAddress, applicant.companyAddress) &&
        Objects.equals(this.monthlyIncome, applicant.monthlyIncome) &&
        Objects.equals(this.incomeFrequency, applicant.incomeFrequency) &&
        Objects.equals(this.consentGroup, applicant.consentGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, role, relationship, docIdType, docIdType2, docIdNumber, docIdNumber2, docIdExpirationDate, drivingLicenceIssuanceDate, title, firstName, surname1, surname2, birthDate, nationalityIso, nationality2Iso, paymentMethod, cardNumber, accountNumber, accountCreationDate, email, socialSecurityNumber, phoneType1, phone1, phoneType2, phone2, address, residencyStartDate, residencyEndDate, nativeAddress, gender, maritalStatus, dependent, housingTenureType, housingTenureStartDate, housingExpenses, otherExpenses, occupationType, occupation, profession, jobTitle, industryType, industry, contractStartDate, contractEndDate, companyIdNumber, companyPhone, companyName, companyAddress, monthlyIncome, incomeFrequency, consentGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Applicant {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    docIdType: ").append(toIndentedString(docIdType)).append("\n");
    sb.append("    docIdType2: ").append(toIndentedString(docIdType2)).append("\n");
    sb.append("    docIdNumber: ").append(toIndentedString(docIdNumber)).append("\n");
    sb.append("    docIdNumber2: ").append(toIndentedString(docIdNumber2)).append("\n");
    sb.append("    docIdExpirationDate: ").append(toIndentedString(docIdExpirationDate)).append("\n");
    sb.append("    drivingLicenceIssuanceDate: ").append(toIndentedString(drivingLicenceIssuanceDate)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    surname1: ").append(toIndentedString(surname1)).append("\n");
    sb.append("    surname2: ").append(toIndentedString(surname2)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    nationalityIso: ").append(toIndentedString(nationalityIso)).append("\n");
    sb.append("    nationality2Iso: ").append(toIndentedString(nationality2Iso)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountCreationDate: ").append(toIndentedString(accountCreationDate)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    socialSecurityNumber: ").append(toIndentedString(socialSecurityNumber)).append("\n");
    sb.append("    phoneType1: ").append(toIndentedString(phoneType1)).append("\n");
    sb.append("    phone1: ").append(toIndentedString(phone1)).append("\n");
    sb.append("    phoneType2: ").append(toIndentedString(phoneType2)).append("\n");
    sb.append("    phone2: ").append(toIndentedString(phone2)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    residencyStartDate: ").append(toIndentedString(residencyStartDate)).append("\n");
    sb.append("    residencyEndDate: ").append(toIndentedString(residencyEndDate)).append("\n");
    sb.append("    nativeAddress: ").append(toIndentedString(nativeAddress)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
    sb.append("    dependent: ").append(toIndentedString(dependent)).append("\n");
    sb.append("    housingTenureType: ").append(toIndentedString(housingTenureType)).append("\n");
    sb.append("    housingTenureStartDate: ").append(toIndentedString(housingTenureStartDate)).append("\n");
    sb.append("    housingExpenses: ").append(toIndentedString(housingExpenses)).append("\n");
    sb.append("    otherExpenses: ").append(toIndentedString(otherExpenses)).append("\n");
    sb.append("    occupationType: ").append(toIndentedString(occupationType)).append("\n");
    sb.append("    occupation: ").append(toIndentedString(occupation)).append("\n");
    sb.append("    profession: ").append(toIndentedString(profession)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    industryType: ").append(toIndentedString(industryType)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    contractStartDate: ").append(toIndentedString(contractStartDate)).append("\n");
    sb.append("    contractEndDate: ").append(toIndentedString(contractEndDate)).append("\n");
    sb.append("    companyIdNumber: ").append(toIndentedString(companyIdNumber)).append("\n");
    sb.append("    companyPhone: ").append(toIndentedString(companyPhone)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    companyAddress: ").append(toIndentedString(companyAddress)).append("\n");
    sb.append("    monthlyIncome: ").append(toIndentedString(monthlyIncome)).append("\n");
    sb.append("    incomeFrequency: ").append(toIndentedString(incomeFrequency)).append("\n");
    sb.append("    consentGroup: ").append(toIndentedString(consentGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("role");
    openapiFields.add("relationship");
    openapiFields.add("docIdType");
    openapiFields.add("docIdType2");
    openapiFields.add("docIdNumber");
    openapiFields.add("docIdNumber2");
    openapiFields.add("docIdExpirationDate");
    openapiFields.add("drivingLicenceIssuanceDate");
    openapiFields.add("title");
    openapiFields.add("firstName");
    openapiFields.add("surname1");
    openapiFields.add("surname2");
    openapiFields.add("birthDate");
    openapiFields.add("nationalityIso");
    openapiFields.add("nationality2Iso");
    openapiFields.add("paymentMethod");
    openapiFields.add("cardNumber");
    openapiFields.add("accountNumber");
    openapiFields.add("accountCreationDate");
    openapiFields.add("email");
    openapiFields.add("socialSecurityNumber");
    openapiFields.add("phoneType1");
    openapiFields.add("phone1");
    openapiFields.add("phoneType2");
    openapiFields.add("phone2");
    openapiFields.add("address");
    openapiFields.add("residencyStartDate");
    openapiFields.add("residencyEndDate");
    openapiFields.add("nativeAddress");
    openapiFields.add("gender");
    openapiFields.add("maritalStatus");
    openapiFields.add("dependent");
    openapiFields.add("housingTenureType");
    openapiFields.add("housingTenureStartDate");
    openapiFields.add("housingExpenses");
    openapiFields.add("otherExpenses");
    openapiFields.add("occupationType");
    openapiFields.add("occupation");
    openapiFields.add("profession");
    openapiFields.add("jobTitle");
    openapiFields.add("industryType");
    openapiFields.add("industry");
    openapiFields.add("contractStartDate");
    openapiFields.add("contractEndDate");
    openapiFields.add("companyIdNumber");
    openapiFields.add("companyPhone");
    openapiFields.add("companyName");
    openapiFields.add("companyAddress");
    openapiFields.add("monthlyIncome");
    openapiFields.add("incomeFrequency");
    openapiFields.add("consentGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("role");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Applicant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Applicant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Applicant is not found in the empty JSON string", Applicant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Applicant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Applicant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Applicant.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the required field `role`
      RoleEnum.validateJsonElement(jsonObj.get("role"));
      if ((jsonObj.get("relationship") != null && !jsonObj.get("relationship").isJsonNull()) && !jsonObj.get("relationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationship").toString()));
      }
      // validate the optional field `relationship`
      if (jsonObj.get("relationship") != null && !jsonObj.get("relationship").isJsonNull()) {
        RelationshipEnum.validateJsonElement(jsonObj.get("relationship"));
      }
      if ((jsonObj.get("docIdType") != null && !jsonObj.get("docIdType").isJsonNull()) && !jsonObj.get("docIdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docIdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docIdType").toString()));
      }
      // validate the optional field `docIdType`
      if (jsonObj.get("docIdType") != null && !jsonObj.get("docIdType").isJsonNull()) {
        DocIdTypeEnum.validateJsonElement(jsonObj.get("docIdType"));
      }
      if ((jsonObj.get("docIdType2") != null && !jsonObj.get("docIdType2").isJsonNull()) && !jsonObj.get("docIdType2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docIdType2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docIdType2").toString()));
      }
      // validate the optional field `docIdType2`
      if (jsonObj.get("docIdType2") != null && !jsonObj.get("docIdType2").isJsonNull()) {
        DocIdType2Enum.validateJsonElement(jsonObj.get("docIdType2"));
      }
      if ((jsonObj.get("docIdNumber") != null && !jsonObj.get("docIdNumber").isJsonNull()) && !jsonObj.get("docIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docIdNumber").toString()));
      }
      if ((jsonObj.get("docIdNumber2") != null && !jsonObj.get("docIdNumber2").isJsonNull()) && !jsonObj.get("docIdNumber2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docIdNumber2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docIdNumber2").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `title`
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) {
        TitleEnum.validateJsonElement(jsonObj.get("title"));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("surname1") != null && !jsonObj.get("surname1").isJsonNull()) && !jsonObj.get("surname1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname1").toString()));
      }
      if ((jsonObj.get("surname2") != null && !jsonObj.get("surname2").isJsonNull()) && !jsonObj.get("surname2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname2").toString()));
      }
      if ((jsonObj.get("nationalityIso") != null && !jsonObj.get("nationalityIso").isJsonNull()) && !jsonObj.get("nationalityIso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalityIso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalityIso").toString()));
      }
      if ((jsonObj.get("nationality2Iso") != null && !jsonObj.get("nationality2Iso").isJsonNull()) && !jsonObj.get("nationality2Iso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality2Iso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality2Iso").toString()));
      }
      if ((jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) && !jsonObj.get("paymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMethod").toString()));
      }
      // validate the optional field `paymentMethod`
      if (jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) {
        PaymentMethodEnum.validateJsonElement(jsonObj.get("paymentMethod"));
      }
      if ((jsonObj.get("cardNumber") != null && !jsonObj.get("cardNumber").isJsonNull()) && !jsonObj.get("cardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumber").toString()));
      }
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("socialSecurityNumber") != null && !jsonObj.get("socialSecurityNumber").isJsonNull()) && !jsonObj.get("socialSecurityNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `socialSecurityNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("socialSecurityNumber").toString()));
      }
      if ((jsonObj.get("phoneType1") != null && !jsonObj.get("phoneType1").isJsonNull()) && !jsonObj.get("phoneType1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneType1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneType1").toString()));
      }
      // validate the optional field `phoneType1`
      if (jsonObj.get("phoneType1") != null && !jsonObj.get("phoneType1").isJsonNull()) {
        PhoneType1Enum.validateJsonElement(jsonObj.get("phoneType1"));
      }
      if ((jsonObj.get("phone1") != null && !jsonObj.get("phone1").isJsonNull()) && !jsonObj.get("phone1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone1").toString()));
      }
      if ((jsonObj.get("phoneType2") != null && !jsonObj.get("phoneType2").isJsonNull()) && !jsonObj.get("phoneType2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneType2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneType2").toString()));
      }
      // validate the optional field `phoneType2`
      if (jsonObj.get("phoneType2") != null && !jsonObj.get("phoneType2").isJsonNull()) {
        PhoneType2Enum.validateJsonElement(jsonObj.get("phoneType2"));
      }
      if ((jsonObj.get("phone2") != null && !jsonObj.get("phone2").isJsonNull()) && !jsonObj.get("phone2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone2").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `nativeAddress`
      if (jsonObj.get("nativeAddress") != null && !jsonObj.get("nativeAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("nativeAddress"));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("gender"));
      }
      if ((jsonObj.get("maritalStatus") != null && !jsonObj.get("maritalStatus").isJsonNull()) && !jsonObj.get("maritalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maritalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maritalStatus").toString()));
      }
      // validate the optional field `maritalStatus`
      if (jsonObj.get("maritalStatus") != null && !jsonObj.get("maritalStatus").isJsonNull()) {
        MaritalStatusEnum.validateJsonElement(jsonObj.get("maritalStatus"));
      }
      if ((jsonObj.get("housingTenureType") != null && !jsonObj.get("housingTenureType").isJsonNull()) && !jsonObj.get("housingTenureType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `housingTenureType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("housingTenureType").toString()));
      }
      // validate the optional field `housingTenureType`
      if (jsonObj.get("housingTenureType") != null && !jsonObj.get("housingTenureType").isJsonNull()) {
        HousingTenureTypeEnum.validateJsonElement(jsonObj.get("housingTenureType"));
      }
      if ((jsonObj.get("housingExpenses") != null && !jsonObj.get("housingExpenses").isJsonNull()) && !jsonObj.get("housingExpenses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `housingExpenses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("housingExpenses").toString()));
      }
      if ((jsonObj.get("otherExpenses") != null && !jsonObj.get("otherExpenses").isJsonNull()) && !jsonObj.get("otherExpenses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherExpenses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherExpenses").toString()));
      }
      if ((jsonObj.get("occupationType") != null && !jsonObj.get("occupationType").isJsonNull()) && !jsonObj.get("occupationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occupationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occupationType").toString()));
      }
      // validate the optional field `occupationType`
      if (jsonObj.get("occupationType") != null && !jsonObj.get("occupationType").isJsonNull()) {
        OccupationTypeEnum.validateJsonElement(jsonObj.get("occupationType"));
      }
      if ((jsonObj.get("occupation") != null && !jsonObj.get("occupation").isJsonNull()) && !jsonObj.get("occupation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occupation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occupation").toString()));
      }
      // validate the optional field `occupation`
      if (jsonObj.get("occupation") != null && !jsonObj.get("occupation").isJsonNull()) {
        OccupationEnum.validateJsonElement(jsonObj.get("occupation"));
      }
      if ((jsonObj.get("profession") != null && !jsonObj.get("profession").isJsonNull()) && !jsonObj.get("profession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profession").toString()));
      }
      // validate the optional field `profession`
      if (jsonObj.get("profession") != null && !jsonObj.get("profession").isJsonNull()) {
        ProfessionEnum.validateJsonElement(jsonObj.get("profession"));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      // validate the optional field `jobTitle`
      if (jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) {
        JobTitleEnum.validateJsonElement(jsonObj.get("jobTitle"));
      }
      if ((jsonObj.get("industryType") != null && !jsonObj.get("industryType").isJsonNull()) && !jsonObj.get("industryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industryType").toString()));
      }
      // validate the optional field `industryType`
      if (jsonObj.get("industryType") != null && !jsonObj.get("industryType").isJsonNull()) {
        IndustryTypeEnum.validateJsonElement(jsonObj.get("industryType"));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      // validate the optional field `industry`
      if (jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) {
        IndustryEnum.validateJsonElement(jsonObj.get("industry"));
      }
      if ((jsonObj.get("companyIdNumber") != null && !jsonObj.get("companyIdNumber").isJsonNull()) && !jsonObj.get("companyIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyIdNumber").toString()));
      }
      if ((jsonObj.get("companyPhone") != null && !jsonObj.get("companyPhone").isJsonNull()) && !jsonObj.get("companyPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyPhone").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      // validate the optional field `companyAddress`
      if (jsonObj.get("companyAddress") != null && !jsonObj.get("companyAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("companyAddress"));
      }
      if ((jsonObj.get("monthlyIncome") != null && !jsonObj.get("monthlyIncome").isJsonNull()) && !jsonObj.get("monthlyIncome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthlyIncome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monthlyIncome").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Applicant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Applicant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Applicant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Applicant.class));

       return (TypeAdapter<T>) new TypeAdapter<Applicant>() {
           @Override
           public void write(JsonWriter out, Applicant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Applicant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Applicant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Applicant
   * @throws IOException if the JSON string is invalid with respect to Applicant
   */
  public static Applicant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Applicant.class);
  }

  /**
   * Convert an instance of Applicant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

