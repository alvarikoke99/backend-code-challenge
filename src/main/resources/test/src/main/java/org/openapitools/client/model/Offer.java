/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Insurance;
import org.openapitools.client.model.PartialReturn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents one of the loan options provided by a specific lender
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class Offer {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LENDER_APPLICATION_ID1 = "lenderApplicationId1";
  @SerializedName(SERIALIZED_NAME_LENDER_APPLICATION_ID1)
  private String lenderApplicationId1;

  public static final String SERIALIZED_NAME_LENDER_APPLICATION_ID2 = "lenderApplicationId2";
  @SerializedName(SERIALIZED_NAME_LENDER_APPLICATION_ID2)
  private String lenderApplicationId2;

  public static final String SERIALIZED_NAME_LENDER_SIGNATURE_ID = "lenderSignatureId";
  @SerializedName(SERIALIZED_NAME_LENDER_SIGNATURE_ID)
  private String lenderSignatureId;

  /**
   * The lender providing the loan offer
   */
  @JsonAdapter(LenderEnum.Adapter.class)
  public enum LenderEnum {
    AUTOFIN("AUTOFIN"),
    
    ABANCA("ABANCA"),
    
    AKF("AKF"),
    
    ALMA("ALMA"),
    
    APLAZAME("APLAZAME"),
    
    AIS("AIS"),
    
    APK_RENTING("APK_RENTING"),
    
    BANCO_SANTANDER("BANCO_SANTANDER"),
    
    BANKINTER("BANKINTER"),
    
    BBVA("BBVA"),
    
    CAIXABANK("CAIXABANK"),
    
    CAJAMAR("CAJAMAR"),
    
    CAJA_RURAL("CAJA_RURAL"),
    
    CARREFOUR_PASS("CARREFOUR_PASS"),
    
    CETELEM("CETELEM"),
    
    COFIDIS("COFIDIS"),
    
    CONFIA("CONFIA"),
    
    CREDIBOX("CREDIBOX"),
    
    EQUIFAX("EQUIFAX"),
    
    EVO_FINANCE("EVO_FINANCE"),
    
    FCA("FCA"),
    
    FINDIRECT("FINDIRECT"),
    
    FLOA("FLOA"),
    
    FRAKMENTA("FRAKMENTA"),
    
    GREEN_HOME_FINANCE("GREEN_HOME_FINANCE"),
    
    HONDA("HONDA"),
    
    HYUNDAI("HYUNDAI"),
    
    INSTANT_CREDIT("INSTANT_CREDIT"),
    
    KIA("KIA"),
    
    KUTXABANK("KUTXABANK"),
    
    LEA_BANK("LEA_BANK"),
    
    MICROCREDIT("MICROCREDIT"),
    
    ONEY("ONEY"),
    
    PAYIN7("PAYIN7"),
    
    PEPPER("PEPPER"),
    
    PONTIO("PONTIO"),
    
    RCI_BANQUE("RCI_BANQUE"),
    
    SABADELL("SABADELL"),
    
    SANTANDER("SANTANDER"),
    
    SEQURA("SEQURA"),
    
    SOYOU("SOYOU"),
    
    STELLANTIS("STELLANTIS"),
    
    SUZUKI("SUZUKI"),
    
    UFA("UFA"),
    
    VOLVO("VOLVO"),
    
    VWFS("VWFS"),
    
    YOUNITED("YOUNITED"),
    
    YOUNITED_CREDIT("YOUNITED_CREDIT"),
    
    ZAPLO("ZAPLO"),
    
    LENDIFINANCE("LENDIFINANCE"),
    
    LENDIPLAN("LENDIPLAN"),
    
    LENDIPLAN_SUBSCRIPTIONS("LENDIPLAN_SUBSCRIPTIONS"),
    
    LENDROCK("LENDROCK"),
    
    MERCEDES("MERCEDES"),
    
    ALMA_FR("ALMA_FR"),
    
    FLOA_FR("FLOA_FR"),
    
    LENDIFINANCE_FR("LENDIFINANCE_FR"),
    
    LENDIPLAN_FR("LENDIPLAN_FR"),
    
    LENDIPLAN_SUBSCRIPTIONS_FR("LENDIPLAN_SUBSCRIPTIONS_FR"),
    
    SEQURA_FR("SEQURA_FR"),
    
    YOUNITED_FR("YOUNITED_FR"),
    
    ALMA_DE("ALMA_DE"),
    
    FLOA_DE("FLOA_DE"),
    
    LENDIFINANCE_DE("LENDIFINANCE_DE"),
    
    LENDIPLAN_DE("LENDIPLAN_DE"),
    
    LENDIPLAN_SUBSCRIPTIONS_DE("LENDIPLAN_SUBSCRIPTIONS_DE"),
    
    NELLY_DE("NELLY_DE"),
    
    RATEPAY_DE("RATEPAY_DE"),
    
    UNZER_DE("UNZER_DE"),
    
    SEQURA_DE("SEQURA_DE"),
    
    YOUNITED_DE("YOUNITED_DE"),
    
    ALMA_IT("ALMA_IT"),
    
    FLOA_IT("FLOA_IT"),
    
    LENDIFINANCE_IT("LENDIFINANCE_IT"),
    
    LENDIPLAN_IT("LENDIPLAN_IT"),
    
    LENDIPLAN_SUBSCRIPTIONS_IT("LENDIPLAN_SUBSCRIPTIONS_IT"),
    
    SCALAPAY_IT("SCALAPAY_IT"),
    
    SELLA_IT("SELLA_IT"),
    
    SEQURA_IT("SEQURA_IT"),
    
    YOUNITED_IT("YOUNITED_IT"),
    
    SPRAY_PAY_NL("SPRAY_PAY_NL"),
    
    ABANCA_PT("ABANCA_PT"),
    
    ALMA_PT("ALMA_PT"),
    
    BBVA_PT("BBVA_PT"),
    
    CETELEM_PT("CETELEM_PT"),
    
    COFIDIS_PT("COFIDIS_PT"),
    
    COFIDIS_WEB_PT("COFIDIS_WEB_PT"),
    
    CREDIBOM_PT("CREDIBOM_PT"),
    
    FLOA_PT("FLOA_PT"),
    
    LENDIFINANCE_PT("LENDIFINANCE_PT"),
    
    LENDIPLAN_PT("LENDIPLAN_PT"),
    
    LENDIPLAN_SUBSCRIPTIONS_PT("LENDIPLAN_SUBSCRIPTIONS_PT"),
    
    MONTEPIO_PT("MONTEPIO_PT"),
    
    PRIMUS_PT("PRIMUS_PT"),
    
    SEQURA_PT("SEQURA_PT"),
    
    YOUNITED_PT("YOUNITED_PT"),
    
    LENDIFINANCE_UK("LENDIFINANCE_UK"),
    
    LENDIPLAN_UK("LENDIPLAN_UK"),
    
    LENDIPLAN_SUBSCRIPTIONS_UK("LENDIPLAN_SUBSCRIPTIONS_UK"),
    
    BUYLINE_UK("BUYLINE_UK"),
    
    PAYMENT_ASSIST_UK("PAYMENT_ASSIST_UK"),
    
    LENDIPLAN_US("LENDIPLAN_US"),
    
    BNP_PARIBAS("BNP_PARIBAS"),
    
    CREDE("CREDE"),
    
    DLL("DLL"),
    
    GEDESCO("GEDESCO"),
    
    GRENKE("GRENKE"),
    
    IBERENT("IBERENT"),
    
    ITL("ITL"),
    
    IT_RENTING("IT_RENTING"),
    
    LIQUIDO("LIQUIDO"),
    
    SIEMENS("SIEMENS"),
    
    SOCIETE_GENERALE("SOCIETE_GENERALE");

    private String value;

    LenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LenderEnum fromValue(String value) {
      for (LenderEnum b : LenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LENDER = "lender";
  @SerializedName(SERIALIZED_NAME_LENDER)
  private LenderEnum lender;

  /**
   * The Offer&#39;s state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    APPROVED("APPROVED"),
    
    PREAPPROVED("PREAPPROVED"),
    
    PENDING_REVIEW("PENDING_REVIEW"),
    
    PENDING_DATA("PENDING_DATA"),
    
    PENDING_SUBMISSION("PENDING_SUBMISSION"),
    
    SUBMITTING("SUBMITTING"),
    
    DENIED("DENIED"),
    
    ERROR("ERROR"),
    
    CANCELED("CANCELED"),
    
    RETURNED("RETURNED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUBMISSION_ORDER = "submissionOrder";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_ORDER)
  private Integer submissionOrder;

  /**
   * Method used for the signature of the loan contract by the applicant/s
   */
  @JsonAdapter(SignatureMethodUsedEnum.Adapter.class)
  public enum SignatureMethodUsedEnum {
    NOT_SIGNED("NOT_SIGNED"),
    
    SIGNED_MANUAL("SIGNED_MANUAL"),
    
    SIGNED_SMS("SIGNED_SMS"),
    
    SIGNED_BIOMETRIC("SIGNED_BIOMETRIC"),
    
    PENDING_COAPPLICANT("PENDING_COAPPLICANT"),
    
    PENDING_MAIN_APPLICANT("PENDING_MAIN_APPLICANT");

    private String value;

    SignatureMethodUsedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureMethodUsedEnum fromValue(String value) {
      for (SignatureMethodUsedEnum b : SignatureMethodUsedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignatureMethodUsedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureMethodUsedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureMethodUsedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignatureMethodUsedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignatureMethodUsedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNATURE_METHOD_USED = "signatureMethodUsed";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_METHOD_USED)
  private SignatureMethodUsedEnum signatureMethodUsed;

  public static final String SERIALIZED_NAME_SIGNATURE_DATE = "signatureDate";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_DATE)
  private OffsetDateTime signatureDate;

  public static final String SERIALIZED_NAME_PREAPPROVAL_DATE = "preapprovalDate";
  @SerializedName(SERIALIZED_NAME_PREAPPROVAL_DATE)
  private OffsetDateTime preapprovalDate;

  public static final String SERIALIZED_NAME_APPROVAL_DATE = "approvalDate";
  @SerializedName(SERIALIZED_NAME_APPROVAL_DATE)
  private OffsetDateTime approvalDate;

  public static final String SERIALIZED_NAME_PAY_OUT_DATE = "payOutDate";
  @SerializedName(SERIALIZED_NAME_PAY_OUT_DATE)
  private OffsetDateTime payOutDate;

  public static final String SERIALIZED_NAME_RETURNED_DATE = "returnedDate";
  @SerializedName(SERIALIZED_NAME_RETURNED_DATE)
  private OffsetDateTime returnedDate;

  public static final String SERIALIZED_NAME_DOCS_SUBMITTED = "docsSubmitted";
  @SerializedName(SERIALIZED_NAME_DOCS_SUBMITTED)
  private Boolean docsSubmitted;

  public static final String SERIALIZED_NAME_FIRST_DOCS_SUBMISSION_DATE = "firstDocsSubmissionDate";
  @SerializedName(SERIALIZED_NAME_FIRST_DOCS_SUBMISSION_DATE)
  private OffsetDateTime firstDocsSubmissionDate;

  public static final String SERIALIZED_NAME_CANCELLATION_DATE = "cancellationDate";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_DATE)
  private OffsetDateTime cancellationDate;

  /**
   * Type of error preventing the scoring of the Offer by the lender
   */
  @JsonAdapter(ErrorTypeEnum.Adapter.class)
  public enum ErrorTypeEnum {
    CANNOT_USE_FAST_TRACK("CANNOT_USE_FAST_TRACK"),
    
    VEHICLE_MAKE_NOT_SUPPORTED("VEHICLE_MAKE_NOT_SUPPORTED"),
    
    CUSTOMER_DATA_DO_NOT_MATCH("CUSTOMER_DATA_DO_NOT_MATCH"),
    
    NOT_A_CUSTOMER("NOT_A_CUSTOMER"),
    
    MAIN_APPLICANT_EMAIL_REQUIRED("MAIN_APPLICANT_EMAIL_REQUIRED"),
    
    COAPPLICANT_EMAIL_REQUIRED("COAPPLICANT_EMAIL_REQUIRED"),
    
    PREVIOUS_ACTIVE_OFFER("PREVIOUS_ACTIVE_OFFER"),
    
    FIELD_LENGTH_EXCEEDED("FIELD_LENGTH_EXCEEDED"),
    
    RESTRICTED_PRODUCT("RESTRICTED_PRODUCT"),
    
    MANDATORY_INSURANCE_COVERAGES("MANDATORY_INSURANCE_COVERAGES"),
    
    GENERATE_CONTRACT_ERROR("GENERATE_CONTRACT_ERROR"),
    
    EMAIL_NOT_PRESENT_MAIN_APPLICANT("EMAIL_NOT_PRESENT_MAIN_APPLICANT"),
    
    EMAIL_NOT_PRESENT_COAPPLICANT("EMAIL_NOT_PRESENT_COAPPLICANT"),
    
    MOBILE_NOT_PRESENT_MAIN_APPLICANT("MOBILE_NOT_PRESENT_MAIN_APPLICANT"),
    
    MOBILE_NOT_PRESENT_COAPPLICANT("MOBILE_NOT_PRESENT_COAPPLICANT"),
    
    DIGITAL_SIGNATURE_NOT_AVAILABLE("DIGITAL_SIGNATURE_NOT_AVAILABLE"),
    
    ALREADY_SIGNED("ALREADY_SIGNED"),
    
    ALREADY_APPROVED("ALREADY_APPROVED"),
    
    NO_DOCUMENTS("NO_DOCUMENTS"),
    
    SOME_DOCUMENTS_COULD_NOT_BE_SENT("SOME_DOCUMENTS_COULD_NOT_BE_SENT"),
    
    NO_DOCUMENTS_COULD_BE_SENT("NO_DOCUMENTS_COULD_BE_SENT"),
    
    BAD_CREDENTIALS("BAD_CREDENTIALS"),
    
    NO_CREDENTIALS("NO_CREDENTIALS"),
    
    PASSWORD_EXPIRED("PASSWORD_EXPIRED"),
    
    LOGIN("LOGIN"),
    
    INCOMPLETE_RESOLVER_CONFIGURATION("INCOMPLETE_RESOLVER_CONFIGURATION"),
    
    BAD_USER_INTERACTION("BAD_USER_INTERACTION"),
    
    USER_INTERACTION_TIMEOUT("USER_INTERACTION_TIMEOUT"),
    
    USER_INTERACTION_CANCELLED("USER_INTERACTION_CANCELLED"),
    
    GENERIC("GENERIC"),
    
    AMAZON_S3_IO("AMAZON_S3_IO"),
    
    AXIS_SERIALIZATION("AXIS_SERIALIZATION"),
    
    IO_ERROR("IO_ERROR"),
    
    DATA("DATA"),
    
    FORBIDDEN("FORBIDDEN"),
    
    NO_CONTENT("NO_CONTENT"),
    
    NOT_FOUND("NOT_FOUND"),
    
    PERMANENTLY_PENDING_REVIEW("PERMANENTLY_PENDING_REVIEW"),
    
    SUBMISSION_ERROR("SUBMISSION_ERROR"),
    
    REDIRECTION_ERROR("REDIRECTION_ERROR"),
    
    UNEXPECTED_ERROR("UNEXPECTED_ERROR");

    private String value;

    ErrorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorTypeEnum fromValue(String value) {
      for (ErrorTypeEnum b : ErrorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_TYPE = "errorType";
  @SerializedName(SERIALIZED_NAME_ERROR_TYPE)
  private ErrorTypeEnum errorType;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  /**
   * Type of incident preventing the approval of tht Offer
   */
  @JsonAdapter(IncidentTypeEnum.Adapter.class)
  public enum IncidentTypeEnum {
    GENERIC("GENERIC"),
    
    APPROVAL_DELAY("APPROVAL_DELAY"),
    
    MISSING_DATA("MISSING_DATA"),
    
    MISSING_ACCOUNT("MISSING_ACCOUNT"),
    
    MISSING_ACCOUNT_MANUAL_SIGNATURE("MISSING_ACCOUNT_MANUAL_SIGNATURE"),
    
    MISSING_DOCUMENTS("MISSING_DOCUMENTS"),
    
    DOCUMENTS_TO_SEND("DOCUMENTS_TO_SEND"),
    
    PAYOUT_PENDING("PAYOUT_PENDING"),
    
    APPLICATION_ID_PENDING("APPLICATION_ID_PENDING"),
    
    PENDING_ACTION_WEBSITE("PENDING_ACTION_WEBSITE"),
    
    DELIVERY_PROOF_PENDING("DELIVERY_PROOF_PENDING"),
    
    CONDITIONAL_OFFER("CONDITIONAL_OFFER"),
    
    PENDING_REVIEW("PENDING_REVIEW"),
    
    SMS_SENT("SMS_SENT"),
    
    EMAIL_SENT("EMAIL_SENT"),
    
    APPLICATION_SENT_TO_AGENT("APPLICATION_SENT_TO_AGENT"),
    
    APPLICATION_NOT_SENT_TO_AGENT("APPLICATION_NOT_SENT_TO_AGENT"),
    
    REDIRECTION_TO_LENDER_NEEDED("REDIRECTION_TO_LENDER_NEEDED");

    private String value;

    IncidentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncidentTypeEnum fromValue(String value) {
      for (IncidentTypeEnum b : IncidentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncidentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncidentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncidentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncidentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IncidentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INCIDENT_TYPE = "incidentType";
  @SerializedName(SERIALIZED_NAME_INCIDENT_TYPE)
  private IncidentTypeEnum incidentType;

  public static final String SERIALIZED_NAME_INCIDENT = "incident";
  @SerializedName(SERIALIZED_NAME_INCIDENT)
  private String incident;

  public static final String SERIALIZED_NAME_LOAN_AMOUNT = "loanAmount";
  @SerializedName(SERIALIZED_NAME_LOAN_AMOUNT)
  private String loanAmount;

  public static final String SERIALIZED_NAME_MONTHLY_PAYMENT = "monthlyPayment";
  @SerializedName(SERIALIZED_NAME_MONTHLY_PAYMENT)
  private String monthlyPayment;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "productCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private String productCode;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private Integer term;

  /**
   * The financial product type (e.g. interest-free, interest-bearing, etc.)
   */
  @JsonAdapter(ProductTypeEnum.Adapter.class)
  public enum ProductTypeEnum {
    INTEREST_BEARING("INTEREST_BEARING"),
    
    ZERO_INTEREST("ZERO_INTEREST"),
    
    SUBSIDIZED_INTEREST("SUBSIDIZED_INTEREST"),
    
    OPTION_PLUS("OPTION_PLUS"),
    
    MULTIOPTION("MULTIOPTION"),
    
    LEASING("LEASING"),
    
    REFINANCING("REFINANCING"),
    
    BULLET("BULLET"),
    
    LOAN("LOAN"),
    
    SUBSCRIPTION("SUBSCRIPTION"),
    
    VARIABLE_RATE("VARIABLE_RATE"),
    
    RENTING("RENTING"),
    
    PROMOTION("PROMOTION"),
    
    STANDARD("STANDARD"),
    
    BNPL("BNPL"),
    
    KIA_FLEXIBLE_RANGE_FINANCE("KIA_FLEXIBLE_RANGE_FINANCE"),
    
    KIA_KREDIT("KIA_KREDIT"),
    
    KIA_PROTECCION_CLIENTE("KIA_PROTECCION_CLIENTE"),
    
    KIA_FLEXIPLAN("KIA_FLEXIPLAN");

    private String value;

    ProductTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductTypeEnum fromValue(String value) {
      for (ProductTypeEnum b : ProductTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private ProductTypeEnum productType;

  public static final String SERIALIZED_NAME_NIR = "nir";
  @SerializedName(SERIALIZED_NAME_NIR)
  private String nir;

  public static final String SERIALIZED_NAME_APR = "apr";
  @SerializedName(SERIALIZED_NAME_APR)
  private String apr;

  public static final String SERIALIZED_NAME_OPENING_FEE_PCT = "openingFeePct";
  @SerializedName(SERIALIZED_NAME_OPENING_FEE_PCT)
  private String openingFeePct;

  /**
   * The type of fee payment (if not zero)
   */
  @JsonAdapter(FeePaymentTypeEnum.Adapter.class)
  public enum FeePaymentTypeEnum {
    UPFRONT("UPFRONT"),
    
    FINANCED("FINANCED");

    private String value;

    FeePaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeePaymentTypeEnum fromValue(String value) {
      for (FeePaymentTypeEnum b : FeePaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeePaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeePaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeePaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeePaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeePaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEE_PAYMENT_TYPE = "feePaymentType";
  @SerializedName(SERIALIZED_NAME_FEE_PAYMENT_TYPE)
  private FeePaymentTypeEnum feePaymentType;

  public static final String SERIALIZED_NAME_OPENING_FEE_UPFRONT_PAYMENT = "openingFeeUpfrontPayment";
  @SerializedName(SERIALIZED_NAME_OPENING_FEE_UPFRONT_PAYMENT)
  private String openingFeeUpfrontPayment;

  public static final String SERIALIZED_NAME_OPENING_FEE_COST = "openingFeeCost";
  @SerializedName(SERIALIZED_NAME_OPENING_FEE_COST)
  private String openingFeeCost;

  public static final String SERIALIZED_NAME_GRACE_PERIOD = "gracePeriod";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD)
  private Integer gracePeriod;

  public static final String SERIALIZED_NAME_INSURANCE = "insurance";
  @SerializedName(SERIALIZED_NAME_INSURANCE)
  private Boolean insurance;

  /**
   * If the Offer includes an insurance product, this field indicates if the insurance cost is finance or financed and included in the loan monthly payment
   */
  @JsonAdapter(InsurancePaymentTypeEnum.Adapter.class)
  public enum InsurancePaymentTypeEnum {
    UPFRONT("UPFRONT"),
    
    FINANCED("FINANCED");

    private String value;

    InsurancePaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InsurancePaymentTypeEnum fromValue(String value) {
      for (InsurancePaymentTypeEnum b : InsurancePaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InsurancePaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InsurancePaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InsurancePaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InsurancePaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InsurancePaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSURANCE_PAYMENT_TYPE = "insurancePaymentType";
  @SerializedName(SERIALIZED_NAME_INSURANCE_PAYMENT_TYPE)
  private InsurancePaymentTypeEnum insurancePaymentType;

  public static final String SERIALIZED_NAME_INSURANCE_UPFRONT_PAYMENT = "insuranceUpfrontPayment";
  @SerializedName(SERIALIZED_NAME_INSURANCE_UPFRONT_PAYMENT)
  private String insuranceUpfrontPayment;

  public static final String SERIALIZED_NAME_MERCHANT_COST = "merchantCost";
  @SerializedName(SERIALIZED_NAME_MERCHANT_COST)
  private String merchantCost;

  public static final String SERIALIZED_NAME_DOWN_PAYMENT = "downPayment";
  @SerializedName(SERIALIZED_NAME_DOWN_PAYMENT)
  private String downPayment;

  /**
   * Status of the down payment. It will be set to NOT_DUE if it mustn&#39;t be paid through Lendismart (e.g. to be paid in cash). It will be set to COMPLETED when it has already been paid
   */
  @JsonAdapter(DownPaymentStatusEnum.Adapter.class)
  public enum DownPaymentStatusEnum {
    NOT_DUE("NOT_DUE"),
    
    DUE("DUE"),
    
    AUTHORIZED("AUTHORIZED"),
    
    INITIALIZED("INITIALIZED"),
    
    CHARGEDBACK("CHARGEDBACK"),
    
    COMPLETED("COMPLETED"),
    
    COMPLETED_IN_STORE("COMPLETED_IN_STORE"),
    
    UNCLEARED("UNCLEARED"),
    
    RESERVED("RESERVED"),
    
    REFUNDED("REFUNDED"),
    
    PARTIAL_REFUNDED("PARTIAL_REFUNDED"),
    
    DECLINED("DECLINED"),
    
    EXPIRED("EXPIRED"),
    
    VOID("VOID"),
    
    ERROR("ERROR");

    private String value;

    DownPaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DownPaymentStatusEnum fromValue(String value) {
      for (DownPaymentStatusEnum b : DownPaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DownPaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DownPaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DownPaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DownPaymentStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DownPaymentStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOWN_PAYMENT_STATUS = "downPaymentStatus";
  @SerializedName(SERIALIZED_NAME_DOWN_PAYMENT_STATUS)
  private DownPaymentStatusEnum downPaymentStatus;

  public static final String SERIALIZED_NAME_DOWN_PAYMENT_TIMESTAMP = "downPaymentTimestamp";
  @SerializedName(SERIALIZED_NAME_DOWN_PAYMENT_TIMESTAMP)
  private OffsetDateTime downPaymentTimestamp;

  /**
   * State of the return of an approved loan
   */
  @JsonAdapter(ReturnStateEnum.Adapter.class)
  public enum ReturnStateEnum {
    NOT_REQUESTED("NOT_REQUESTED"),
    
    REQUESTED("REQUESTED"),
    
    DENIED("DENIED"),
    
    APPROVED("APPROVED"),
    
    CONFIRMED("CONFIRMED"),
    
    PARTIALLY_RETURNED("PARTIALLY_RETURNED"),
    
    COMPLETED("COMPLETED");

    private String value;

    ReturnStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReturnStateEnum fromValue(String value) {
      for (ReturnStateEnum b : ReturnStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReturnStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReturnStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReturnStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReturnStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReturnStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RETURN_STATE = "returnState";
  @SerializedName(SERIALIZED_NAME_RETURN_STATE)
  private ReturnStateEnum returnState;

  public static final String SERIALIZED_NAME_PARTIAL_RETURNS = "partialReturns";
  @SerializedName(SERIALIZED_NAME_PARTIAL_RETURNS)
  private List<PartialReturn> partialReturns = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSURANCES = "insurances";
  @SerializedName(SERIALIZED_NAME_INSURANCES)
  private List<Insurance> insurances = new ArrayList<>();

  public Offer() {
  }

  public Offer id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the Offer
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public Offer lenderApplicationId1(String lenderApplicationId1) {
    this.lenderApplicationId1 = lenderApplicationId1;
    return this;
  }

  /**
   * The identifier assigned by the Lender to the Offer, which may be helpful for the resolution of incidents
   * @return lenderApplicationId1
   */
  @javax.annotation.Nullable
  public String getLenderApplicationId1() {
    return lenderApplicationId1;
  }

  public void setLenderApplicationId1(String lenderApplicationId1) {
    this.lenderApplicationId1 = lenderApplicationId1;
  }


  public Offer lenderApplicationId2(String lenderApplicationId2) {
    this.lenderApplicationId2 = lenderApplicationId2;
    return this;
  }

  /**
   * Some lenders assign two different identifiers to an Offer
   * @return lenderApplicationId2
   */
  @javax.annotation.Nullable
  public String getLenderApplicationId2() {
    return lenderApplicationId2;
  }

  public void setLenderApplicationId2(String lenderApplicationId2) {
    this.lenderApplicationId2 = lenderApplicationId2;
  }


  public Offer lenderSignatureId(String lenderSignatureId) {
    this.lenderSignatureId = lenderSignatureId;
    return this;
  }

  /**
   * Some lenders provide a code for the identification of the digital signature session, which may be helpful for the resolution of incidents
   * @return lenderSignatureId
   */
  @javax.annotation.Nullable
  public String getLenderSignatureId() {
    return lenderSignatureId;
  }

  public void setLenderSignatureId(String lenderSignatureId) {
    this.lenderSignatureId = lenderSignatureId;
  }


  public Offer lender(LenderEnum lender) {
    this.lender = lender;
    return this;
  }

  /**
   * The lender providing the loan offer
   * @return lender
   */
  @javax.annotation.Nullable
  public LenderEnum getLender() {
    return lender;
  }

  public void setLender(LenderEnum lender) {
    this.lender = lender;
  }


  public Offer state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The Offer&#39;s state
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Offer submissionOrder(Integer submissionOrder) {
    this.submissionOrder = submissionOrder;
    return this;
  }

  /**
   * Order in which the Offer was sent to its corresponding Lender (among all Offers)
   * @return submissionOrder
   */
  @javax.annotation.Nullable
  public Integer getSubmissionOrder() {
    return submissionOrder;
  }

  public void setSubmissionOrder(Integer submissionOrder) {
    this.submissionOrder = submissionOrder;
  }


  public Offer signatureMethodUsed(SignatureMethodUsedEnum signatureMethodUsed) {
    this.signatureMethodUsed = signatureMethodUsed;
    return this;
  }

  /**
   * Method used for the signature of the loan contract by the applicant/s
   * @return signatureMethodUsed
   */
  @javax.annotation.Nullable
  public SignatureMethodUsedEnum getSignatureMethodUsed() {
    return signatureMethodUsed;
  }

  public void setSignatureMethodUsed(SignatureMethodUsedEnum signatureMethodUsed) {
    this.signatureMethodUsed = signatureMethodUsed;
  }


  public Offer signatureDate(OffsetDateTime signatureDate) {
    this.signatureDate = signatureDate;
    return this;
  }

  /**
   * Timestamp that indicates when the Offer has been signed
   * @return signatureDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSignatureDate() {
    return signatureDate;
  }

  public void setSignatureDate(OffsetDateTime signatureDate) {
    this.signatureDate = signatureDate;
  }


  public Offer preapprovalDate(OffsetDateTime preapprovalDate) {
    this.preapprovalDate = preapprovalDate;
    return this;
  }

  /**
   * Timestamp that indicates when the Offer has been preapproved
   * @return preapprovalDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPreapprovalDate() {
    return preapprovalDate;
  }

  public void setPreapprovalDate(OffsetDateTime preapprovalDate) {
    this.preapprovalDate = preapprovalDate;
  }


  public Offer approvalDate(OffsetDateTime approvalDate) {
    this.approvalDate = approvalDate;
    return this;
  }

  /**
   * Timestamp that indicates when the Offer has been approved
   * @return approvalDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getApprovalDate() {
    return approvalDate;
  }

  public void setApprovalDate(OffsetDateTime approvalDate) {
    this.approvalDate = approvalDate;
  }


  public Offer payOutDate(OffsetDateTime payOutDate) {
    this.payOutDate = payOutDate;
    return this;
  }

  /**
   * Timestamp that indicates when the loan funds have been paid out to the merchant
   * @return payOutDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPayOutDate() {
    return payOutDate;
  }

  public void setPayOutDate(OffsetDateTime payOutDate) {
    this.payOutDate = payOutDate;
  }


  public Offer returnedDate(OffsetDateTime returnedDate) {
    this.returnedDate = returnedDate;
    return this;
  }

  /**
   * Timestamp that indicates when the Offer has been returned
   * @return returnedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReturnedDate() {
    return returnedDate;
  }

  public void setReturnedDate(OffsetDateTime returnedDate) {
    this.returnedDate = returnedDate;
  }


  public Offer docsSubmitted(Boolean docsSubmitted) {
    this.docsSubmitted = docsSubmitted;
    return this;
  }

  /**
   * Whether the documents related to the application have been sent to the lender
   * @return docsSubmitted
   */
  @javax.annotation.Nullable
  public Boolean getDocsSubmitted() {
    return docsSubmitted;
  }

  public void setDocsSubmitted(Boolean docsSubmitted) {
    this.docsSubmitted = docsSubmitted;
  }


  public Offer firstDocsSubmissionDate(OffsetDateTime firstDocsSubmissionDate) {
    this.firstDocsSubmissionDate = firstDocsSubmissionDate;
    return this;
  }

  /**
   * Timestamp that indicates when the documents related to the application were sent to the lender for the first time
   * @return firstDocsSubmissionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstDocsSubmissionDate() {
    return firstDocsSubmissionDate;
  }

  public void setFirstDocsSubmissionDate(OffsetDateTime firstDocsSubmissionDate) {
    this.firstDocsSubmissionDate = firstDocsSubmissionDate;
  }


  public Offer cancellationDate(OffsetDateTime cancellationDate) {
    this.cancellationDate = cancellationDate;
    return this;
  }

  /**
   * Timestamp that indicates when the Offer was cancelled
   * @return cancellationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCancellationDate() {
    return cancellationDate;
  }

  public void setCancellationDate(OffsetDateTime cancellationDate) {
    this.cancellationDate = cancellationDate;
  }


  public Offer errorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
    return this;
  }

  /**
   * Type of error preventing the scoring of the Offer by the lender
   * @return errorType
   */
  @javax.annotation.Nullable
  public ErrorTypeEnum getErrorType() {
    return errorType;
  }

  public void setErrorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
  }


  public Offer error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Text detailing the error preventing the scoring of the Offer by the lender
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public Offer incidentType(IncidentTypeEnum incidentType) {
    this.incidentType = incidentType;
    return this;
  }

  /**
   * Type of incident preventing the approval of tht Offer
   * @return incidentType
   */
  @javax.annotation.Nullable
  public IncidentTypeEnum getIncidentType() {
    return incidentType;
  }

  public void setIncidentType(IncidentTypeEnum incidentType) {
    this.incidentType = incidentType;
  }


  public Offer incident(String incident) {
    this.incident = incident;
    return this;
  }

  /**
   * Text detailing the incident preventing the approval of the Offer
   * @return incident
   */
  @javax.annotation.Nullable
  public String getIncident() {
    return incident;
  }

  public void setIncident(String incident) {
    this.incident = incident;
  }


  public Offer loanAmount(String loanAmount) {
    this.loanAmount = loanAmount;
    return this;
  }

  /**
   * The amount that could be financed through the Offer (it might differ from the requested amount if maximum/minimum thresholds apply)
   * @return loanAmount
   */
  @javax.annotation.Nullable
  public String getLoanAmount() {
    return loanAmount;
  }

  public void setLoanAmount(String loanAmount) {
    this.loanAmount = loanAmount;
  }


  public Offer monthlyPayment(String monthlyPayment) {
    this.monthlyPayment = monthlyPayment;
    return this;
  }

  /**
   * The monthly instalment the applicant will have to pay for the loan
   * @return monthlyPayment
   */
  @javax.annotation.Nullable
  public String getMonthlyPayment() {
    return monthlyPayment;
  }

  public void setMonthlyPayment(String monthlyPayment) {
    this.monthlyPayment = monthlyPayment;
  }


  public Offer productCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

  /**
   * Identifier of the specific financial product in the Lendismart, defined by its main characteristics (lender, term, productType, etc.)
   * @return productCode
   */
  @javax.annotation.Nullable
  public String getProductCode() {
    return productCode;
  }

  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }


  public Offer term(Integer term) {
    this.term = term;
    return this;
  }

  /**
   * The number of terms in which the loan will be payed
   * @return term
   */
  @javax.annotation.Nullable
  public Integer getTerm() {
    return term;
  }

  public void setTerm(Integer term) {
    this.term = term;
  }


  public Offer productType(ProductTypeEnum productType) {
    this.productType = productType;
    return this;
  }

  /**
   * The financial product type (e.g. interest-free, interest-bearing, etc.)
   * @return productType
   */
  @javax.annotation.Nullable
  public ProductTypeEnum getProductType() {
    return productType;
  }

  public void setProductType(ProductTypeEnum productType) {
    this.productType = productType;
  }


  public Offer nir(String nir) {
    this.nir = nir;
    return this;
  }

  /**
   * The nominal interest rate associated to the Offer
   * @return nir
   */
  @javax.annotation.Nullable
  public String getNir() {
    return nir;
  }

  public void setNir(String nir) {
    this.nir = nir;
  }


  public Offer apr(String apr) {
    this.apr = apr;
    return this;
  }

  /**
   * The annual percentage rate associated to the Offer
   * @return apr
   */
  @javax.annotation.Nullable
  public String getApr() {
    return apr;
  }

  public void setApr(String apr) {
    this.apr = apr;
  }


  public Offer openingFeePct(String openingFeePct) {
    this.openingFeePct = openingFeePct;
    return this;
  }

  /**
   * The  opening fee (per currency unit) associated to the Offer
   * @return openingFeePct
   */
  @javax.annotation.Nullable
  public String getOpeningFeePct() {
    return openingFeePct;
  }

  public void setOpeningFeePct(String openingFeePct) {
    this.openingFeePct = openingFeePct;
  }


  public Offer feePaymentType(FeePaymentTypeEnum feePaymentType) {
    this.feePaymentType = feePaymentType;
    return this;
  }

  /**
   * The type of fee payment (if not zero)
   * @return feePaymentType
   */
  @javax.annotation.Nullable
  public FeePaymentTypeEnum getFeePaymentType() {
    return feePaymentType;
  }

  public void setFeePaymentType(FeePaymentTypeEnum feePaymentType) {
    this.feePaymentType = feePaymentType;
  }


  public Offer openingFeeUpfrontPayment(String openingFeeUpfrontPayment) {
    this.openingFeeUpfrontPayment = openingFeeUpfrontPayment;
    return this;
  }

  /**
   * If the opening fee is greater than zero and the feePaymentType is &#39;UPFRONT&#39;, the upfront payment associated to it
   * @return openingFeeUpfrontPayment
   */
  @javax.annotation.Nullable
  public String getOpeningFeeUpfrontPayment() {
    return openingFeeUpfrontPayment;
  }

  public void setOpeningFeeUpfrontPayment(String openingFeeUpfrontPayment) {
    this.openingFeeUpfrontPayment = openingFeeUpfrontPayment;
  }


  public Offer openingFeeCost(String openingFeeCost) {
    this.openingFeeCost = openingFeeCost;
    return this;
  }

  /**
   * Opening fee cost, wether paid upfront or financed over the course of the loan
   * @return openingFeeCost
   */
  @javax.annotation.Nullable
  public String getOpeningFeeCost() {
    return openingFeeCost;
  }

  public void setOpeningFeeCost(String openingFeeCost) {
    this.openingFeeCost = openingFeeCost;
  }


  public Offer gracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
    return this;
  }

  /**
   * The grace period in months - initial period during which the loan doesn&#39;t have to be repaid
   * @return gracePeriod
   */
  @javax.annotation.Nullable
  public Integer getGracePeriod() {
    return gracePeriod;
  }

  public void setGracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
  }


  public Offer insurance(Boolean insurance) {
    this.insurance = insurance;
    return this;
  }

  /**
   * Whether the Offer embeds an insurance product
   * @return insurance
   */
  @javax.annotation.Nullable
  public Boolean getInsurance() {
    return insurance;
  }

  public void setInsurance(Boolean insurance) {
    this.insurance = insurance;
  }


  public Offer insurancePaymentType(InsurancePaymentTypeEnum insurancePaymentType) {
    this.insurancePaymentType = insurancePaymentType;
    return this;
  }

  /**
   * If the Offer includes an insurance product, this field indicates if the insurance cost is finance or financed and included in the loan monthly payment
   * @return insurancePaymentType
   */
  @javax.annotation.Nullable
  public InsurancePaymentTypeEnum getInsurancePaymentType() {
    return insurancePaymentType;
  }

  public void setInsurancePaymentType(InsurancePaymentTypeEnum insurancePaymentType) {
    this.insurancePaymentType = insurancePaymentType;
  }


  public Offer insuranceUpfrontPayment(String insuranceUpfrontPayment) {
    this.insuranceUpfrontPayment = insuranceUpfrontPayment;
    return this;
  }

  /**
   * If the Offer includes an insurance product and the insurancePaymentType is &#39;UPFRONT&#39;, the upfront payment associated to it
   * @return insuranceUpfrontPayment
   */
  @javax.annotation.Nullable
  public String getInsuranceUpfrontPayment() {
    return insuranceUpfrontPayment;
  }

  public void setInsuranceUpfrontPayment(String insuranceUpfrontPayment) {
    this.insuranceUpfrontPayment = insuranceUpfrontPayment;
  }


  public Offer merchantCost(String merchantCost) {
    this.merchantCost = merchantCost;
    return this;
  }

  /**
   * Cost of the loan to the merchant (discount)
   * @return merchantCost
   */
  @javax.annotation.Nullable
  public String getMerchantCost() {
    return merchantCost;
  }

  public void setMerchantCost(String merchantCost) {
    this.merchantCost = merchantCost;
  }


  public Offer downPayment(String downPayment) {
    this.downPayment = downPayment;
    return this;
  }

  /**
   * Down payment to be paid by the applicant in relation with the Offer
   * @return downPayment
   */
  @javax.annotation.Nullable
  public String getDownPayment() {
    return downPayment;
  }

  public void setDownPayment(String downPayment) {
    this.downPayment = downPayment;
  }


  public Offer downPaymentStatus(DownPaymentStatusEnum downPaymentStatus) {
    this.downPaymentStatus = downPaymentStatus;
    return this;
  }

  /**
   * Status of the down payment. It will be set to NOT_DUE if it mustn&#39;t be paid through Lendismart (e.g. to be paid in cash). It will be set to COMPLETED when it has already been paid
   * @return downPaymentStatus
   */
  @javax.annotation.Nullable
  public DownPaymentStatusEnum getDownPaymentStatus() {
    return downPaymentStatus;
  }

  public void setDownPaymentStatus(DownPaymentStatusEnum downPaymentStatus) {
    this.downPaymentStatus = downPaymentStatus;
  }


  public Offer downPaymentTimestamp(OffsetDateTime downPaymentTimestamp) {
    this.downPaymentTimestamp = downPaymentTimestamp;
    return this;
  }

  /**
   * Timestamp that indicates when the down payment status changed to COMPLETED
   * @return downPaymentTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDownPaymentTimestamp() {
    return downPaymentTimestamp;
  }

  public void setDownPaymentTimestamp(OffsetDateTime downPaymentTimestamp) {
    this.downPaymentTimestamp = downPaymentTimestamp;
  }


  public Offer returnState(ReturnStateEnum returnState) {
    this.returnState = returnState;
    return this;
  }

  /**
   * State of the return of an approved loan
   * @return returnState
   */
  @javax.annotation.Nullable
  public ReturnStateEnum getReturnState() {
    return returnState;
  }

  public void setReturnState(ReturnStateEnum returnState) {
    this.returnState = returnState;
  }


  public Offer partialReturns(List<PartialReturn> partialReturns) {
    this.partialReturns = partialReturns;
    return this;
  }

  public Offer addPartialReturnsItem(PartialReturn partialReturnsItem) {
    if (this.partialReturns == null) {
      this.partialReturns = new ArrayList<>();
    }
    this.partialReturns.add(partialReturnsItem);
    return this;
  }

  /**
   * Partial returns associated to the offer
   * @return partialReturns
   */
  @javax.annotation.Nullable
  public List<PartialReturn> getPartialReturns() {
    return partialReturns;
  }

  public void setPartialReturns(List<PartialReturn> partialReturns) {
    this.partialReturns = partialReturns;
  }


  public Offer insurances(List<Insurance> insurances) {
    this.insurances = insurances;
    return this;
  }

  public Offer addInsurancesItem(Insurance insurancesItem) {
    if (this.insurances == null) {
      this.insurances = new ArrayList<>();
    }
    this.insurances.add(insurancesItem);
    return this;
  }

  /**
   * Insurances included in the offer
   * @return insurances
   */
  @javax.annotation.Nullable
  public List<Insurance> getInsurances() {
    return insurances;
  }

  public void setInsurances(List<Insurance> insurances) {
    this.insurances = insurances;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Offer offer = (Offer) o;
    return Objects.equals(this.id, offer.id) &&
        Objects.equals(this.lenderApplicationId1, offer.lenderApplicationId1) &&
        Objects.equals(this.lenderApplicationId2, offer.lenderApplicationId2) &&
        Objects.equals(this.lenderSignatureId, offer.lenderSignatureId) &&
        Objects.equals(this.lender, offer.lender) &&
        Objects.equals(this.state, offer.state) &&
        Objects.equals(this.submissionOrder, offer.submissionOrder) &&
        Objects.equals(this.signatureMethodUsed, offer.signatureMethodUsed) &&
        Objects.equals(this.signatureDate, offer.signatureDate) &&
        Objects.equals(this.preapprovalDate, offer.preapprovalDate) &&
        Objects.equals(this.approvalDate, offer.approvalDate) &&
        Objects.equals(this.payOutDate, offer.payOutDate) &&
        Objects.equals(this.returnedDate, offer.returnedDate) &&
        Objects.equals(this.docsSubmitted, offer.docsSubmitted) &&
        Objects.equals(this.firstDocsSubmissionDate, offer.firstDocsSubmissionDate) &&
        Objects.equals(this.cancellationDate, offer.cancellationDate) &&
        Objects.equals(this.errorType, offer.errorType) &&
        Objects.equals(this.error, offer.error) &&
        Objects.equals(this.incidentType, offer.incidentType) &&
        Objects.equals(this.incident, offer.incident) &&
        Objects.equals(this.loanAmount, offer.loanAmount) &&
        Objects.equals(this.monthlyPayment, offer.monthlyPayment) &&
        Objects.equals(this.productCode, offer.productCode) &&
        Objects.equals(this.term, offer.term) &&
        Objects.equals(this.productType, offer.productType) &&
        Objects.equals(this.nir, offer.nir) &&
        Objects.equals(this.apr, offer.apr) &&
        Objects.equals(this.openingFeePct, offer.openingFeePct) &&
        Objects.equals(this.feePaymentType, offer.feePaymentType) &&
        Objects.equals(this.openingFeeUpfrontPayment, offer.openingFeeUpfrontPayment) &&
        Objects.equals(this.openingFeeCost, offer.openingFeeCost) &&
        Objects.equals(this.gracePeriod, offer.gracePeriod) &&
        Objects.equals(this.insurance, offer.insurance) &&
        Objects.equals(this.insurancePaymentType, offer.insurancePaymentType) &&
        Objects.equals(this.insuranceUpfrontPayment, offer.insuranceUpfrontPayment) &&
        Objects.equals(this.merchantCost, offer.merchantCost) &&
        Objects.equals(this.downPayment, offer.downPayment) &&
        Objects.equals(this.downPaymentStatus, offer.downPaymentStatus) &&
        Objects.equals(this.downPaymentTimestamp, offer.downPaymentTimestamp) &&
        Objects.equals(this.returnState, offer.returnState) &&
        Objects.equals(this.partialReturns, offer.partialReturns) &&
        Objects.equals(this.insurances, offer.insurances);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, lenderApplicationId1, lenderApplicationId2, lenderSignatureId, lender, state, submissionOrder, signatureMethodUsed, signatureDate, preapprovalDate, approvalDate, payOutDate, returnedDate, docsSubmitted, firstDocsSubmissionDate, cancellationDate, errorType, error, incidentType, incident, loanAmount, monthlyPayment, productCode, term, productType, nir, apr, openingFeePct, feePaymentType, openingFeeUpfrontPayment, openingFeeCost, gracePeriod, insurance, insurancePaymentType, insuranceUpfrontPayment, merchantCost, downPayment, downPaymentStatus, downPaymentTimestamp, returnState, partialReturns, insurances);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Offer {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lenderApplicationId1: ").append(toIndentedString(lenderApplicationId1)).append("\n");
    sb.append("    lenderApplicationId2: ").append(toIndentedString(lenderApplicationId2)).append("\n");
    sb.append("    lenderSignatureId: ").append(toIndentedString(lenderSignatureId)).append("\n");
    sb.append("    lender: ").append(toIndentedString(lender)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    submissionOrder: ").append(toIndentedString(submissionOrder)).append("\n");
    sb.append("    signatureMethodUsed: ").append(toIndentedString(signatureMethodUsed)).append("\n");
    sb.append("    signatureDate: ").append(toIndentedString(signatureDate)).append("\n");
    sb.append("    preapprovalDate: ").append(toIndentedString(preapprovalDate)).append("\n");
    sb.append("    approvalDate: ").append(toIndentedString(approvalDate)).append("\n");
    sb.append("    payOutDate: ").append(toIndentedString(payOutDate)).append("\n");
    sb.append("    returnedDate: ").append(toIndentedString(returnedDate)).append("\n");
    sb.append("    docsSubmitted: ").append(toIndentedString(docsSubmitted)).append("\n");
    sb.append("    firstDocsSubmissionDate: ").append(toIndentedString(firstDocsSubmissionDate)).append("\n");
    sb.append("    cancellationDate: ").append(toIndentedString(cancellationDate)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    incidentType: ").append(toIndentedString(incidentType)).append("\n");
    sb.append("    incident: ").append(toIndentedString(incident)).append("\n");
    sb.append("    loanAmount: ").append(toIndentedString(loanAmount)).append("\n");
    sb.append("    monthlyPayment: ").append(toIndentedString(monthlyPayment)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    nir: ").append(toIndentedString(nir)).append("\n");
    sb.append("    apr: ").append(toIndentedString(apr)).append("\n");
    sb.append("    openingFeePct: ").append(toIndentedString(openingFeePct)).append("\n");
    sb.append("    feePaymentType: ").append(toIndentedString(feePaymentType)).append("\n");
    sb.append("    openingFeeUpfrontPayment: ").append(toIndentedString(openingFeeUpfrontPayment)).append("\n");
    sb.append("    openingFeeCost: ").append(toIndentedString(openingFeeCost)).append("\n");
    sb.append("    gracePeriod: ").append(toIndentedString(gracePeriod)).append("\n");
    sb.append("    insurance: ").append(toIndentedString(insurance)).append("\n");
    sb.append("    insurancePaymentType: ").append(toIndentedString(insurancePaymentType)).append("\n");
    sb.append("    insuranceUpfrontPayment: ").append(toIndentedString(insuranceUpfrontPayment)).append("\n");
    sb.append("    merchantCost: ").append(toIndentedString(merchantCost)).append("\n");
    sb.append("    downPayment: ").append(toIndentedString(downPayment)).append("\n");
    sb.append("    downPaymentStatus: ").append(toIndentedString(downPaymentStatus)).append("\n");
    sb.append("    downPaymentTimestamp: ").append(toIndentedString(downPaymentTimestamp)).append("\n");
    sb.append("    returnState: ").append(toIndentedString(returnState)).append("\n");
    sb.append("    partialReturns: ").append(toIndentedString(partialReturns)).append("\n");
    sb.append("    insurances: ").append(toIndentedString(insurances)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("lenderApplicationId1");
    openapiFields.add("lenderApplicationId2");
    openapiFields.add("lenderSignatureId");
    openapiFields.add("lender");
    openapiFields.add("state");
    openapiFields.add("submissionOrder");
    openapiFields.add("signatureMethodUsed");
    openapiFields.add("signatureDate");
    openapiFields.add("preapprovalDate");
    openapiFields.add("approvalDate");
    openapiFields.add("payOutDate");
    openapiFields.add("returnedDate");
    openapiFields.add("docsSubmitted");
    openapiFields.add("firstDocsSubmissionDate");
    openapiFields.add("cancellationDate");
    openapiFields.add("errorType");
    openapiFields.add("error");
    openapiFields.add("incidentType");
    openapiFields.add("incident");
    openapiFields.add("loanAmount");
    openapiFields.add("monthlyPayment");
    openapiFields.add("productCode");
    openapiFields.add("term");
    openapiFields.add("productType");
    openapiFields.add("nir");
    openapiFields.add("apr");
    openapiFields.add("openingFeePct");
    openapiFields.add("feePaymentType");
    openapiFields.add("openingFeeUpfrontPayment");
    openapiFields.add("openingFeeCost");
    openapiFields.add("gracePeriod");
    openapiFields.add("insurance");
    openapiFields.add("insurancePaymentType");
    openapiFields.add("insuranceUpfrontPayment");
    openapiFields.add("merchantCost");
    openapiFields.add("downPayment");
    openapiFields.add("downPaymentStatus");
    openapiFields.add("downPaymentTimestamp");
    openapiFields.add("returnState");
    openapiFields.add("partialReturns");
    openapiFields.add("insurances");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Offer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Offer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Offer is not found in the empty JSON string", Offer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Offer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Offer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lenderApplicationId1") != null && !jsonObj.get("lenderApplicationId1").isJsonNull()) && !jsonObj.get("lenderApplicationId1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lenderApplicationId1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lenderApplicationId1").toString()));
      }
      if ((jsonObj.get("lenderApplicationId2") != null && !jsonObj.get("lenderApplicationId2").isJsonNull()) && !jsonObj.get("lenderApplicationId2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lenderApplicationId2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lenderApplicationId2").toString()));
      }
      if ((jsonObj.get("lenderSignatureId") != null && !jsonObj.get("lenderSignatureId").isJsonNull()) && !jsonObj.get("lenderSignatureId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lenderSignatureId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lenderSignatureId").toString()));
      }
      if ((jsonObj.get("lender") != null && !jsonObj.get("lender").isJsonNull()) && !jsonObj.get("lender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lender").toString()));
      }
      // validate the optional field `lender`
      if (jsonObj.get("lender") != null && !jsonObj.get("lender").isJsonNull()) {
        LenderEnum.validateJsonElement(jsonObj.get("lender"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("signatureMethodUsed") != null && !jsonObj.get("signatureMethodUsed").isJsonNull()) && !jsonObj.get("signatureMethodUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatureMethodUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatureMethodUsed").toString()));
      }
      // validate the optional field `signatureMethodUsed`
      if (jsonObj.get("signatureMethodUsed") != null && !jsonObj.get("signatureMethodUsed").isJsonNull()) {
        SignatureMethodUsedEnum.validateJsonElement(jsonObj.get("signatureMethodUsed"));
      }
      if ((jsonObj.get("errorType") != null && !jsonObj.get("errorType").isJsonNull()) && !jsonObj.get("errorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorType").toString()));
      }
      // validate the optional field `errorType`
      if (jsonObj.get("errorType") != null && !jsonObj.get("errorType").isJsonNull()) {
        ErrorTypeEnum.validateJsonElement(jsonObj.get("errorType"));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("incidentType") != null && !jsonObj.get("incidentType").isJsonNull()) && !jsonObj.get("incidentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incidentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incidentType").toString()));
      }
      // validate the optional field `incidentType`
      if (jsonObj.get("incidentType") != null && !jsonObj.get("incidentType").isJsonNull()) {
        IncidentTypeEnum.validateJsonElement(jsonObj.get("incidentType"));
      }
      if ((jsonObj.get("incident") != null && !jsonObj.get("incident").isJsonNull()) && !jsonObj.get("incident").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incident` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incident").toString()));
      }
      if ((jsonObj.get("loanAmount") != null && !jsonObj.get("loanAmount").isJsonNull()) && !jsonObj.get("loanAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loanAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loanAmount").toString()));
      }
      if ((jsonObj.get("monthlyPayment") != null && !jsonObj.get("monthlyPayment").isJsonNull()) && !jsonObj.get("monthlyPayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthlyPayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monthlyPayment").toString()));
      }
      if ((jsonObj.get("productCode") != null && !jsonObj.get("productCode").isJsonNull()) && !jsonObj.get("productCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productCode").toString()));
      }
      if ((jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) && !jsonObj.get("productType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productType").toString()));
      }
      // validate the optional field `productType`
      if (jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) {
        ProductTypeEnum.validateJsonElement(jsonObj.get("productType"));
      }
      if ((jsonObj.get("nir") != null && !jsonObj.get("nir").isJsonNull()) && !jsonObj.get("nir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nir").toString()));
      }
      if ((jsonObj.get("apr") != null && !jsonObj.get("apr").isJsonNull()) && !jsonObj.get("apr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apr").toString()));
      }
      if ((jsonObj.get("openingFeePct") != null && !jsonObj.get("openingFeePct").isJsonNull()) && !jsonObj.get("openingFeePct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openingFeePct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openingFeePct").toString()));
      }
      if ((jsonObj.get("feePaymentType") != null && !jsonObj.get("feePaymentType").isJsonNull()) && !jsonObj.get("feePaymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feePaymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feePaymentType").toString()));
      }
      // validate the optional field `feePaymentType`
      if (jsonObj.get("feePaymentType") != null && !jsonObj.get("feePaymentType").isJsonNull()) {
        FeePaymentTypeEnum.validateJsonElement(jsonObj.get("feePaymentType"));
      }
      if ((jsonObj.get("openingFeeUpfrontPayment") != null && !jsonObj.get("openingFeeUpfrontPayment").isJsonNull()) && !jsonObj.get("openingFeeUpfrontPayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openingFeeUpfrontPayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openingFeeUpfrontPayment").toString()));
      }
      if ((jsonObj.get("openingFeeCost") != null && !jsonObj.get("openingFeeCost").isJsonNull()) && !jsonObj.get("openingFeeCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openingFeeCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openingFeeCost").toString()));
      }
      if ((jsonObj.get("insurancePaymentType") != null && !jsonObj.get("insurancePaymentType").isJsonNull()) && !jsonObj.get("insurancePaymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insurancePaymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insurancePaymentType").toString()));
      }
      // validate the optional field `insurancePaymentType`
      if (jsonObj.get("insurancePaymentType") != null && !jsonObj.get("insurancePaymentType").isJsonNull()) {
        InsurancePaymentTypeEnum.validateJsonElement(jsonObj.get("insurancePaymentType"));
      }
      if ((jsonObj.get("insuranceUpfrontPayment") != null && !jsonObj.get("insuranceUpfrontPayment").isJsonNull()) && !jsonObj.get("insuranceUpfrontPayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insuranceUpfrontPayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insuranceUpfrontPayment").toString()));
      }
      if ((jsonObj.get("merchantCost") != null && !jsonObj.get("merchantCost").isJsonNull()) && !jsonObj.get("merchantCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCost").toString()));
      }
      if ((jsonObj.get("downPayment") != null && !jsonObj.get("downPayment").isJsonNull()) && !jsonObj.get("downPayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downPayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downPayment").toString()));
      }
      if ((jsonObj.get("downPaymentStatus") != null && !jsonObj.get("downPaymentStatus").isJsonNull()) && !jsonObj.get("downPaymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downPaymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downPaymentStatus").toString()));
      }
      // validate the optional field `downPaymentStatus`
      if (jsonObj.get("downPaymentStatus") != null && !jsonObj.get("downPaymentStatus").isJsonNull()) {
        DownPaymentStatusEnum.validateJsonElement(jsonObj.get("downPaymentStatus"));
      }
      if ((jsonObj.get("returnState") != null && !jsonObj.get("returnState").isJsonNull()) && !jsonObj.get("returnState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnState").toString()));
      }
      // validate the optional field `returnState`
      if (jsonObj.get("returnState") != null && !jsonObj.get("returnState").isJsonNull()) {
        ReturnStateEnum.validateJsonElement(jsonObj.get("returnState"));
      }
      if (jsonObj.get("partialReturns") != null && !jsonObj.get("partialReturns").isJsonNull()) {
        JsonArray jsonArraypartialReturns = jsonObj.getAsJsonArray("partialReturns");
        if (jsonArraypartialReturns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partialReturns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partialReturns` to be an array in the JSON string but got `%s`", jsonObj.get("partialReturns").toString()));
          }

          // validate the optional field `partialReturns` (array)
          for (int i = 0; i < jsonArraypartialReturns.size(); i++) {
            PartialReturn.validateJsonElement(jsonArraypartialReturns.get(i));
          };
        }
      }
      if (jsonObj.get("insurances") != null && !jsonObj.get("insurances").isJsonNull()) {
        JsonArray jsonArrayinsurances = jsonObj.getAsJsonArray("insurances");
        if (jsonArrayinsurances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("insurances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `insurances` to be an array in the JSON string but got `%s`", jsonObj.get("insurances").toString()));
          }

          // validate the optional field `insurances` (array)
          for (int i = 0; i < jsonArrayinsurances.size(); i++) {
            Insurance.validateJsonElement(jsonArrayinsurances.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Offer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Offer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Offer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Offer.class));

       return (TypeAdapter<T>) new TypeAdapter<Offer>() {
           @Override
           public void write(JsonWriter out, Offer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Offer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Offer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Offer
   * @throws IOException if the JSON string is invalid with respect to Offer
   */
  public static Offer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Offer.class);
  }

  /**
   * Convert an instance of Offer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

