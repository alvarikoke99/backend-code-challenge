/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.Address;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information relate to the order shipping.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class Shipping {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_SURNAME1 = "surname1";
  @SerializedName(SERIALIZED_NAME_SURNAME1)
  private String surname1;

  public static final String SERIALIZED_NAME_SURNAME2 = "surname2";
  @SerializedName(SERIALIZED_NAME_SURNAME2)
  private String surname2;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  /**
   * Shipping method according to Lendismart&#39;s categories.
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    PICKUP_STORE("PICKUP_STORE"),
    
    PICKUP_POINT("PICKUP_POINT"),
    
    POSTAL("POSTAL");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_METHOD_NAME = "methodName";
  @SerializedName(SERIALIZED_NAME_METHOD_NAME)
  private String methodName;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_DAYS = "days";
  @SerializedName(SERIALIZED_NAME_DAYS)
  private Integer days;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_PRE_TAX_PRICE = "preTaxPrice";
  @SerializedName(SERIALIZED_NAME_PRE_TAX_PRICE)
  private String preTaxPrice;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private String discount;

  public static final String SERIALIZED_NAME_TAX_RATE = "taxRate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private String taxRate;

  public Shipping() {
  }

  public Shipping id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public Shipping firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Shipping surname1(String surname1) {
    this.surname1 = surname1;
    return this;
  }

  /**
   * Get surname1
   * @return surname1
   */
  @javax.annotation.Nullable
  public String getSurname1() {
    return surname1;
  }

  public void setSurname1(String surname1) {
    this.surname1 = surname1;
  }


  public Shipping surname2(String surname2) {
    this.surname2 = surname2;
    return this;
  }

  /**
   * Get surname2
   * @return surname2
   */
  @javax.annotation.Nullable
  public String getSurname2() {
    return surname2;
  }

  public void setSurname2(String surname2) {
    this.surname2 = surname2;
  }


  public Shipping phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public Shipping address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public Shipping method(MethodEnum method) {
    this.method = method;
    return this;
  }

  /**
   * Shipping method according to Lendismart&#39;s categories.
   * @return method
   */
  @javax.annotation.Nullable
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public Shipping methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

  /**
   * Shipping method according to the merchant&#39;s categories.
   * @return methodName
   */
  @javax.annotation.Nullable
  public String getMethodName() {
    return methodName;
  }

  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public Shipping provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Courier providing the shipping service, if applicable.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public Shipping days(Integer days) {
    this.days = days;
    return this;
  }

  /**
   * Estimated days until order delivery.
   * @return days
   */
  @javax.annotation.Nullable
  public Integer getDays() {
    return days;
  }

  public void setDays(Integer days) {
    this.days = days;
  }


  public Shipping price(String price) {
    this.price = price;
    return this;
  }

  /**
   * Shipping price (including any tax and/or discount). The calculation is as follows: price &#x3D; (preTaxPrice - discount) * (1 + taxRate)
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }


  public Shipping preTaxPrice(String preTaxPrice) {
    this.preTaxPrice = preTaxPrice;
    return this;
  }

  /**
   * Pre-tax shipping price.
   * @return preTaxPrice
   */
  @javax.annotation.Nullable
  public String getPreTaxPrice() {
    return preTaxPrice;
  }

  public void setPreTaxPrice(String preTaxPrice) {
    this.preTaxPrice = preTaxPrice;
  }


  public Shipping discount(String discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Shipping discount (in currency units).
   * @return discount
   */
  @javax.annotation.Nullable
  public String getDiscount() {
    return discount;
  }

  public void setDiscount(String discount) {
    this.discount = discount;
  }


  public Shipping taxRate(String taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  /**
   * Shipping tax rate, expressed as a decimal.
   * @return taxRate
   */
  @javax.annotation.Nullable
  public String getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(String taxRate) {
    this.taxRate = taxRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Shipping shipping = (Shipping) o;
    return Objects.equals(this.id, shipping.id) &&
        Objects.equals(this.firstName, shipping.firstName) &&
        Objects.equals(this.surname1, shipping.surname1) &&
        Objects.equals(this.surname2, shipping.surname2) &&
        Objects.equals(this.phone, shipping.phone) &&
        Objects.equals(this.address, shipping.address) &&
        Objects.equals(this.method, shipping.method) &&
        Objects.equals(this.methodName, shipping.methodName) &&
        Objects.equals(this.provider, shipping.provider) &&
        Objects.equals(this.days, shipping.days) &&
        Objects.equals(this.price, shipping.price) &&
        Objects.equals(this.preTaxPrice, shipping.preTaxPrice) &&
        Objects.equals(this.discount, shipping.discount) &&
        Objects.equals(this.taxRate, shipping.taxRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, firstName, surname1, surname2, phone, address, method, methodName, provider, days, price, preTaxPrice, discount, taxRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Shipping {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    surname1: ").append(toIndentedString(surname1)).append("\n");
    sb.append("    surname2: ").append(toIndentedString(surname2)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    preTaxPrice: ").append(toIndentedString(preTaxPrice)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("firstName");
    openapiFields.add("surname1");
    openapiFields.add("surname2");
    openapiFields.add("phone");
    openapiFields.add("address");
    openapiFields.add("method");
    openapiFields.add("methodName");
    openapiFields.add("provider");
    openapiFields.add("days");
    openapiFields.add("price");
    openapiFields.add("preTaxPrice");
    openapiFields.add("discount");
    openapiFields.add("taxRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Shipping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Shipping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Shipping is not found in the empty JSON string", Shipping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Shipping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Shipping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("surname1") != null && !jsonObj.get("surname1").isJsonNull()) && !jsonObj.get("surname1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname1").toString()));
      }
      if ((jsonObj.get("surname2") != null && !jsonObj.get("surname2").isJsonNull()) && !jsonObj.get("surname2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname2").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        MethodEnum.validateJsonElement(jsonObj.get("method"));
      }
      if ((jsonObj.get("methodName") != null && !jsonObj.get("methodName").isJsonNull()) && !jsonObj.get("methodName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `methodName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("methodName").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if ((jsonObj.get("preTaxPrice") != null && !jsonObj.get("preTaxPrice").isJsonNull()) && !jsonObj.get("preTaxPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preTaxPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preTaxPrice").toString()));
      }
      if ((jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull()) && !jsonObj.get("discount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount").toString()));
      }
      if ((jsonObj.get("taxRate") != null && !jsonObj.get("taxRate").isJsonNull()) && !jsonObj.get("taxRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxRate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Shipping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Shipping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Shipping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Shipping.class));

       return (TypeAdapter<T>) new TypeAdapter<Shipping>() {
           @Override
           public void write(JsonWriter out, Shipping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Shipping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Shipping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Shipping
   * @throws IOException if the JSON string is invalid with respect to Shipping
   */
  public static Shipping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Shipping.class);
  }

  /**
   * Convert an instance of Shipping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

