/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;
import org.openapitools.client.model.PaymentCost;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class Payment {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_PAYMENT_PLAN_ID = "paymentPlanId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PLAN_ID)
  private UUID paymentPlanId;

  public static final String SERIALIZED_NAME_EXTERNAL_TRANSACTION_ID = "externalTransactionId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TRANSACTION_ID)
  private String externalTransactionId;

  /**
   * Type of payment (initial, recurrent, final, etc.)
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FIRST_PAYMENT("FIRST_PAYMENT"),
    
    INSTALMENT("INSTALMENT"),
    
    LAST_PAYMENT("LAST_PAYMENT"),
    
    DOWN_PAYMENT("DOWN_PAYMENT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Payment method used (e.g. VISA, MASTERCARD, SEPA debit, etc.)
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
  public enum PaymentMethodEnum {
    AFTERPAY("AFTERPAY"),
    
    AMEX("AMEX"),
    
    APPLEPAY("APPLEPAY"),
    
    BANKTRANS("BANKTRANS"),
    
    DIRECTBANK("DIRECTBANK"),
    
    DINERS("DINERS"),
    
    DISCOVER("DISCOVER"),
    
    GOOGLEPAY("GOOGLEPAY"),
    
    JCB("JCB"),
    
    KLARNA("KLARNA"),
    
    MAESTRO("MAESTRO"),
    
    MASTERCARD("MASTERCARD"),
    
    PAYAFTER("PAYAFTER"),
    
    PAYPAL("PAYPAL"),
    
    UNIONPAY("UNIONPAY"),
    
    VISA("VISA");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_AMOUNT_REFUNDED = "amountRefunded";
  @SerializedName(SERIALIZED_NAME_AMOUNT_REFUNDED)
  private BigDecimal amountRefunded;

  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private Set<PaymentCost> costs = new LinkedHashSet<>();

  /**
   * Payment provider processing the Payment
   */
  @JsonAdapter(PaymentProcessorEnum.Adapter.class)
  public enum PaymentProcessorEnum {
    MULTISAFEPAY("MULTISAFEPAY"),
    
    STRIPE("STRIPE");

    private String value;

    PaymentProcessorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentProcessorEnum fromValue(String value) {
      for (PaymentProcessorEnum b : PaymentProcessorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentProcessorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentProcessorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentProcessorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentProcessorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentProcessorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_PROCESSOR = "paymentProcessor";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PROCESSOR)
  private PaymentProcessorEnum paymentProcessor;

  public static final String SERIALIZED_NAME_PROCESSOR_PAYMENT_ID = "processorPaymentId";
  @SerializedName(SERIALIZED_NAME_PROCESSOR_PAYMENT_ID)
  private String processorPaymentId;

  /**
   * Currency in which the Payment is denominated
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    AED("AED"),
    
    AFN("AFN"),
    
    ALL("ALL"),
    
    AMD("AMD"),
    
    ANG("ANG"),
    
    AOA("AOA"),
    
    ARS("ARS"),
    
    AUD("AUD"),
    
    AWG("AWG"),
    
    AZN("AZN"),
    
    BAM("BAM"),
    
    BBD("BBD"),
    
    BDT("BDT"),
    
    BGN("BGN"),
    
    BHD("BHD"),
    
    BIF("BIF"),
    
    BMD("BMD"),
    
    BND("BND"),
    
    BOB("BOB"),
    
    BRL("BRL"),
    
    BSD("BSD"),
    
    BTN("BTN"),
    
    BWP("BWP"),
    
    BYR("BYR"),
    
    BZD("BZD"),
    
    CAD("CAD"),
    
    CDF("CDF"),
    
    CHF("CHF"),
    
    CLP("CLP"),
    
    CNY("CNY"),
    
    COP("COP"),
    
    CRC("CRC"),
    
    CUC("CUC"),
    
    CUP("CUP"),
    
    CVE("CVE"),
    
    CZK("CZK"),
    
    DJF("DJF"),
    
    DKK("DKK"),
    
    DOP("DOP"),
    
    DZD("DZD"),
    
    EGP("EGP"),
    
    ERN("ERN"),
    
    ETB("ETB"),
    
    EUR("EUR"),
    
    FJD("FJD"),
    
    FKP("FKP"),
    
    GBP("GBP"),
    
    GEL("GEL"),
    
    GGP("GGP"),
    
    GHS("GHS"),
    
    GIP("GIP"),
    
    GMD("GMD"),
    
    GNF("GNF"),
    
    GTQ("GTQ"),
    
    GYD("GYD"),
    
    HKD("HKD"),
    
    HNL("HNL"),
    
    HRK("HRK"),
    
    HTG("HTG"),
    
    HUF("HUF"),
    
    IDR("IDR"),
    
    ILS("ILS"),
    
    IMP("IMP"),
    
    INR("INR"),
    
    IQD("IQD"),
    
    IRR("IRR"),
    
    ISK("ISK"),
    
    JEP("JEP"),
    
    JMD("JMD"),
    
    JOD("JOD"),
    
    JPY("JPY"),
    
    KES("KES"),
    
    KGS("KGS"),
    
    KHR("KHR"),
    
    KMF("KMF"),
    
    KPW("KPW"),
    
    KRW("KRW"),
    
    KWD("KWD"),
    
    KYD("KYD"),
    
    KZT("KZT"),
    
    LAK("LAK"),
    
    LBP("LBP"),
    
    LKR("LKR"),
    
    LRD("LRD"),
    
    LSL("LSL"),
    
    LYD("LYD"),
    
    MAD("MAD"),
    
    MDL("MDL"),
    
    MGA("MGA"),
    
    MKD("MKD"),
    
    MMK("MMK"),
    
    MNT("MNT"),
    
    MOP("MOP"),
    
    MRO("MRO"),
    
    MUR("MUR"),
    
    MVR("MVR"),
    
    MWK("MWK"),
    
    MXN("MXN"),
    
    MYR("MYR"),
    
    MZN("MZN"),
    
    NAD("NAD"),
    
    NGN("NGN"),
    
    NIO("NIO"),
    
    NOK("NOK"),
    
    NPR("NPR"),
    
    NZD("NZD"),
    
    OMR("OMR"),
    
    PAB("PAB"),
    
    PEN("PEN"),
    
    PGK("PGK"),
    
    PHP("PHP"),
    
    PKR("PKR"),
    
    PLN("PLN"),
    
    PYG("PYG"),
    
    QAR("QAR"),
    
    RON("RON"),
    
    RSD("RSD"),
    
    RUB("RUB"),
    
    RWF("RWF"),
    
    SAR("SAR"),
    
    SBD("SBD"),
    
    SCR("SCR"),
    
    SDG("SDG"),
    
    SEK("SEK"),
    
    SGD("SGD"),
    
    SHP("SHP"),
    
    SLL("SLL"),
    
    SOS("SOS"),
    
    SPL("SPL"),
    
    SRD("SRD"),
    
    STD("STD"),
    
    SVC("SVC"),
    
    SYP("SYP"),
    
    SZL("SZL"),
    
    THB("THB"),
    
    TJS("TJS"),
    
    TMT("TMT"),
    
    TND("TND"),
    
    TOP("TOP"),
    
    TRY("TRY"),
    
    TTD("TTD"),
    
    TVD("TVD"),
    
    TWD("TWD"),
    
    TZS("TZS"),
    
    UAH("UAH"),
    
    UGX("UGX"),
    
    USD("USD"),
    
    UYU("UYU"),
    
    UZS("UZS"),
    
    VEF("VEF"),
    
    VND("VND"),
    
    VUV("VUV"),
    
    WST("WST"),
    
    XAF("XAF"),
    
    XCD("XCD"),
    
    XDR("XDR"),
    
    XOF("XOF"),
    
    XPF("XPF"),
    
    YER("YER"),
    
    ZAR("ZAR"),
    
    ZMW("ZMW"),
    
    ZWD("ZWD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public static final String SERIALIZED_NAME_PAYMENT_NUMBER = "paymentNumber";
  @SerializedName(SERIALIZED_NAME_PAYMENT_NUMBER)
  private Integer paymentNumber;

  /**
   * Current status of the Payment
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NOT_DUE("NOT_DUE"),
    
    DUE("DUE"),
    
    AUTHORIZED("AUTHORIZED"),
    
    INITIALIZED("INITIALIZED"),
    
    CHARGEDBACK("CHARGEDBACK"),
    
    COMPLETED("COMPLETED"),
    
    COMPLETED_IN_STORE("COMPLETED_IN_STORE"),
    
    UNCLEARED("UNCLEARED"),
    
    RESERVED("RESERVED"),
    
    REFUNDED("REFUNDED"),
    
    PARTIAL_REFUNDED("PARTIAL_REFUNDED"),
    
    DECLINED("DECLINED"),
    
    EXPIRED("EXPIRED"),
    
    VOID("VOID"),
    
    ERROR("ERROR");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_RESULT_CODE = "resultCode";
  @SerializedName(SERIALIZED_NAME_RESULT_CODE)
  private String resultCode;

  public static final String SERIALIZED_NAME_RESULT_DESCRIPTION = "resultDescription";
  @SerializedName(SERIALIZED_NAME_RESULT_DESCRIPTION)
  private String resultDescription;

  public static final String SERIALIZED_NAME_ERROR_DESCRIPTION = "errorDescription";
  @SerializedName(SERIALIZED_NAME_ERROR_DESCRIPTION)
  private String errorDescription;

  public Payment() {
  }

  public Payment id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the Payment
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public Payment externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * External identifier of the Payment Plan
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public Payment paymentPlanId(UUID paymentPlanId) {
    this.paymentPlanId = paymentPlanId;
    return this;
  }

  /**
   * The unique identifier of the Payment Plan
   * @return paymentPlanId
   */
  @javax.annotation.Nullable
  public UUID getPaymentPlanId() {
    return paymentPlanId;
  }

  public void setPaymentPlanId(UUID paymentPlanId) {
    this.paymentPlanId = paymentPlanId;
  }


  public Payment externalTransactionId(String externalTransactionId) {
    this.externalTransactionId = externalTransactionId;
    return this;
  }

  /**
   * External identifier of the Payment
   * @return externalTransactionId
   */
  @javax.annotation.Nullable
  public String getExternalTransactionId() {
    return externalTransactionId;
  }

  public void setExternalTransactionId(String externalTransactionId) {
    this.externalTransactionId = externalTransactionId;
  }


  public Payment type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of payment (initial, recurrent, final, etc.)
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Payment paymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * Payment method used (e.g. VISA, MASTERCARD, SEPA debit, etc.)
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Payment amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount to be paid
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public Payment amountRefunded(BigDecimal amountRefunded) {
    this.amountRefunded = amountRefunded;
    return this;
  }

  /**
   * Amount that has been refunded in relation with the Payment
   * @return amountRefunded
   */
  @javax.annotation.Nullable
  public BigDecimal getAmountRefunded() {
    return amountRefunded;
  }

  public void setAmountRefunded(BigDecimal amountRefunded) {
    this.amountRefunded = amountRefunded;
  }


  public Payment costs(Set<PaymentCost> costs) {
    this.costs = costs;
    return this;
  }

  public Payment addCostsItem(PaymentCost costsItem) {
    if (this.costs == null) {
      this.costs = new LinkedHashSet<>();
    }
    this.costs.add(costsItem);
    return this;
  }

  /**
   * Represents the collection of costs from a payment
   * @return costs
   */
  @javax.annotation.Nullable
  public Set<PaymentCost> getCosts() {
    return costs;
  }

  public void setCosts(Set<PaymentCost> costs) {
    this.costs = costs;
  }


  public Payment paymentProcessor(PaymentProcessorEnum paymentProcessor) {
    this.paymentProcessor = paymentProcessor;
    return this;
  }

  /**
   * Payment provider processing the Payment
   * @return paymentProcessor
   */
  @javax.annotation.Nullable
  public PaymentProcessorEnum getPaymentProcessor() {
    return paymentProcessor;
  }

  public void setPaymentProcessor(PaymentProcessorEnum paymentProcessor) {
    this.paymentProcessor = paymentProcessor;
  }


  public Payment processorPaymentId(String processorPaymentId) {
    this.processorPaymentId = processorPaymentId;
    return this;
  }

  /**
   * Id used by the payment processor to uniquely identify the Payment
   * @return processorPaymentId
   */
  @javax.annotation.Nullable
  public String getProcessorPaymentId() {
    return processorPaymentId;
  }

  public void setProcessorPaymentId(String processorPaymentId) {
    this.processorPaymentId = processorPaymentId;
  }


  public Payment currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency in which the Payment is denominated
   * @return currency
   */
  @javax.annotation.Nullable
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public Payment dueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Instant when the Payment becomes due
   * @return dueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }


  public Payment paymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

  /**
   * Instant when the Payment was successfully paid
   * @return paymentDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }

  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }


  public Payment paymentNumber(Integer paymentNumber) {
    this.paymentNumber = paymentNumber;
    return this;
  }

  /**
   * Payment number order in PaymentPlan
   * @return paymentNumber
   */
  @javax.annotation.Nullable
  public Integer getPaymentNumber() {
    return paymentNumber;
  }

  public void setPaymentNumber(Integer paymentNumber) {
    this.paymentNumber = paymentNumber;
  }


  public Payment status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of the Payment
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Payment resultCode(String resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  /**
   * Result
   * @return resultCode
   */
  @javax.annotation.Nullable
  public String getResultCode() {
    return resultCode;
  }

  public void setResultCode(String resultCode) {
    this.resultCode = resultCode;
  }


  public Payment resultDescription(String resultDescription) {
    this.resultDescription = resultDescription;
    return this;
  }

  /**
   * Result description
   * @return resultDescription
   */
  @javax.annotation.Nullable
  public String getResultDescription() {
    return resultDescription;
  }

  public void setResultDescription(String resultDescription) {
    this.resultDescription = resultDescription;
  }


  public Payment errorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
    return this;
  }

  /**
   * Get errorDescription
   * @return errorDescription
   */
  @javax.annotation.Nullable
  public String getErrorDescription() {
    return errorDescription;
  }

  public void setErrorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.id, payment.id) &&
        Objects.equals(this.externalId, payment.externalId) &&
        Objects.equals(this.paymentPlanId, payment.paymentPlanId) &&
        Objects.equals(this.externalTransactionId, payment.externalTransactionId) &&
        Objects.equals(this.type, payment.type) &&
        Objects.equals(this.paymentMethod, payment.paymentMethod) &&
        Objects.equals(this.amount, payment.amount) &&
        Objects.equals(this.amountRefunded, payment.amountRefunded) &&
        Objects.equals(this.costs, payment.costs) &&
        Objects.equals(this.paymentProcessor, payment.paymentProcessor) &&
        Objects.equals(this.processorPaymentId, payment.processorPaymentId) &&
        Objects.equals(this.currency, payment.currency) &&
        Objects.equals(this.dueDate, payment.dueDate) &&
        Objects.equals(this.paymentDate, payment.paymentDate) &&
        Objects.equals(this.paymentNumber, payment.paymentNumber) &&
        Objects.equals(this.status, payment.status) &&
        Objects.equals(this.resultCode, payment.resultCode) &&
        Objects.equals(this.resultDescription, payment.resultDescription) &&
        Objects.equals(this.errorDescription, payment.errorDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, externalId, paymentPlanId, externalTransactionId, type, paymentMethod, amount, amountRefunded, costs, paymentProcessor, processorPaymentId, currency, dueDate, paymentDate, paymentNumber, status, resultCode, resultDescription, errorDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    paymentPlanId: ").append(toIndentedString(paymentPlanId)).append("\n");
    sb.append("    externalTransactionId: ").append(toIndentedString(externalTransactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountRefunded: ").append(toIndentedString(amountRefunded)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    paymentProcessor: ").append(toIndentedString(paymentProcessor)).append("\n");
    sb.append("    processorPaymentId: ").append(toIndentedString(processorPaymentId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    paymentNumber: ").append(toIndentedString(paymentNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("    resultDescription: ").append(toIndentedString(resultDescription)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("externalId");
    openapiFields.add("paymentPlanId");
    openapiFields.add("externalTransactionId");
    openapiFields.add("type");
    openapiFields.add("paymentMethod");
    openapiFields.add("amount");
    openapiFields.add("amountRefunded");
    openapiFields.add("costs");
    openapiFields.add("paymentProcessor");
    openapiFields.add("processorPaymentId");
    openapiFields.add("currency");
    openapiFields.add("dueDate");
    openapiFields.add("paymentDate");
    openapiFields.add("paymentNumber");
    openapiFields.add("status");
    openapiFields.add("resultCode");
    openapiFields.add("resultDescription");
    openapiFields.add("errorDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Payment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Payment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payment is not found in the empty JSON string", Payment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Payment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Payment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("paymentPlanId") != null && !jsonObj.get("paymentPlanId").isJsonNull()) && !jsonObj.get("paymentPlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentPlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentPlanId").toString()));
      }
      if ((jsonObj.get("externalTransactionId") != null && !jsonObj.get("externalTransactionId").isJsonNull()) && !jsonObj.get("externalTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalTransactionId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) && !jsonObj.get("paymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMethod").toString()));
      }
      // validate the optional field `paymentMethod`
      if (jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) {
        PaymentMethodEnum.validateJsonElement(jsonObj.get("paymentMethod"));
      }
      if (jsonObj.get("costs") != null && !jsonObj.get("costs").isJsonNull()) {
        JsonArray jsonArraycosts = jsonObj.getAsJsonArray("costs");
        if (jsonArraycosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("costs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `costs` to be an array in the JSON string but got `%s`", jsonObj.get("costs").toString()));
          }

          // validate the optional field `costs` (array)
          for (int i = 0; i < jsonArraycosts.size(); i++) {
            PaymentCost.validateJsonElement(jsonArraycosts.get(i));
          };
        }
      }
      if ((jsonObj.get("paymentProcessor") != null && !jsonObj.get("paymentProcessor").isJsonNull()) && !jsonObj.get("paymentProcessor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentProcessor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentProcessor").toString()));
      }
      // validate the optional field `paymentProcessor`
      if (jsonObj.get("paymentProcessor") != null && !jsonObj.get("paymentProcessor").isJsonNull()) {
        PaymentProcessorEnum.validateJsonElement(jsonObj.get("paymentProcessor"));
      }
      if ((jsonObj.get("processorPaymentId") != null && !jsonObj.get("processorPaymentId").isJsonNull()) && !jsonObj.get("processorPaymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processorPaymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processorPaymentId").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("resultCode") != null && !jsonObj.get("resultCode").isJsonNull()) && !jsonObj.get("resultCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultCode").toString()));
      }
      if ((jsonObj.get("resultDescription") != null && !jsonObj.get("resultDescription").isJsonNull()) && !jsonObj.get("resultDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultDescription").toString()));
      }
      if ((jsonObj.get("errorDescription") != null && !jsonObj.get("errorDescription").isJsonNull()) && !jsonObj.get("errorDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payment.class));

       return (TypeAdapter<T>) new TypeAdapter<Payment>() {
           @Override
           public void write(JsonWriter out, Payment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Payment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Payment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Payment
   * @throws IOException if the JSON string is invalid with respect to Payment
   */
  public static Payment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payment.class);
  }

  /**
   * Convert an instance of Payment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

