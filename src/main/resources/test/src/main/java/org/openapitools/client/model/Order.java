/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Billing;
import org.openapitools.client.model.Item;
import org.openapitools.client.model.OrderHistory;
import org.openapitools.client.model.Shipping;
import org.openapitools.client.model.Vehicle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Includes the details of the good or service that is going to be financed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class Order {
  public static final String SERIALIZED_NAME_GOODS_TYPE = "goodsType";
  @SerializedName(SERIALIZED_NAME_GOODS_TYPE)
  private String goodsType;

  /**
   * The duration of the service/s sold (it doesn&#39;t apply to the sale of goods).
   */
  @JsonAdapter(ServiceDurationEnum.Adapter.class)
  public enum ServiceDurationEnum {
    ZERO_TO_THREE_MONTHS("ZERO_TO_THREE_MONTHS"),
    
    THREE_TO_SIX_MONTHS("THREE_TO_SIX_MONTHS"),
    
    SIX_TO_NINE_MONTHS("SIX_TO_NINE_MONTHS"),
    
    NINE_TO_TWELVE_MONTHS("NINE_TO_TWELVE_MONTHS"),
    
    TWELVE_TO_EIGHTEEN_MONTHS("TWELVE_TO_EIGHTEEN_MONTHS"),
    
    EIGHTEEN_TO_TWENTY_FOUR_MONTHS("EIGHTEEN_TO_TWENTY_FOUR_MONTHS"),
    
    TWENTY_FOUR_TO_THIRTY_MONTHS("TWENTY_FOUR_TO_THIRTY_MONTHS"),
    
    MORE_THAN_THIRTY_MONTHS("MORE_THAN_THIRTY_MONTHS");

    private String value;

    ServiceDurationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceDurationEnum fromValue(String value) {
      for (ServiceDurationEnum b : ServiceDurationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceDurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceDurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceDurationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceDurationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceDurationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_DURATION = "serviceDuration";
  @SerializedName(SERIALIZED_NAME_SERVICE_DURATION)
  private ServiceDurationEnum serviceDuration;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_PURCHASE_AMOUNT = "purchaseAmount";
  @SerializedName(SERIALIZED_NAME_PURCHASE_AMOUNT)
  private String purchaseAmount;

  public static final String SERIALIZED_NAME_VEHICLE = "vehicle";
  @SerializedName(SERIALIZED_NAME_VEHICLE)
  private Vehicle vehicle;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private Set<Item> items = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private Billing billing;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private Shipping shipping;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private OrderHistory history;

  public Order() {
  }

  public Order goodsType(String goodsType) {
    this.goodsType = goodsType;
    return this;
  }

  /**
   * Code associated to the good/service sold. The available codes are dependant on the specific merchant and must be provided by Lendismart.
   * @return goodsType
   */
  @javax.annotation.Nullable
  public String getGoodsType() {
    return goodsType;
  }

  public void setGoodsType(String goodsType) {
    this.goodsType = goodsType;
  }


  public Order serviceDuration(ServiceDurationEnum serviceDuration) {
    this.serviceDuration = serviceDuration;
    return this;
  }

  /**
   * The duration of the service/s sold (it doesn&#39;t apply to the sale of goods).
   * @return serviceDuration
   */
  @javax.annotation.Nullable
  public ServiceDurationEnum getServiceDuration() {
    return serviceDuration;
  }

  public void setServiceDuration(ServiceDurationEnum serviceDuration) {
    this.serviceDuration = serviceDuration;
  }


  public Order reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * This field can be used by the merchant to identify the order to which the loan is referring.
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public Order purchaseAmount(String purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
    return this;
  }

  /**
   * The total amount of the purchase.
   * @return purchaseAmount
   */
  @javax.annotation.Nullable
  public String getPurchaseAmount() {
    return purchaseAmount;
  }

  public void setPurchaseAmount(String purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
  }


  public Order vehicle(Vehicle vehicle) {
    this.vehicle = vehicle;
    return this;
  }

  /**
   * Get vehicle
   * @return vehicle
   */
  @javax.annotation.Nullable
  public Vehicle getVehicle() {
    return vehicle;
  }

  public void setVehicle(Vehicle vehicle) {
    this.vehicle = vehicle;
  }


  public Order items(Set<Item> items) {
    this.items = items;
    return this;
  }

  public Order addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new LinkedHashSet<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Optional field that represents the collection items included in the order (by default this field is not required).
   * @return items
   */
  @javax.annotation.Nullable
  public Set<Item> getItems() {
    return items;
  }

  public void setItems(Set<Item> items) {
    this.items = items;
  }


  public Order billing(Billing billing) {
    this.billing = billing;
    return this;
  }

  /**
   * Get billing
   * @return billing
   */
  @javax.annotation.Nullable
  public Billing getBilling() {
    return billing;
  }

  public void setBilling(Billing billing) {
    this.billing = billing;
  }


  public Order shipping(Shipping shipping) {
    this.shipping = shipping;
    return this;
  }

  /**
   * Get shipping
   * @return shipping
   */
  @javax.annotation.Nullable
  public Shipping getShipping() {
    return shipping;
  }

  public void setShipping(Shipping shipping) {
    this.shipping = shipping;
  }


  public Order history(OrderHistory history) {
    this.history = history;
    return this;
  }

  /**
   * Get history
   * @return history
   */
  @javax.annotation.Nullable
  public OrderHistory getHistory() {
    return history;
  }

  public void setHistory(OrderHistory history) {
    this.history = history;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.goodsType, order.goodsType) &&
        Objects.equals(this.serviceDuration, order.serviceDuration) &&
        Objects.equals(this.reference, order.reference) &&
        Objects.equals(this.purchaseAmount, order.purchaseAmount) &&
        Objects.equals(this.vehicle, order.vehicle) &&
        Objects.equals(this.items, order.items) &&
        Objects.equals(this.billing, order.billing) &&
        Objects.equals(this.shipping, order.shipping) &&
        Objects.equals(this.history, order.history);
  }

  @Override
  public int hashCode() {
    return Objects.hash(goodsType, serviceDuration, reference, purchaseAmount, vehicle, items, billing, shipping, history);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    goodsType: ").append(toIndentedString(goodsType)).append("\n");
    sb.append("    serviceDuration: ").append(toIndentedString(serviceDuration)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    purchaseAmount: ").append(toIndentedString(purchaseAmount)).append("\n");
    sb.append("    vehicle: ").append(toIndentedString(vehicle)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("goodsType");
    openapiFields.add("serviceDuration");
    openapiFields.add("reference");
    openapiFields.add("purchaseAmount");
    openapiFields.add("vehicle");
    openapiFields.add("items");
    openapiFields.add("billing");
    openapiFields.add("shipping");
    openapiFields.add("history");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Order
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("goodsType") != null && !jsonObj.get("goodsType").isJsonNull()) && !jsonObj.get("goodsType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goodsType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goodsType").toString()));
      }
      if ((jsonObj.get("serviceDuration") != null && !jsonObj.get("serviceDuration").isJsonNull()) && !jsonObj.get("serviceDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDuration").toString()));
      }
      // validate the optional field `serviceDuration`
      if (jsonObj.get("serviceDuration") != null && !jsonObj.get("serviceDuration").isJsonNull()) {
        ServiceDurationEnum.validateJsonElement(jsonObj.get("serviceDuration"));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("purchaseAmount") != null && !jsonObj.get("purchaseAmount").isJsonNull()) && !jsonObj.get("purchaseAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseAmount").toString()));
      }
      // validate the optional field `vehicle`
      if (jsonObj.get("vehicle") != null && !jsonObj.get("vehicle").isJsonNull()) {
        Vehicle.validateJsonElement(jsonObj.get("vehicle"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            Item.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        Billing.validateJsonElement(jsonObj.get("billing"));
      }
      // validate the optional field `shipping`
      if (jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) {
        Shipping.validateJsonElement(jsonObj.get("shipping"));
      }
      // validate the optional field `history`
      if (jsonObj.get("history") != null && !jsonObj.get("history").isJsonNull()) {
        OrderHistory.validateJsonElement(jsonObj.get("history"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Order given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Order
   * @throws IOException if the JSON string is invalid with respect to Order
   */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

  /**
   * Convert an instance of Order to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

