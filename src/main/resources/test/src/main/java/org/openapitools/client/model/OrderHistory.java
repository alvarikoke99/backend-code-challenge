/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;
import org.openapitools.client.model.PreviousOrder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Customer history in the merchant&#39;s shop
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class OrderHistory {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_CUSTOMER_SINCE = "customerSince";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SINCE)
  private OffsetDateTime customerSince;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private String rating;

  public static final String SERIALIZED_NAME_LAST_LOGIN = "lastLogin";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN)
  private OffsetDateTime lastLogin;

  public static final String SERIALIZED_NAME_COMPLETED_ORDERS_COUNT = "completedOrdersCount";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ORDERS_COUNT)
  private Integer completedOrdersCount;

  public static final String SERIALIZED_NAME_COMPLETED_ORDERS_AMOUNT = "completedOrdersAmount";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ORDERS_AMOUNT)
  private BigDecimal completedOrdersAmount;

  public static final String SERIALIZED_NAME_PREVIOUS_ORDERS = "previousOrders";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_ORDERS)
  private Set<PreviousOrder> previousOrders = new LinkedHashSet<>();

  public OrderHistory() {
  }

  public OrderHistory id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public OrderHistory customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Customer ID in the shop.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public OrderHistory customerSince(OffsetDateTime customerSince) {
    this.customerSince = customerSince;
    return this;
  }

  /**
   * Timestamp of the account creation.
   * @return customerSince
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCustomerSince() {
    return customerSince;
  }

  public void setCustomerSince(OffsetDateTime customerSince) {
    this.customerSince = customerSince;
  }


  public OrderHistory rating(String rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Customer rating according to the merchant&#39;s own scoring.
   * @return rating
   */
  @javax.annotation.Nullable
  public String getRating() {
    return rating;
  }

  public void setRating(String rating) {
    this.rating = rating;
  }


  public OrderHistory lastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
    return this;
  }

  /**
   * Timestamp of the customer&#39;s last login to the merchant&#39;s online shop.
   * @return lastLogin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }

  public void setLastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
  }


  public OrderHistory completedOrdersCount(Integer completedOrdersCount) {
    this.completedOrdersCount = completedOrdersCount;
    return this;
  }

  /**
   * Number of orders completed by the customer since the account was created.
   * @return completedOrdersCount
   */
  @javax.annotation.Nullable
  public Integer getCompletedOrdersCount() {
    return completedOrdersCount;
  }

  public void setCompletedOrdersCount(Integer completedOrdersCount) {
    this.completedOrdersCount = completedOrdersCount;
  }


  public OrderHistory completedOrdersAmount(BigDecimal completedOrdersAmount) {
    this.completedOrdersAmount = completedOrdersAmount;
    return this;
  }

  /**
   * Total amount spent on orders completed by the customer since the account was created.
   * @return completedOrdersAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getCompletedOrdersAmount() {
    return completedOrdersAmount;
  }

  public void setCompletedOrdersAmount(BigDecimal completedOrdersAmount) {
    this.completedOrdersAmount = completedOrdersAmount;
  }


  public OrderHistory previousOrders(Set<PreviousOrder> previousOrders) {
    this.previousOrders = previousOrders;
    return this;
  }

  public OrderHistory addPreviousOrdersItem(PreviousOrder previousOrdersItem) {
    if (this.previousOrders == null) {
      this.previousOrders = new LinkedHashSet<>();
    }
    this.previousOrders.add(previousOrdersItem);
    return this;
  }

  /**
   * List of the customer&#39;s most recent orders (up to 10).
   * @return previousOrders
   */
  @javax.annotation.Nullable
  public Set<PreviousOrder> getPreviousOrders() {
    return previousOrders;
  }

  public void setPreviousOrders(Set<PreviousOrder> previousOrders) {
    this.previousOrders = previousOrders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderHistory orderHistory = (OrderHistory) o;
    return Objects.equals(this.id, orderHistory.id) &&
        Objects.equals(this.customerId, orderHistory.customerId) &&
        Objects.equals(this.customerSince, orderHistory.customerSince) &&
        Objects.equals(this.rating, orderHistory.rating) &&
        Objects.equals(this.lastLogin, orderHistory.lastLogin) &&
        Objects.equals(this.completedOrdersCount, orderHistory.completedOrdersCount) &&
        Objects.equals(this.completedOrdersAmount, orderHistory.completedOrdersAmount) &&
        Objects.equals(this.previousOrders, orderHistory.previousOrders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, customerId, customerSince, rating, lastLogin, completedOrdersCount, completedOrdersAmount, previousOrders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderHistory {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerSince: ").append(toIndentedString(customerSince)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    completedOrdersCount: ").append(toIndentedString(completedOrdersCount)).append("\n");
    sb.append("    completedOrdersAmount: ").append(toIndentedString(completedOrdersAmount)).append("\n");
    sb.append("    previousOrders: ").append(toIndentedString(previousOrders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("customerId");
    openapiFields.add("customerSince");
    openapiFields.add("rating");
    openapiFields.add("lastLogin");
    openapiFields.add("completedOrdersCount");
    openapiFields.add("completedOrdersAmount");
    openapiFields.add("previousOrders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderHistory is not found in the empty JSON string", OrderHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) && !jsonObj.get("rating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rating").toString()));
      }
      if (jsonObj.get("previousOrders") != null && !jsonObj.get("previousOrders").isJsonNull()) {
        JsonArray jsonArraypreviousOrders = jsonObj.getAsJsonArray("previousOrders");
        if (jsonArraypreviousOrders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("previousOrders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `previousOrders` to be an array in the JSON string but got `%s`", jsonObj.get("previousOrders").toString()));
          }

          // validate the optional field `previousOrders` (array)
          for (int i = 0; i < jsonArraypreviousOrders.size(); i++) {
            PreviousOrder.validateJsonElement(jsonArraypreviousOrders.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderHistory>() {
           @Override
           public void write(JsonWriter out, OrderHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderHistory
   * @throws IOException if the JSON string is invalid with respect to OrderHistory
   */
  public static OrderHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderHistory.class);
  }

  /**
   * Convert an instance of OrderHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

