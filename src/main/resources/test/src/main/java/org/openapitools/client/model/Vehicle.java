/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information related to the vehicle we&#39;re asking the loan for. Only needed when the goodsType is related to vehicles.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class Vehicle {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * The type of vehicle
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PRIVATE("PRIVATE"),
    
    COMMERCIAL("COMMERCIAL"),
    
    BIKES("BIKES");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * The subtype of vehicle
   */
  @JsonAdapter(SubtypeEnum.Adapter.class)
  public enum SubtypeEnum {
    PASSENGER_CAR("PASSENGER_CAR"),
    
    OFF_ROAD("OFF_ROAD"),
    
    MINIVAN("MINIVAN"),
    
    MICROCAR("MICROCAR"),
    
    SUPERMINI("SUPERMINI"),
    
    LUXURY("LUXURY"),
    
    REFINANCED("REFINANCED"),
    
    MULTIPURPOSE("MULTIPURPOSE"),
    
    TAXI("TAXI"),
    
    AMBULANCE("AMBULANCE"),
    
    CONVERTED("CONVERTED"),
    
    SPECIAL("SPECIAL"),
    
    LIGHT_INDUSTRIAL("LIGHT_INDUSTRIAL"),
    
    MOTORCYCLE("MOTORCYCLE"),
    
    QUAD("QUAD");

    private String value;

    SubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubtypeEnum fromValue(String value) {
      for (SubtypeEnum b : SubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubtypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubtypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBTYPE = "subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  private SubtypeEnum subtype;

  /**
   * The make/brand of the vehicle
   */
  @JsonAdapter(MakeEnum.Adapter.class)
  public enum MakeEnum {
    ABARTH("ABARTH"),
    
    ADIVA("ADIVA"),
    
    ADLY("ADLY"),
    
    AEON("AEON"),
    
    AIWAYS("AIWAYS"),
    
    AIXAM("AIXAM"),
    
    AIYUMO("AIYUMO"),
    
    AJP("AJP"),
    
    ALFA_ROMEO("ALFA_ROMEO"),
    
    ALPINA("ALPINA"),
    
    ALPINE("ALPINE"),
    
    APRILIA("APRILIA"),
    
    ARCTIC_CAT("ARCTIC_CAT"),
    
    ARIIC("ARIIC"),
    
    ARO("ARO"),
    
    ASIA("ASIA"),
    
    ASIA_MOTORS("ASIA_MOTORS"),
    
    ASPID("ASPID"),
    
    ASTON_MARTIN("ASTON_MARTIN"),
    
    ATK("ATK"),
    
    AUDI("AUDI"),
    
    AUSTIN("AUSTIN"),
    
    AUVERLAND("AUVERLAND"),
    
    BAIC("BAIC"),
    
    BENELLI("BENELLI"),
    
    BENTLEY("BENTLEY"),
    
    BERTONE("BERTONE"),
    
    BETA("BETA"),
    
    BIMOTA("BIMOTA"),
    
    BMW("BMW"),
    
    BOMBARDIER("BOMBARDIER"),
    
    BOOM("BOOM"),
    
    BORGWARD("BORGWARD"),
    
    BRIXTON("BRIXTON"),
    
    BUELL("BUELL"),
    
    BUGATTI("BUGATTI"),
    
    BULTACO("BULTACO"),
    
    BYD("BYD"),
    
    CADILLAC("CADILLAC"),
    
    CAGIVA("CAGIVA"),
    
    CAKE("CAKE"),
    
    CAN_AM("CAN_AM"),
    
    CASALINI("CASALINI"),
    
    CATERHAM("CATERHAM"),
    
    CCM("CCM"),
    
    CECTEK("CECTEK"),
    
    CF_MOTO("CF_MOTO"),
    
    CHATENET("CHATENET"),
    
    CHEVROLET("CHEVROLET"),
    
    CHRYSLER("CHRYSLER"),
    
    CITROEN("CITROEN"),
    
    CITYCOCO("CITYCOCO"),
    
    CLIPIC("CLIPIC"),
    
    COOLTRA("COOLTRA"),
    
    CORBIN("CORBIN"),
    
    CORVETTE("CORVETTE"),
    
    CPI_MOTOR("CPI_MOTOR"),
    
    CSR("CSR"),
    
    CUPRA("CUPRA"),
    
    DACIA("DACIA"),
    
    DAELIM("DAELIM"),
    
    DAEWOO("DAEWOO"),
    
    DAF("DAF"),
    
    DAIHATSU("DAIHATSU"),
    
    DAIMLER("DAIMLER"),
    
    DERBI("DERBI"),
    
    DFSK("DFSK"),
    
    DINLI("DINLI"),
    
    DODGE("DODGE"),
    
    DORTON("DORTON"),
    
    DR("DR"),
    
    DS("DS"),
    
    DS4("DS4"),
    
    DUCATI("DUCATI"),
    
    E_MAX("E_MAX"),
    
    EASY_TRIKE("EASY_TRIKE"),
    
    EBROH("EBROH"),
    
    ENERGICA("ENERGICA"),
    
    EVO("EVO"),
    
    FACTORY("FACTORY"),
    
    FANTIC("FANTIC"),
    
    FERRARI("FERRARI"),
    
    FIAT("FIAT"),
    
    FORD("FORD"),
    
    FUN("FUN"),
    
    GALLOPER("GALLOPER"),
    
    GAS_GAS("GAS_GAS"),
    
    GENERIC_MOTOR("GENERIC_MOTOR"),
    
    GIANTCO("GIANTCO"),
    
    GILERA("GILERA"),
    
    GME("GME"),
    
    GOES("GOES"),
    
    GRECAV("GRECAV"),
    
    GTA("GTA"),
    
    GUZZI("GUZZI"),
    
    HANWAY("HANWAY"),
    
    HARLEY_DAVIDSON("HARLEY_DAVIDSON"),
    
    HM("HM"),
    
    HONDA("HONDA"),
    
    HRD("HRD"),
    
    HUATIAN("HUATIAN"),
    
    HUMMER("HUMMER"),
    
    HUONIAO("HUONIAO"),
    
    HUSABERG("HUSABERG"),
    
    HUSQVARNA("HUSQVARNA"),
    
    HYOSUNG("HYOSUNG"),
    
    HYUNDAI("HYUNDAI"),
    
    INDIAN("INDIAN"),
    
    INEOS("INEOS"),
    
    INFINITI("INFINITI"),
    
    INNOCENTI("INNOCENTI"),
    
    INVICTA("INVICTA"),
    
    I_MOTO("I_MOTO"),
    
    IO("IO"),
    
    ISETTA("ISETTA"),
    
    ISUZU("ISUZU"),
    
    ITALJET("ITALJET"),
    
    IVECO("IVECO"),
    
    JAGUAR("JAGUAR"),
    
    JCADI("JCADI"),
    
    JDM("JDM"),
    
    JEEP("JEEP"),
    
    JIAYUAN("JIAYUAN"),
    
    JINCHENG("JINCHENG"),
    
    JONWAY("JONWAY"),
    
    KAIYUN("KAIYUN"),
    
    KAWASAKI("KAWASAKI"),
    
    KEEWAY("KEEWAY"),
    
    KENROD("KENROD"),
    
    KIA("KIA"),
    
    KINROAD("KINROAD"),
    
    KSR("KSR"),
    
    KUBOTA("KUBOTA"),
    
    KTM("KTM"),
    
    KYMCO("KYMCO"),
    
    LADA("LADA"),
    
    LAMBORGHINI("LAMBORGHINI"),
    
    LAMBRETTA("LAMBRETTA"),
    
    LANCIA("LANCIA"),
    
    LAND_ROVER("LAND_ROVER"),
    
    LDV("LDV"),
    
    LEONART("LEONART"),
    
    LEVC("LEVC"),
    
    LEXMOTO("LEXMOTO"),
    
    LEXUS("LEXUS"),
    
    LIFAN("LIFAN"),
    
    LIGIER("LIGIER"),
    
    LIMA("LIMA"),
    
    LINHAI("LINHAI"),
    
    LINK_AND_CO("LINK_AND_CO"),
    
    LML("LML"),
    
    LOTUS("LOTUS"),
    
    MACBOR("MACBOR"),
    
    MAHINDRA("MAHINDRA"),
    
    MALAGUTI("MALAGUTI"),
    
    MAN("MAN"),
    
    MASERATI("MASERATI"),
    
    MASH("MASH"),
    
    MAXUS("MAXUS"),
    
    MAYBACH("MAYBACH"),
    
    MAZDA("MAZDA"),
    
    MBK("MBK"),
    
    MCLAREN("MCLAREN"),
    
    MERCEDES_BENZ("MERCEDES_BENZ"),
    
    MG("MG"),
    
    MICRO_CARD_DUE("MICRO_CARD_DUE"),
    
    MICROCARS("MICROCARS"),
    
    MICROLINO("MICROLINO"),
    
    MINI("MINI"),
    
    MITSUBISHI("MITSUBISHI"),
    
    MITT("MITT"),
    
    MH_MOTORCYCLES("MH_MOTORCYCLES"),
    
    MONDIAL("MONDIAL"),
    
    MONKEY_BIKES("MONKEY_BIKES"),
    
    MONTESA("MONTESA"),
    
    MORGAN("MORGAN"),
    
    MOTIVAS("MOTIVAS"),
    
    MOTO_MORINI("MOTO_MORINI"),
    
    MOTOR_HISPANIA("MOTOR_HISPANIA"),
    
    MOTRON("MOTRON"),
    
    MPM_MOTORS("MPM_MOTORS"),
    
    MTR("MTR"),
    
    MV_AGUSTA("MV_AGUSTA"),
    
    MX_MOTOR("MX_MOTOR"),
    
    MZ_MUZ("MZ_MUZ"),
    
    NEXT("NEXT"),
    
    NEXTEM("NEXTEM"),
    
    NISSAN("NISSAN"),
    
    NIU("NIU"),
    
    NORTON("NORTON"),
    
    ODES("ODES"),
    
    OMODA("OMODA"),
    
    OPEL("OPEL"),
    
    ORCAL("ORCAL"),
    
    OSSA("OSSA"),
    
    PAGANI("PAGANI"),
    
    PEUGEOT("PEUGEOT"),
    
    PGO("PGO"),
    
    PIAGGIO("PIAGGIO"),
    
    POLARIS("POLARIS"),
    
    POLESTAR("POLESTAR"),
    
    PONTIAC("PONTIAC"),
    
    PORSCHE("PORSCHE"),
    
    PUCH("PUCH"),
    
    QUADRO("QUADRO"),
    
    QUAZZAR("QUAZZAR"),
    
    RAM("RAM"),
    
    RAY_ELECTRIC_MOTORS("RAY_ELECTRIC_MOTORS"),
    
    RENAULT("RENAULT"),
    
    RENAULT_TRUCKS("RENAULT_TRUCKS"),
    
    REWACO("REWACO"),
    
    RGNT("RGNT"),
    
    RIDE("RIDE"),
    
    RIEJU("RIEJU"),
    
    RIYA("RIYA"),
    
    ROLLS_ROYCE("ROLLS_ROYCE"),
    
    ROVER("ROVER"),
    
    ROYAL_ALLOY("ROYAL_ALLOY"),
    
    ROYAL_ENFIELD("ROYAL_ENFIELD"),
    
    SAAB("SAAB"),
    
    SACHS("SACHS"),
    
    SANTANA("SANTANA"),
    
    SCANIA("SCANIA"),
    
    SCARABEO("SCARABEO"),
    
    SCOMADI("SCOMADI"),
    
    SCORPA("SCORPA"),
    
    SCRAMBLER_DUCATI("SCRAMBLER_DUCATI"),
    
    SEAT("SEAT"),
    
    SEGWAY("SEGWAY"),
    
    SHERCO("SHERCO"),
    
    SILENCE("SILENCE"),
    
    SMC_SM("SMC_SM"),
    
    SKODA("SKODA"),
    
    SMART("SMART"),
    
    SOKON("SOKON"),
    
    SSANGYONG("SSANGYONG"),
    
    STREETWISE("STREETWISE"),
    
    SUBARU("SUBARU"),
    
    SUMCO("SUMCO"),
    
    SUNRA("SUNRA"),
    
    SUPER_SOCO("SUPER_SOCO"),
    
    SUZUKI("SUZUKI"),
    
    SWM("SWM"),
    
    SYM("SYM"),
    
    TALBOT("TALBOT"),
    
    TATA("TATA"),
    
    TESLA("TESLA"),
    
    TGB("TGB"),
    
    THINK("THINK"),
    
    TINBOT("TINBOT"),
    
    TM("TM"),
    
    TORROT("TORROT"),
    
    TOYOTA("TOYOTA"),
    
    TRIUMPH("TRIUMPH"),
    
    TRS("TRS"),
    
    UM("UM"),
    
    URAL("URAL"),
    
    VECTRIX("VECTRIX"),
    
    VERTEMATI("VERTEMATI"),
    
    VESPA("VESPA"),
    
    VICTORY("VICTORY"),
    
    V_MOTO("V_MOTO"),
    
    VOGE("VOGE"),
    
    VOLKSWAGEN("VOLKSWAGEN"),
    
    VOLTA("VOLTA"),
    
    VOLVO("VOLVO"),
    
    VOXAN("VOXAN"),
    
    WARTBURG("WARTBURG"),
    
    WILDLANDER("WILDLANDER"),
    
    WOTTAN("WOTTAN"),
    
    XEV("XEV"),
    
    YAMAHA("YAMAHA"),
    
    ZERO("ZERO"),
    
    ZIDHOU("ZIDHOU"),
    
    ZITMUV("ZITMUV"),
    
    ZONTES("ZONTES"),
    
    ZOTYE("ZOTYE"),
    
    OTHER_MAKE("OTHER_MAKE");

    private String value;

    MakeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MakeEnum fromValue(String value) {
      for (MakeEnum b : MakeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MakeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MakeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MakeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MakeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MakeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private MakeEnum make;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_FIRST_REGISTRATION_DATE = "firstRegistrationDate";
  @SerializedName(SERIALIZED_NAME_FIRST_REGISTRATION_DATE)
  private LocalDate firstRegistrationDate;

  public static final String SERIALIZED_NAME_VIN = "vin";
  @SerializedName(SERIALIZED_NAME_VIN)
  private String vin;

  public static final String SERIALIZED_NAME_MILEAGE = "mileage";
  @SerializedName(SERIALIZED_NAME_MILEAGE)
  private Integer mileage;

  public static final String SERIALIZED_NAME_VERSION_CODE = "versionCode";
  @SerializedName(SERIALIZED_NAME_VERSION_CODE)
  private String versionCode;

  public static final String SERIALIZED_NAME_REREGISTERED = "reregistered";
  @SerializedName(SERIALIZED_NAME_REREGISTERED)
  private Boolean reregistered;

  public Vehicle() {
  }

  public Vehicle id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public Vehicle type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of vehicle
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Vehicle subtype(SubtypeEnum subtype) {
    this.subtype = subtype;
    return this;
  }

  /**
   * The subtype of vehicle
   * @return subtype
   */
  @javax.annotation.Nullable
  public SubtypeEnum getSubtype() {
    return subtype;
  }

  public void setSubtype(SubtypeEnum subtype) {
    this.subtype = subtype;
  }


  public Vehicle make(MakeEnum make) {
    this.make = make;
    return this;
  }

  /**
   * The make/brand of the vehicle
   * @return make
   */
  @javax.annotation.Nullable
  public MakeEnum getMake() {
    return make;
  }

  public void setMake(MakeEnum make) {
    this.make = make;
  }


  public Vehicle registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * The registration number
   * @return registrationNumber
   */
  @javax.annotation.Nullable
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public Vehicle firstRegistrationDate(LocalDate firstRegistrationDate) {
    this.firstRegistrationDate = firstRegistrationDate;
    return this;
  }

  /**
   * Date was the vehicle was first registered
   * @return firstRegistrationDate
   */
  @javax.annotation.Nullable
  public LocalDate getFirstRegistrationDate() {
    return firstRegistrationDate;
  }

  public void setFirstRegistrationDate(LocalDate firstRegistrationDate) {
    this.firstRegistrationDate = firstRegistrationDate;
  }


  public Vehicle vin(String vin) {
    this.vin = vin;
    return this;
  }

  /**
   * Vehicle identification number
   * @return vin
   */
  @javax.annotation.Nullable
  public String getVin() {
    return vin;
  }

  public void setVin(String vin) {
    this.vin = vin;
  }


  public Vehicle mileage(Integer mileage) {
    this.mileage = mileage;
    return this;
  }

  /**
   * The number of kilometers traveled by the vehicle
   * @return mileage
   */
  @javax.annotation.Nullable
  public Integer getMileage() {
    return mileage;
  }

  public void setMileage(Integer mileage) {
    this.mileage = mileage;
  }


  public Vehicle versionCode(String versionCode) {
    this.versionCode = versionCode;
    return this;
  }

  /**
   * The national vehicle code
   * @return versionCode
   */
  @javax.annotation.Nullable
  public String getVersionCode() {
    return versionCode;
  }

  public void setVersionCode(String versionCode) {
    this.versionCode = versionCode;
  }


  public Vehicle reregistered(Boolean reregistered) {
    this.reregistered = reregistered;
    return this;
  }

  /**
   * Get reregistered
   * @return reregistered
   */
  @javax.annotation.Nullable
  public Boolean getReregistered() {
    return reregistered;
  }

  public void setReregistered(Boolean reregistered) {
    this.reregistered = reregistered;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vehicle vehicle = (Vehicle) o;
    return Objects.equals(this.id, vehicle.id) &&
        Objects.equals(this.type, vehicle.type) &&
        Objects.equals(this.subtype, vehicle.subtype) &&
        Objects.equals(this.make, vehicle.make) &&
        Objects.equals(this.registrationNumber, vehicle.registrationNumber) &&
        Objects.equals(this.firstRegistrationDate, vehicle.firstRegistrationDate) &&
        Objects.equals(this.vin, vehicle.vin) &&
        Objects.equals(this.mileage, vehicle.mileage) &&
        Objects.equals(this.versionCode, vehicle.versionCode) &&
        Objects.equals(this.reregistered, vehicle.reregistered);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, subtype, make, registrationNumber, firstRegistrationDate, vin, mileage, versionCode, reregistered);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vehicle {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    firstRegistrationDate: ").append(toIndentedString(firstRegistrationDate)).append("\n");
    sb.append("    vin: ").append(toIndentedString(vin)).append("\n");
    sb.append("    mileage: ").append(toIndentedString(mileage)).append("\n");
    sb.append("    versionCode: ").append(toIndentedString(versionCode)).append("\n");
    sb.append("    reregistered: ").append(toIndentedString(reregistered)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("subtype");
    openapiFields.add("make");
    openapiFields.add("registrationNumber");
    openapiFields.add("firstRegistrationDate");
    openapiFields.add("vin");
    openapiFields.add("mileage");
    openapiFields.add("versionCode");
    openapiFields.add("reregistered");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Vehicle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vehicle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vehicle is not found in the empty JSON string", Vehicle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vehicle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vehicle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("subtype") != null && !jsonObj.get("subtype").isJsonNull()) && !jsonObj.get("subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtype").toString()));
      }
      // validate the optional field `subtype`
      if (jsonObj.get("subtype") != null && !jsonObj.get("subtype").isJsonNull()) {
        SubtypeEnum.validateJsonElement(jsonObj.get("subtype"));
      }
      if ((jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) && !jsonObj.get("make").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `make` to be a primitive type in the JSON string but got `%s`", jsonObj.get("make").toString()));
      }
      // validate the optional field `make`
      if (jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) {
        MakeEnum.validateJsonElement(jsonObj.get("make"));
      }
      if ((jsonObj.get("registrationNumber") != null && !jsonObj.get("registrationNumber").isJsonNull()) && !jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      if ((jsonObj.get("vin") != null && !jsonObj.get("vin").isJsonNull()) && !jsonObj.get("vin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vin").toString()));
      }
      if ((jsonObj.get("versionCode") != null && !jsonObj.get("versionCode").isJsonNull()) && !jsonObj.get("versionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vehicle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vehicle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vehicle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vehicle.class));

       return (TypeAdapter<T>) new TypeAdapter<Vehicle>() {
           @Override
           public void write(JsonWriter out, Vehicle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vehicle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Vehicle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Vehicle
   * @throws IOException if the JSON string is invalid with respect to Vehicle
   */
  public static Vehicle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vehicle.class);
  }

  /**
   * Convert an instance of Vehicle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

