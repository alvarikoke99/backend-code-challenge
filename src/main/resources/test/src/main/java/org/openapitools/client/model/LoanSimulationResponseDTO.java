/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.Insurance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LoanSimulationResponseDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class LoanSimulationResponseDTO {
  public static final String SERIALIZED_NAME_PURCHASE_AMOUNT = "purchaseAmount";
  @SerializedName(SERIALIZED_NAME_PURCHASE_AMOUNT)
  private String purchaseAmount;

  public static final String SERIALIZED_NAME_LOAN_AMOUNT = "loanAmount";
  @SerializedName(SERIALIZED_NAME_LOAN_AMOUNT)
  private String loanAmount;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private Integer term;

  public static final String SERIALIZED_NAME_GRACE_PERIOD = "gracePeriod";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD)
  private Integer gracePeriod;

  public static final String SERIALIZED_NAME_OPENING_FEE_PCT = "openingFeePct";
  @SerializedName(SERIALIZED_NAME_OPENING_FEE_PCT)
  private String openingFeePct;

  public static final String SERIALIZED_NAME_OPENING_FEE_COST = "openingFeeCost";
  @SerializedName(SERIALIZED_NAME_OPENING_FEE_COST)
  private String openingFeeCost;

  public static final String SERIALIZED_NAME_OPENING_FEE_UPFRONT = "openingFeeUpfront";
  @SerializedName(SERIALIZED_NAME_OPENING_FEE_UPFRONT)
  private String openingFeeUpfront;

  public static final String SERIALIZED_NAME_INSURANCE_COST = "insuranceCost";
  @SerializedName(SERIALIZED_NAME_INSURANCE_COST)
  private String insuranceCost;

  public static final String SERIALIZED_NAME_INSURANCE_UPFRONT = "insuranceUpfront";
  @SerializedName(SERIALIZED_NAME_INSURANCE_UPFRONT)
  private String insuranceUpfront;

  /**
   * The desired financial product type (e.g. interest-free, interest-bearing, etc.)
   */
  @JsonAdapter(ProductTypeEnum.Adapter.class)
  public enum ProductTypeEnum {
    INTEREST_BEARING("INTEREST_BEARING"),
    
    ZERO_INTEREST("ZERO_INTEREST"),
    
    SUBSIDIZED_INTEREST("SUBSIDIZED_INTEREST"),
    
    OPTION_PLUS("OPTION_PLUS"),
    
    MULTIOPTION("MULTIOPTION"),
    
    LEASING("LEASING"),
    
    REFINANCING("REFINANCING"),
    
    BULLET("BULLET"),
    
    LOAN("LOAN"),
    
    SUBSCRIPTION("SUBSCRIPTION"),
    
    VARIABLE_RATE("VARIABLE_RATE"),
    
    RENTING("RENTING"),
    
    PROMOTION("PROMOTION"),
    
    STANDARD("STANDARD"),
    
    BNPL("BNPL"),
    
    KIA_FLEXIBLE_RANGE_FINANCE("KIA_FLEXIBLE_RANGE_FINANCE"),
    
    KIA_KREDIT("KIA_KREDIT"),
    
    KIA_PROTECCION_CLIENTE("KIA_PROTECCION_CLIENTE"),
    
    KIA_FLEXIPLAN("KIA_FLEXIPLAN");

    private String value;

    ProductTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductTypeEnum fromValue(String value) {
      for (ProductTypeEnum b : ProductTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private ProductTypeEnum productType;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_LABEL = "productTypeLabel";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_LABEL)
  private String productTypeLabel;

  /**
   * The preferred type of fee payment (if not zero)
   */
  @JsonAdapter(FeePaymentTypeEnum.Adapter.class)
  public enum FeePaymentTypeEnum {
    UPFRONT("UPFRONT"),
    
    FINANCED("FINANCED");

    private String value;

    FeePaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeePaymentTypeEnum fromValue(String value) {
      for (FeePaymentTypeEnum b : FeePaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeePaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeePaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeePaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeePaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeePaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEE_PAYMENT_TYPE = "feePaymentType";
  @SerializedName(SERIALIZED_NAME_FEE_PAYMENT_TYPE)
  private FeePaymentTypeEnum feePaymentType;

  public static final String SERIALIZED_NAME_NIR = "nir";
  @SerializedName(SERIALIZED_NAME_NIR)
  private String nir;

  public static final String SERIALIZED_NAME_APR = "apr";
  @SerializedName(SERIALIZED_NAME_APR)
  private String apr;

  public static final String SERIALIZED_NAME_HAS_INSURANCE = "hasInsurance";
  @SerializedName(SERIALIZED_NAME_HAS_INSURANCE)
  private Boolean hasInsurance;

  public static final String SERIALIZED_NAME_DOWN_PAYMENT = "downPayment";
  @SerializedName(SERIALIZED_NAME_DOWN_PAYMENT)
  private String downPayment;

  public static final String SERIALIZED_NAME_MONTHLY_PAYMENT = "monthlyPayment";
  @SerializedName(SERIALIZED_NAME_MONTHLY_PAYMENT)
  private String monthlyPayment;

  public static final String SERIALIZED_NAME_FINAL_PAYMENT = "finalPayment";
  @SerializedName(SERIALIZED_NAME_FINAL_PAYMENT)
  private String finalPayment;

  public static final String SERIALIZED_NAME_TOTAL_PAYMENTS = "totalPayments";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAYMENTS)
  private String totalPayments;

  public static final String SERIALIZED_NAME_TOTAL_COST = "totalCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private String totalCost;

  public static final String SERIALIZED_NAME_TOTAL_INTEREST = "totalInterest";
  @SerializedName(SERIALIZED_NAME_TOTAL_INTEREST)
  private String totalInterest;

  public static final String SERIALIZED_NAME_SIMULATION_MESSAGE = "simulationMessage";
  @SerializedName(SERIALIZED_NAME_SIMULATION_MESSAGE)
  private String simulationMessage;

  public static final String SERIALIZED_NAME_MERCHANT_COST = "merchantCost";
  @SerializedName(SERIALIZED_NAME_MERCHANT_COST)
  private String merchantCost;

  public static final String SERIALIZED_NAME_LENDER_CODE = "lenderCode";
  @SerializedName(SERIALIZED_NAME_LENDER_CODE)
  private String lenderCode;

  public static final String SERIALIZED_NAME_LENDER_NAME = "lenderName";
  @SerializedName(SERIALIZED_NAME_LENDER_NAME)
  private String lenderName;

  public static final String SERIALIZED_NAME_LENDERS = "lenders";
  @SerializedName(SERIALIZED_NAME_LENDERS)
  private Set<String> lenders = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_GOODS_TYPE_CODE = "goodsTypeCode";
  @SerializedName(SERIALIZED_NAME_GOODS_TYPE_CODE)
  private String goodsTypeCode;

  public static final String SERIALIZED_NAME_INSURANCES = "insurances";
  @SerializedName(SERIALIZED_NAME_INSURANCES)
  private List<Insurance> insurances = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public LoanSimulationResponseDTO() {
  }

  public LoanSimulationResponseDTO purchaseAmount(String purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
    return this;
  }

  /**
   * The total amount of the purchase.
   * @return purchaseAmount
   */
  @javax.annotation.Nullable
  public String getPurchaseAmount() {
    return purchaseAmount;
  }

  public void setPurchaseAmount(String purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
  }


  public LoanSimulationResponseDTO loanAmount(String loanAmount) {
    this.loanAmount = loanAmount;
    return this;
  }

  /**
   * The amount that could be financed through the loan (it might differ from the requested amount if maximum/minimum thresholds apply)
   * @return loanAmount
   */
  @javax.annotation.Nullable
  public String getLoanAmount() {
    return loanAmount;
  }

  public void setLoanAmount(String loanAmount) {
    this.loanAmount = loanAmount;
  }


  public LoanSimulationResponseDTO term(Integer term) {
    this.term = term;
    return this;
  }

  /**
   * The desired number of terms in which the loan will be payed.
   * @return term
   */
  @javax.annotation.Nullable
  public Integer getTerm() {
    return term;
  }

  public void setTerm(Integer term) {
    this.term = term;
  }


  public LoanSimulationResponseDTO gracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
    return this;
  }

  /**
   * The desired grace period in months - initial period during which the loan doesn&#39;t have to be repaid
   * @return gracePeriod
   */
  @javax.annotation.Nullable
  public Integer getGracePeriod() {
    return gracePeriod;
  }

  public void setGracePeriod(Integer gracePeriod) {
    this.gracePeriod = gracePeriod;
  }


  public LoanSimulationResponseDTO openingFeePct(String openingFeePct) {
    this.openingFeePct = openingFeePct;
    return this;
  }

  /**
   * The desired maximum opening fee (per currency unit)
   * @return openingFeePct
   */
  @javax.annotation.Nullable
  public String getOpeningFeePct() {
    return openingFeePct;
  }

  public void setOpeningFeePct(String openingFeePct) {
    this.openingFeePct = openingFeePct;
  }


  public LoanSimulationResponseDTO openingFeeCost(String openingFeeCost) {
    this.openingFeeCost = openingFeeCost;
    return this;
  }

  /**
   * Opening fee cost, wether paid upfront or financed over the course of the loan
   * @return openingFeeCost
   */
  @javax.annotation.Nullable
  public String getOpeningFeeCost() {
    return openingFeeCost;
  }

  public void setOpeningFeeCost(String openingFeeCost) {
    this.openingFeeCost = openingFeeCost;
  }


  public LoanSimulationResponseDTO openingFeeUpfront(String openingFeeUpfront) {
    this.openingFeeUpfront = openingFeeUpfront;
    return this;
  }

  /**
   * If the opening fee is greater than zero and the feePaymentType is &#39;UPFRONT&#39;, the opening fee upfront associated to it
   * @return openingFeeUpfront
   */
  @javax.annotation.Nullable
  public String getOpeningFeeUpfront() {
    return openingFeeUpfront;
  }

  public void setOpeningFeeUpfront(String openingFeeUpfront) {
    this.openingFeeUpfront = openingFeeUpfront;
  }


  public LoanSimulationResponseDTO insuranceCost(String insuranceCost) {
    this.insuranceCost = insuranceCost;
    return this;
  }

  /**
   * Cost of the insurance
   * @return insuranceCost
   */
  @javax.annotation.Nullable
  public String getInsuranceCost() {
    return insuranceCost;
  }

  public void setInsuranceCost(String insuranceCost) {
    this.insuranceCost = insuranceCost;
  }


  public LoanSimulationResponseDTO insuranceUpfront(String insuranceUpfront) {
    this.insuranceUpfront = insuranceUpfront;
    return this;
  }

  /**
   * If the loan includes an insurance product and the insurancePaymentType is &#39;UPFRONT&#39;, the insurance upfront associated to it
   * @return insuranceUpfront
   */
  @javax.annotation.Nullable
  public String getInsuranceUpfront() {
    return insuranceUpfront;
  }

  public void setInsuranceUpfront(String insuranceUpfront) {
    this.insuranceUpfront = insuranceUpfront;
  }


  public LoanSimulationResponseDTO productType(ProductTypeEnum productType) {
    this.productType = productType;
    return this;
  }

  /**
   * The desired financial product type (e.g. interest-free, interest-bearing, etc.)
   * @return productType
   */
  @javax.annotation.Nullable
  public ProductTypeEnum getProductType() {
    return productType;
  }

  public void setProductType(ProductTypeEnum productType) {
    this.productType = productType;
  }


  public LoanSimulationResponseDTO productTypeLabel(String productTypeLabel) {
    this.productTypeLabel = productTypeLabel;
    return this;
  }

  /**
   * The translated productType label according to languageTag code
   * @return productTypeLabel
   */
  @javax.annotation.Nullable
  public String getProductTypeLabel() {
    return productTypeLabel;
  }

  public void setProductTypeLabel(String productTypeLabel) {
    this.productTypeLabel = productTypeLabel;
  }


  public LoanSimulationResponseDTO feePaymentType(FeePaymentTypeEnum feePaymentType) {
    this.feePaymentType = feePaymentType;
    return this;
  }

  /**
   * The preferred type of fee payment (if not zero)
   * @return feePaymentType
   */
  @javax.annotation.Nullable
  public FeePaymentTypeEnum getFeePaymentType() {
    return feePaymentType;
  }

  public void setFeePaymentType(FeePaymentTypeEnum feePaymentType) {
    this.feePaymentType = feePaymentType;
  }


  public LoanSimulationResponseDTO nir(String nir) {
    this.nir = nir;
    return this;
  }

  /**
   * The nominal annual rate to apply
   * @return nir
   */
  @javax.annotation.Nullable
  public String getNir() {
    return nir;
  }

  public void setNir(String nir) {
    this.nir = nir;
  }


  public LoanSimulationResponseDTO apr(String apr) {
    this.apr = apr;
    return this;
  }

  /**
   * The annual percentage rate to apply
   * @return apr
   */
  @javax.annotation.Nullable
  public String getApr() {
    return apr;
  }

  public void setApr(String apr) {
    this.apr = apr;
  }


  public LoanSimulationResponseDTO hasInsurance(Boolean hasInsurance) {
    this.hasInsurance = hasInsurance;
    return this;
  }

  /**
   * Whether the loan includes an insurance or not.
   * @return hasInsurance
   */
  @javax.annotation.Nullable
  public Boolean getHasInsurance() {
    return hasInsurance;
  }

  public void setHasInsurance(Boolean hasInsurance) {
    this.hasInsurance = hasInsurance;
  }


  public LoanSimulationResponseDTO downPayment(String downPayment) {
    this.downPayment = downPayment;
    return this;
  }

  /**
   * Down payment to be paid by the applicant in relation with the loan
   * @return downPayment
   */
  @javax.annotation.Nullable
  public String getDownPayment() {
    return downPayment;
  }

  public void setDownPayment(String downPayment) {
    this.downPayment = downPayment;
  }


  public LoanSimulationResponseDTO monthlyPayment(String monthlyPayment) {
    this.monthlyPayment = monthlyPayment;
    return this;
  }

  /**
   * The monthly instalment the applicant will have to pay for the loan
   * @return monthlyPayment
   */
  @javax.annotation.Nullable
  public String getMonthlyPayment() {
    return monthlyPayment;
  }

  public void setMonthlyPayment(String monthlyPayment) {
    this.monthlyPayment = monthlyPayment;
  }


  public LoanSimulationResponseDTO finalPayment(String finalPayment) {
    this.finalPayment = finalPayment;
    return this;
  }

  /**
   * Final payment to be paid in relation with the loan
   * @return finalPayment
   */
  @javax.annotation.Nullable
  public String getFinalPayment() {
    return finalPayment;
  }

  public void setFinalPayment(String finalPayment) {
    this.finalPayment = finalPayment;
  }


  public LoanSimulationResponseDTO totalPayments(String totalPayments) {
    this.totalPayments = totalPayments;
    return this;
  }

  /**
   * Total payments to be paid in relation with the loan
   * @return totalPayments
   */
  @javax.annotation.Nullable
  public String getTotalPayments() {
    return totalPayments;
  }

  public void setTotalPayments(String totalPayments) {
    this.totalPayments = totalPayments;
  }


  public LoanSimulationResponseDTO totalCost(String totalCost) {
    this.totalCost = totalCost;
    return this;
  }

  /**
   * Cost of the loan
   * @return totalCost
   */
  @javax.annotation.Nullable
  public String getTotalCost() {
    return totalCost;
  }

  public void setTotalCost(String totalCost) {
    this.totalCost = totalCost;
  }


  public LoanSimulationResponseDTO totalInterest(String totalInterest) {
    this.totalInterest = totalInterest;
    return this;
  }

  /**
   * Total interest to be paid in relation with the loan
   * @return totalInterest
   */
  @javax.annotation.Nullable
  public String getTotalInterest() {
    return totalInterest;
  }

  public void setTotalInterest(String totalInterest) {
    this.totalInterest = totalInterest;
  }


  public LoanSimulationResponseDTO simulationMessage(String simulationMessage) {
    this.simulationMessage = simulationMessage;
    return this;
  }

  /**
   * Detailed descriptions of the financial terms of the loan
   * @return simulationMessage
   */
  @javax.annotation.Nullable
  public String getSimulationMessage() {
    return simulationMessage;
  }

  public void setSimulationMessage(String simulationMessage) {
    this.simulationMessage = simulationMessage;
  }


  public LoanSimulationResponseDTO merchantCost(String merchantCost) {
    this.merchantCost = merchantCost;
    return this;
  }

  /**
   * Cost of the loan to the merchant (discount, if positive), or intermediation commission (if negative)
   * @return merchantCost
   */
  @javax.annotation.Nullable
  public String getMerchantCost() {
    return merchantCost;
  }

  public void setMerchantCost(String merchantCost) {
    this.merchantCost = merchantCost;
  }


  public LoanSimulationResponseDTO lenderCode(String lenderCode) {
    this.lenderCode = lenderCode;
    return this;
  }

  /**
   * Code of the lender associated with the product returned in the simulation.
   * @return lenderCode
   */
  @javax.annotation.Nullable
  public String getLenderCode() {
    return lenderCode;
  }

  public void setLenderCode(String lenderCode) {
    this.lenderCode = lenderCode;
  }


  public LoanSimulationResponseDTO lenderName(String lenderName) {
    this.lenderName = lenderName;
    return this;
  }

  /**
   * Name of the lender associated with the product returned in the simulation.
   * @return lenderName
   */
  @javax.annotation.Nullable
  public String getLenderName() {
    return lenderName;
  }

  public void setLenderName(String lenderName) {
    this.lenderName = lenderName;
  }


  public LoanSimulationResponseDTO lenders(Set<String> lenders) {
    this.lenders = lenders;
    return this;
  }

  public LoanSimulationResponseDTO addLendersItem(String lendersItem) {
    if (this.lenders == null) {
      this.lenders = new LinkedHashSet<>();
    }
    this.lenders.add(lendersItem);
    return this;
  }

  /**
   * Code of the available lenders whose products were considered in the simulation results.
   * @return lenders
   */
  @javax.annotation.Nullable
  public Set<String> getLenders() {
    return lenders;
  }

  public void setLenders(Set<String> lenders) {
    this.lenders = lenders;
  }


  public LoanSimulationResponseDTO goodsTypeCode(String goodsTypeCode) {
    this.goodsTypeCode = goodsTypeCode;
    return this;
  }

  /**
   * Code associated to the good/service sold.
   * @return goodsTypeCode
   */
  @javax.annotation.Nullable
  public String getGoodsTypeCode() {
    return goodsTypeCode;
  }

  public void setGoodsTypeCode(String goodsTypeCode) {
    this.goodsTypeCode = goodsTypeCode;
  }


  public LoanSimulationResponseDTO insurances(List<Insurance> insurances) {
    this.insurances = insurances;
    return this;
  }

  public LoanSimulationResponseDTO addInsurancesItem(Insurance insurancesItem) {
    if (this.insurances == null) {
      this.insurances = new ArrayList<>();
    }
    this.insurances.add(insurancesItem);
    return this;
  }

  /**
   * Insurances included in the offer
   * @return insurances
   */
  @javax.annotation.Nullable
  public List<Insurance> getInsurances() {
    return insurances;
  }

  public void setInsurances(List<Insurance> insurances) {
    this.insurances = insurances;
  }


  public LoanSimulationResponseDTO currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency symbol.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanSimulationResponseDTO loanSimulationResponseDTO = (LoanSimulationResponseDTO) o;
    return Objects.equals(this.purchaseAmount, loanSimulationResponseDTO.purchaseAmount) &&
        Objects.equals(this.loanAmount, loanSimulationResponseDTO.loanAmount) &&
        Objects.equals(this.term, loanSimulationResponseDTO.term) &&
        Objects.equals(this.gracePeriod, loanSimulationResponseDTO.gracePeriod) &&
        Objects.equals(this.openingFeePct, loanSimulationResponseDTO.openingFeePct) &&
        Objects.equals(this.openingFeeCost, loanSimulationResponseDTO.openingFeeCost) &&
        Objects.equals(this.openingFeeUpfront, loanSimulationResponseDTO.openingFeeUpfront) &&
        Objects.equals(this.insuranceCost, loanSimulationResponseDTO.insuranceCost) &&
        Objects.equals(this.insuranceUpfront, loanSimulationResponseDTO.insuranceUpfront) &&
        Objects.equals(this.productType, loanSimulationResponseDTO.productType) &&
        Objects.equals(this.productTypeLabel, loanSimulationResponseDTO.productTypeLabel) &&
        Objects.equals(this.feePaymentType, loanSimulationResponseDTO.feePaymentType) &&
        Objects.equals(this.nir, loanSimulationResponseDTO.nir) &&
        Objects.equals(this.apr, loanSimulationResponseDTO.apr) &&
        Objects.equals(this.hasInsurance, loanSimulationResponseDTO.hasInsurance) &&
        Objects.equals(this.downPayment, loanSimulationResponseDTO.downPayment) &&
        Objects.equals(this.monthlyPayment, loanSimulationResponseDTO.monthlyPayment) &&
        Objects.equals(this.finalPayment, loanSimulationResponseDTO.finalPayment) &&
        Objects.equals(this.totalPayments, loanSimulationResponseDTO.totalPayments) &&
        Objects.equals(this.totalCost, loanSimulationResponseDTO.totalCost) &&
        Objects.equals(this.totalInterest, loanSimulationResponseDTO.totalInterest) &&
        Objects.equals(this.simulationMessage, loanSimulationResponseDTO.simulationMessage) &&
        Objects.equals(this.merchantCost, loanSimulationResponseDTO.merchantCost) &&
        Objects.equals(this.lenderCode, loanSimulationResponseDTO.lenderCode) &&
        Objects.equals(this.lenderName, loanSimulationResponseDTO.lenderName) &&
        Objects.equals(this.lenders, loanSimulationResponseDTO.lenders) &&
        Objects.equals(this.goodsTypeCode, loanSimulationResponseDTO.goodsTypeCode) &&
        Objects.equals(this.insurances, loanSimulationResponseDTO.insurances) &&
        Objects.equals(this.currency, loanSimulationResponseDTO.currency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(purchaseAmount, loanAmount, term, gracePeriod, openingFeePct, openingFeeCost, openingFeeUpfront, insuranceCost, insuranceUpfront, productType, productTypeLabel, feePaymentType, nir, apr, hasInsurance, downPayment, monthlyPayment, finalPayment, totalPayments, totalCost, totalInterest, simulationMessage, merchantCost, lenderCode, lenderName, lenders, goodsTypeCode, insurances, currency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanSimulationResponseDTO {\n");
    sb.append("    purchaseAmount: ").append(toIndentedString(purchaseAmount)).append("\n");
    sb.append("    loanAmount: ").append(toIndentedString(loanAmount)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    gracePeriod: ").append(toIndentedString(gracePeriod)).append("\n");
    sb.append("    openingFeePct: ").append(toIndentedString(openingFeePct)).append("\n");
    sb.append("    openingFeeCost: ").append(toIndentedString(openingFeeCost)).append("\n");
    sb.append("    openingFeeUpfront: ").append(toIndentedString(openingFeeUpfront)).append("\n");
    sb.append("    insuranceCost: ").append(toIndentedString(insuranceCost)).append("\n");
    sb.append("    insuranceUpfront: ").append(toIndentedString(insuranceUpfront)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    productTypeLabel: ").append(toIndentedString(productTypeLabel)).append("\n");
    sb.append("    feePaymentType: ").append(toIndentedString(feePaymentType)).append("\n");
    sb.append("    nir: ").append(toIndentedString(nir)).append("\n");
    sb.append("    apr: ").append(toIndentedString(apr)).append("\n");
    sb.append("    hasInsurance: ").append(toIndentedString(hasInsurance)).append("\n");
    sb.append("    downPayment: ").append(toIndentedString(downPayment)).append("\n");
    sb.append("    monthlyPayment: ").append(toIndentedString(monthlyPayment)).append("\n");
    sb.append("    finalPayment: ").append(toIndentedString(finalPayment)).append("\n");
    sb.append("    totalPayments: ").append(toIndentedString(totalPayments)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    totalInterest: ").append(toIndentedString(totalInterest)).append("\n");
    sb.append("    simulationMessage: ").append(toIndentedString(simulationMessage)).append("\n");
    sb.append("    merchantCost: ").append(toIndentedString(merchantCost)).append("\n");
    sb.append("    lenderCode: ").append(toIndentedString(lenderCode)).append("\n");
    sb.append("    lenderName: ").append(toIndentedString(lenderName)).append("\n");
    sb.append("    lenders: ").append(toIndentedString(lenders)).append("\n");
    sb.append("    goodsTypeCode: ").append(toIndentedString(goodsTypeCode)).append("\n");
    sb.append("    insurances: ").append(toIndentedString(insurances)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("purchaseAmount");
    openapiFields.add("loanAmount");
    openapiFields.add("term");
    openapiFields.add("gracePeriod");
    openapiFields.add("openingFeePct");
    openapiFields.add("openingFeeCost");
    openapiFields.add("openingFeeUpfront");
    openapiFields.add("insuranceCost");
    openapiFields.add("insuranceUpfront");
    openapiFields.add("productType");
    openapiFields.add("productTypeLabel");
    openapiFields.add("feePaymentType");
    openapiFields.add("nir");
    openapiFields.add("apr");
    openapiFields.add("hasInsurance");
    openapiFields.add("downPayment");
    openapiFields.add("monthlyPayment");
    openapiFields.add("finalPayment");
    openapiFields.add("totalPayments");
    openapiFields.add("totalCost");
    openapiFields.add("totalInterest");
    openapiFields.add("simulationMessage");
    openapiFields.add("merchantCost");
    openapiFields.add("lenderCode");
    openapiFields.add("lenderName");
    openapiFields.add("lenders");
    openapiFields.add("goodsTypeCode");
    openapiFields.add("insurances");
    openapiFields.add("currency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoanSimulationResponseDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoanSimulationResponseDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoanSimulationResponseDTO is not found in the empty JSON string", LoanSimulationResponseDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoanSimulationResponseDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoanSimulationResponseDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("purchaseAmount") != null && !jsonObj.get("purchaseAmount").isJsonNull()) && !jsonObj.get("purchaseAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseAmount").toString()));
      }
      if ((jsonObj.get("loanAmount") != null && !jsonObj.get("loanAmount").isJsonNull()) && !jsonObj.get("loanAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loanAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loanAmount").toString()));
      }
      if ((jsonObj.get("openingFeePct") != null && !jsonObj.get("openingFeePct").isJsonNull()) && !jsonObj.get("openingFeePct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openingFeePct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openingFeePct").toString()));
      }
      if ((jsonObj.get("openingFeeCost") != null && !jsonObj.get("openingFeeCost").isJsonNull()) && !jsonObj.get("openingFeeCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openingFeeCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openingFeeCost").toString()));
      }
      if ((jsonObj.get("openingFeeUpfront") != null && !jsonObj.get("openingFeeUpfront").isJsonNull()) && !jsonObj.get("openingFeeUpfront").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openingFeeUpfront` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openingFeeUpfront").toString()));
      }
      if ((jsonObj.get("insuranceCost") != null && !jsonObj.get("insuranceCost").isJsonNull()) && !jsonObj.get("insuranceCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insuranceCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insuranceCost").toString()));
      }
      if ((jsonObj.get("insuranceUpfront") != null && !jsonObj.get("insuranceUpfront").isJsonNull()) && !jsonObj.get("insuranceUpfront").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insuranceUpfront` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insuranceUpfront").toString()));
      }
      if ((jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) && !jsonObj.get("productType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productType").toString()));
      }
      // validate the optional field `productType`
      if (jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) {
        ProductTypeEnum.validateJsonElement(jsonObj.get("productType"));
      }
      if ((jsonObj.get("productTypeLabel") != null && !jsonObj.get("productTypeLabel").isJsonNull()) && !jsonObj.get("productTypeLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypeLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTypeLabel").toString()));
      }
      if ((jsonObj.get("feePaymentType") != null && !jsonObj.get("feePaymentType").isJsonNull()) && !jsonObj.get("feePaymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feePaymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feePaymentType").toString()));
      }
      // validate the optional field `feePaymentType`
      if (jsonObj.get("feePaymentType") != null && !jsonObj.get("feePaymentType").isJsonNull()) {
        FeePaymentTypeEnum.validateJsonElement(jsonObj.get("feePaymentType"));
      }
      if ((jsonObj.get("nir") != null && !jsonObj.get("nir").isJsonNull()) && !jsonObj.get("nir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nir").toString()));
      }
      if ((jsonObj.get("apr") != null && !jsonObj.get("apr").isJsonNull()) && !jsonObj.get("apr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apr").toString()));
      }
      if ((jsonObj.get("downPayment") != null && !jsonObj.get("downPayment").isJsonNull()) && !jsonObj.get("downPayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downPayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downPayment").toString()));
      }
      if ((jsonObj.get("monthlyPayment") != null && !jsonObj.get("monthlyPayment").isJsonNull()) && !jsonObj.get("monthlyPayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthlyPayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monthlyPayment").toString()));
      }
      if ((jsonObj.get("finalPayment") != null && !jsonObj.get("finalPayment").isJsonNull()) && !jsonObj.get("finalPayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finalPayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finalPayment").toString()));
      }
      if ((jsonObj.get("totalPayments") != null && !jsonObj.get("totalPayments").isJsonNull()) && !jsonObj.get("totalPayments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalPayments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalPayments").toString()));
      }
      if ((jsonObj.get("totalCost") != null && !jsonObj.get("totalCost").isJsonNull()) && !jsonObj.get("totalCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalCost").toString()));
      }
      if ((jsonObj.get("totalInterest") != null && !jsonObj.get("totalInterest").isJsonNull()) && !jsonObj.get("totalInterest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalInterest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalInterest").toString()));
      }
      if ((jsonObj.get("simulationMessage") != null && !jsonObj.get("simulationMessage").isJsonNull()) && !jsonObj.get("simulationMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `simulationMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("simulationMessage").toString()));
      }
      if ((jsonObj.get("merchantCost") != null && !jsonObj.get("merchantCost").isJsonNull()) && !jsonObj.get("merchantCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCost").toString()));
      }
      if ((jsonObj.get("lenderCode") != null && !jsonObj.get("lenderCode").isJsonNull()) && !jsonObj.get("lenderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lenderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lenderCode").toString()));
      }
      if ((jsonObj.get("lenderName") != null && !jsonObj.get("lenderName").isJsonNull()) && !jsonObj.get("lenderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lenderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lenderName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lenders") != null && !jsonObj.get("lenders").isJsonNull() && !jsonObj.get("lenders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lenders` to be an array in the JSON string but got `%s`", jsonObj.get("lenders").toString()));
      }
      if ((jsonObj.get("goodsTypeCode") != null && !jsonObj.get("goodsTypeCode").isJsonNull()) && !jsonObj.get("goodsTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goodsTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goodsTypeCode").toString()));
      }
      if (jsonObj.get("insurances") != null && !jsonObj.get("insurances").isJsonNull()) {
        JsonArray jsonArrayinsurances = jsonObj.getAsJsonArray("insurances");
        if (jsonArrayinsurances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("insurances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `insurances` to be an array in the JSON string but got `%s`", jsonObj.get("insurances").toString()));
          }

          // validate the optional field `insurances` (array)
          for (int i = 0; i < jsonArrayinsurances.size(); i++) {
            Insurance.validateJsonElement(jsonArrayinsurances.get(i));
          };
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoanSimulationResponseDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoanSimulationResponseDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoanSimulationResponseDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoanSimulationResponseDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<LoanSimulationResponseDTO>() {
           @Override
           public void write(JsonWriter out, LoanSimulationResponseDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoanSimulationResponseDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoanSimulationResponseDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoanSimulationResponseDTO
   * @throws IOException if the JSON string is invalid with respect to LoanSimulationResponseDTO
   */
  public static LoanSimulationResponseDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoanSimulationResponseDTO.class);
  }

  /**
   * Convert an instance of LoanSimulationResponseDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

