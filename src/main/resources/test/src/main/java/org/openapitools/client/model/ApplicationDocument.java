/*
 * Lendismart API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The application document dto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-23T19:03:15.118012600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
public class ApplicationDocument {
  /**
   * Gets or Sets documentType
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    ID1("ID1"),
    
    ID2("ID2"),
    
    FISCAL_ID("FISCAL_ID"),
    
    INCOME("INCOME"),
    
    CONTRACT_SIGNED("CONTRACT_SIGNED"),
    
    CONTRACT_SIGNED_DIGITAL("CONTRACT_SIGNED_DIGITAL"),
    
    APPLICATION("APPLICATION"),
    
    CONSENT("CONSENT"),
    
    DEBIT_ORDER("DEBIT_ORDER"),
    
    ACCOUNT("ACCOUNT"),
    
    ADDRESS("ADDRESS"),
    
    INVOICE("INVOICE"),
    
    CONTRACT("CONTRACT"),
    
    INE("INE"),
    
    DELIVERY("DELIVERY"),
    
    IDENTIFICATION_REQUIREMENT("IDENTIFICATION_REQUIREMENT"),
    
    VEHICLE_REGISTRATION("VEHICLE_REGISTRATION"),
    
    VEHICLE_INSPECTION_SHEET("VEHICLE_INSPECTION_SHEET"),
    
    WORK_HISTORY("WORK_HISTORY"),
    
    ALL("ALL"),
    
    ALL_WITHOUT_CONTRACT("ALL_WITHOUT_CONTRACT"),
    
    OTHER("OTHER");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private DocumentTypeEnum documentType;

  /**
   * Gets or Sets applicantRole
   */
  @JsonAdapter(ApplicantRoleEnum.Adapter.class)
  public enum ApplicantRoleEnum {
    MAIN_APPLICANT("MAIN_APPLICANT"),
    
    COAPPLICANT("COAPPLICANT"),
    
    GUARANTOR("GUARANTOR");

    private String value;

    ApplicantRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicantRoleEnum fromValue(String value) {
      for (ApplicantRoleEnum b : ApplicantRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicantRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicantRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicantRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicantRoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApplicantRoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPLICANT_ROLE = "applicantRole";
  @SerializedName(SERIALIZED_NAME_APPLICANT_ROLE)
  private ApplicantRoleEnum applicantRole;

  public ApplicationDocument() {
  }

  public ApplicationDocument documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * Get documentType
   * @return documentType
   */
  @javax.annotation.Nullable
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public ApplicationDocument applicantRole(ApplicantRoleEnum applicantRole) {
    this.applicantRole = applicantRole;
    return this;
  }

  /**
   * Get applicantRole
   * @return applicantRole
   */
  @javax.annotation.Nullable
  public ApplicantRoleEnum getApplicantRole() {
    return applicantRole;
  }

  public void setApplicantRole(ApplicantRoleEnum applicantRole) {
    this.applicantRole = applicantRole;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationDocument applicationDocument = (ApplicationDocument) o;
    return Objects.equals(this.documentType, applicationDocument.documentType) &&
        Objects.equals(this.applicantRole, applicationDocument.applicantRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentType, applicantRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationDocument {\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    applicantRole: ").append(toIndentedString(applicantRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentType");
    openapiFields.add("applicantRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationDocument is not found in the empty JSON string", ApplicationDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) && !jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      // validate the optional field `documentType`
      if (jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) {
        DocumentTypeEnum.validateJsonElement(jsonObj.get("documentType"));
      }
      if ((jsonObj.get("applicantRole") != null && !jsonObj.get("applicantRole").isJsonNull()) && !jsonObj.get("applicantRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicantRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicantRole").toString()));
      }
      // validate the optional field `applicantRole`
      if (jsonObj.get("applicantRole") != null && !jsonObj.get("applicantRole").isJsonNull()) {
        ApplicantRoleEnum.validateJsonElement(jsonObj.get("applicantRole"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationDocument>() {
           @Override
           public void write(JsonWriter out, ApplicationDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationDocument
   * @throws IOException if the JSON string is invalid with respect to ApplicationDocument
   */
  public static ApplicationDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationDocument.class);
  }

  /**
   * Convert an instance of ApplicationDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

